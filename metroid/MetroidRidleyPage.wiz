// -------------------
// METROID source code
// -------------------
// MAIN PROGRAMMERS
//     HAI YUKAMI
//   ZARU SOBAJIMA
//    GPZ SENGOKU
//    N.SHIOTANI
//     M.HOUDAI
// (C) 1986 NINTENDO
//
//Commented by Dirty McDingus (nmikstas@yahoo.com)
//Disassembled using TRaCER.
//Can be reassembled using Ophis.
//Last updated: 3/9/2010

//Ridley hideout (memory page 5)

in ridley_page, 0x8000: do

//-----------------------------------------[ Start of code ]------------------------------------------

def ridley_page_8000:
    goto game_engine_page_F410
def ridley_page_8003:
    goto game_engine_page_F438
def ridley_page_8006:
    goto game_engine_page_F416
def ridley_page_8009:
    goto game_engine_page_F852
def ridley_page_800C:
    //($E094)
    goto updateenemyanim
def ridley_page_800F:
    goto game_engine_page_F68D
    goto game_engine_page_F83E
    goto game_engine_page_F85A
    goto 0xfbb9
def ridley_page_801B:
    goto game_engine_page_FB88
def ridley_page_801E:
    goto game_engine_page_FBCA
def ridley_page_8021:
    goto game_engine_page_F870
def ridley_page_8024:
    //($C27C)
    goto chooseroutine
def ridley_page_8027:
    goto game_engine_page_FD8F
def ridley_page_802A:
    goto 0xeb6e
    goto ridley_page_8244
    goto ridley_page_8318
    goto game_engine_page_FA1E
def ridley_page_8036:
    goto ridley_page_833F
def ridley_page_8039:
    goto ridley_page_8395
    goto game_engine_page_DD8B
    goto 0xfedc
    //($CE92)
    goto subtracthealth
    //($C3FB)
    goto base10subtract

def ridley_page_8048:
    word: ridley_page_84FD, ridley_page_84A6, ridley_page_844A, ridley_page_844A, ridley_page_84A6, ridley_page_84FD, 0x83f4, 0x83f4

    x = [pageindex]
    a = [0x405:x]
    a = a << 1
    goto _0007 when negative
    a = [enstatus:x]
    compare a to 0x2
    goto _0007 when ~zero
    call ridley_page_8244
    a = [0x0]
    goto _0001 when ~negative
    //($C3D4)
    call twoscompliment
    [0x66] = a
def _0000:
    call 0x83f5
    call ridley_page_80B8
    [0x66]--
    goto _0000 when ~zero
def _0001:
    goto _0003 when zero
    [0x66] = a
def _0002:
    call 0x844b
    call ridley_page_80FB
    [0x66]--
    goto _0002 when ~zero
def _0003:
    call ridley_page_8318
    a = [0x0]
    goto _0005 when ~negative
    //($C3D4)
    call twoscompliment
    [0x66] = a
def _0004:
    call 0x84a7
    call ridley_page_816E
    [0x66]--
    goto _0004 when ~zero
def _0005:
    goto _0007 when zero
    [0x66] = a
def _0006:
    call 0x84fe
    call ridley_page_8134
    [0x66]--
    goto _0006 when ~zero
def _0007:
    return
 
def ridley_page_80B0:
    y = [endataindex:x]
    a = [ridley_page_977B:y]
    //*2
    a = a << 1
    return

def ridley_page_80B8:
    x = [pageindex]
    goto ridley_page_80FA when carry
    a = [0x405:x]
    goto ridley_page_80C7 when ~negative
def ridley_page_80C1:
    call ridley_page_81FC
    goto ridley_page_80F6
def ridley_page_80C7:
    call ridley_page_80B0
    goto ridley_page_80EA when ~negative
    a = [0x6b03:x]
    goto ridley_page_80C1 when zero
    goto ridley_page_80D8 when ~negative
    call ridley_page_81B1
    goto ridley_page_80E2 when zero
def ridley_page_80D8:
    carry = 1
    [0x402:x] = [0x402:x] >>> 1
    [encounter:x] = [encounter:x] >>> 1
    goto ridley_page_80F6
def ridley_page_80E2:
    [0x402:x] = a
    [encounter:x] = a
    goto ridley_page_80F6 when zero
def ridley_page_80EA:
    a = [ridley_page_977B:y]
    a = a >> 1
    a = a >> 1
    goto ridley_page_80F6 when ~carry
    a = 0x4
    call ridley_page_856B
def ridley_page_80F6:
    a = 0x1
    [0x66] = a
def ridley_page_80FA:
    return
 
def ridley_page_80FB:
    x = [pageindex]
    goto ridley_page_8133 when carry
    a = [0x405:x]
    goto ridley_page_810A when ~negative
def ridley_page_8104:
    call ridley_page_81FC
    goto ridley_page_812F
def ridley_page_810A:
    call ridley_page_80B0
    goto ridley_page_8123 when ~negative
    a = [0x6b03:x]
    goto ridley_page_8104 when zero
    goto ridley_page_8120 when ~negative
    carry = 0
    [0x402:x] = [0x402:x] >>> 1
    [encounter:x] = [encounter:x] >>> 1
    goto ridley_page_812F
def ridley_page_8120:
    call ridley_page_81B1
def ridley_page_8123:
    a = [ridley_page_977B:y]
    a = a >> 1
    a = a >> 1
    goto ridley_page_812F when ~carry
    a = 0x4
    call ridley_page_856B
def ridley_page_812F:
    a = 0x1
    [0x66] = a
def ridley_page_8133:
    return
 
def ridley_page_8134:
    x = [pageindex]
    goto ridley_page_816D when carry
    call ridley_page_80B0
    goto ridley_page_815E when ~negative
    a = [0x405:x]
    goto ridley_page_8148 when negative
def ridley_page_8142:
    call ridley_page_81C7
    goto ridley_page_8169
def ridley_page_8148:
    a = [0x6b03:x]
    goto ridley_page_8142 when zero
    goto ridley_page_8159 when ~negative
    carry = 0
    [0x403:x] = [0x403:x] >>> 1
    [0x407:x] = [0x407:x] >>> 1
    goto ridley_page_8169
def ridley_page_8159:
    call ridley_page_81C0
    goto ridley_page_8169 when zero
def ridley_page_815E:
    a = [ridley_page_977B:y]
    a = a >> 1
    goto ridley_page_8169 when ~carry
    a = 0x1
    call ridley_page_856B
def ridley_page_8169:
    a = 0x1
    [0x66] = a
def ridley_page_816D:
    return

def ridley_page_816E:
    x = [pageindex]
    goto ridley_page_81B0 when carry
    call ridley_page_80B0
    goto ridley_page_81A0 when ~negative
    a = [0x405:x]
    goto ridley_page_8182 when negative
def ridley_page_817C:
    call ridley_page_81C7
    goto ridley_page_81AC
def ridley_page_8182:
    a = [0x6b03:x]
    goto ridley_page_817C when zero
    goto ridley_page_818E when ~negative
    call ridley_page_81C0
    goto ridley_page_8198 when zero
def ridley_page_818E:
    carry = 1
    [0x403:x] = [0x403:x] >>> 1
    [0x407:x] = [0x407:x] >>> 1
    goto ridley_page_81AC
def ridley_page_8198:
    [0x403:x] = a
    [0x407:x] = a
    goto ridley_page_81AC when zero
def ridley_page_81A0:
    call ridley_page_80B0
    a = a >> 1
    a = a >> 1
    goto ridley_page_81AC when ~carry
    a = 0x1
    call ridley_page_856B
def ridley_page_81AC:
    a = 0x1
    [0x66] = a
def ridley_page_81B0:
    return
 
def ridley_page_81B1:
    call ridley_page_81B8
    [0x6afe:x] = a
    return

def ridley_page_81B8:
    a = 0x20
    call game_engine_page_F744
    a = 0x0
    return

def ridley_page_81C0:
    call ridley_page_81B8
    [0x6aff:x] = a
    return

def ridley_page_81C7:
    call ridley_page_81F6
    goto ridley_page_81F5 when ~zero
    a = 0x1
    call ridley_page_856B
    a = [0x6aff:x]
    call game_engine_page_C3D4
    [0x6aff:x] = a

    call ridley_page_81F6
    goto ridley_page_81F5 when ~zero
    call ridley_page_80B0
    carry = 1
    goto ridley_page_81ED when ~negative
    a = 0x0
    a = a -# [0x407:x]
    [0x407:x] = a
def ridley_page_81ED:
    a = 0x0
    a = a -# [0x403:x]
    [0x403:x] = a
def ridley_page_81F5:
    return

def ridley_page_81F6:
    call game_engine_page_F74B
    a = a & 0x20
    return

def ridley_page_81FC:
    call ridley_page_81F6
    goto ridley_page_81F5 when ~zero
    a = 0x4
    call ridley_page_856B
    a = [0x6afe:x]
    call game_engine_page_C3D4
    [0x6afe:x] = a

    call ridley_page_81F6
    goto ridley_page_822A when ~zero
    call ridley_page_80B0
    carry = 1
    goto ridley_page_8222 when ~negative
    a = 0x0
    a = a -# [encounter:x]
    [encounter:x] = a
def ridley_page_8222:
    a = 0x0
    a = a -# [0x402:x]
    [0x402:x] = a
def ridley_page_822A:
    return

def ridley_page_822B:
    a = [0x405:x]
    goto ridley_page_8232 when ~negative
    a = a >> 1
    a = a >> 1
def ridley_page_8232:
    a = a >> 1
    a = [0x408:x]
    a = a <<< 1
    a = a << 1
    y = a
    a = [ridley_page_96DB:y]
    [0x81] = a
    a = [0x96dc:y]
    [0x82] = a
    return

def ridley_page_8244:
    call ridley_page_80B0
    goto ridley_page_824C when ~negative
    goto ridley_page_833F
def ridley_page_824C:
    a = [0x405:x]
    a = a & 0x20
    a = a ^ 0x20
    goto ridley_page_82A2 when zero
    call ridley_page_822B
def ridley_page_8258:
    y = [encounter:x]
def ridley_page_825B:
    a = [[0x81]:y]
    compare a to 0xf0
    goto ridley_page_827F when ~carry
    compare a to 0xfa
    goto ridley_page_827C when zero
    compare a to 0xfb
    goto ridley_page_82B0 when zero
    compare a to 0xfc
    goto ridley_page_82B3 when zero
    compare a to 0xfd
    goto ridley_page_82A5 when zero
    compare a to 0xfe
    goto ridley_page_82DE when zero
    a = 0x0
    [encounter:x] = a
    goto ridley_page_8258 when zero
def ridley_page_827C:
    goto ridley_page_8312
def ridley_page_827F:
    carry = 1
    a = a -# [endelay:x]
    goto ridley_page_8290 when ~zero
    [endelay:x] = a
    y++
    y++
    a = y
    [encounter:x] = a
    goto ridley_page_825B when ~zero
def ridley_page_8290:
    [endelay:x]++
    y++
    a = [[0x81]:y]
    a = a << 1
    push p
    //($C2BE)Divide by 32.
    call adiv32
    p = pop
    goto ridley_page_82A2 when ~carry
    a = a ^ 0xff
    a = a +# 0x0
def ridley_page_82A2:
    [0x0] = a
    return

def ridley_page_82A5:
    [encounter:x]++
    y++
    a = 0x0
    [0x6b01:x] = a
    goto ridley_page_825B when zero
def ridley_page_82B0:
    a = pop
    a = pop
    return

def ridley_page_82B3:
    a = [0x6b03:x]
    goto ridley_page_82BE when ~negative
    call game_engine_page_E770
    goto ridley_page_82C3
def ridley_page_82BE:
    goto ridley_page_82D2 when zero
    call game_engine_page_E77B
def ridley_page_82C3:
    x = [pageindex]
    goto ridley_page_82D2 when carry
    y = [encounter:x]
    y++
    a = 0x0
    [0x6b03:x] = a
    goto ridley_page_82D7 when zero
def ridley_page_82D2:
    y = [encounter:x]
    y--
    y--
def ridley_page_82D7:
    a = y
    [encounter:x] = a
    goto ridley_page_825B
def ridley_page_82DE:
    y--
    y--
    a = y
    [encounter:x] = a
    a = [0x6b03:x]
    goto ridley_page_82EF when ~negative
    call game_engine_page_E770
    goto ridley_page_82F4
def ridley_page_82EF:
    goto ridley_page_82FB when zero
    call game_engine_page_E77B
def ridley_page_82F4:
    x = [pageindex]
    goto ridley_page_82FB when ~carry
    goto ridley_page_8258
def ridley_page_82FB:
    y = [endataindex:x]
    a = [ridley_page_968B:y]
    a = a & 0x20
    goto ridley_page_8312 when zero
    a = [0x405:x]
    a = a ^ 0x5
    a = a | [ridley_page_968B:y]
    a = a & 0x1f
    [0x405:x] = a
def ridley_page_8312:
    call ridley_page_81B1
    goto ridley_page_82A2
def ridley_page_8318:
    call ridley_page_80B0
    goto ridley_page_8320 when ~negative
    goto ridley_page_8395
def ridley_page_8320:
    a = [0x405:x]
    a = a & 0x20
    a = a ^ 0x20
    goto ridley_page_833C when zero
    y = [encounter:x]
    y++
    a = [[0x81]:y]
    x = a
    a = a & 0x8
    push p
    a = x
    a = a & 0x7
    p = pop
    goto ridley_page_833C when zero
    call game_engine_page_C3D4
def ridley_page_833C:
    [0x0] = a
    return

def ridley_page_833F:
    y = 0xe
    a = [0x6afe:x]
    goto ridley_page_835E when negative
    carry = 0
    a = a +# [encounter:x]
    [encounter:x] = a
    a = [0x402:x]
    a = a +# 0x0
    [0x402:x] = a
    goto ridley_page_8376 when ~negative
def ridley_page_8357:
    call game_engine_page_C3D4
    y = 0xf2
    goto ridley_page_8376 when ~zero
def ridley_page_835E:
    call game_engine_page_C3D4
    carry = 1
    [0x0] = a
    a = [encounter:x]
    a = a -# [0x0]
    [encounter:x] = a
    a = [0x402:x]
    a = a -# 0x0
    [0x402:x] = a
    goto ridley_page_8357 when negative
def ridley_page_8376:
    compare a to 0xe
    goto ridley_page_8383 when ~carry
    a = 0x0
    [encounter:x] = a
    a = y
    [0x402:x] = a
def ridley_page_8383:
    a = [0x6afc:x]
    carry = 0
    a = a +# [encounter:x]
    [0x6afc:x] = a
    a = 0x0
    a = a +# [0x402:x]
    [0x0] = a
    return

def ridley_page_8395:
    a = 0x0
    [0x0] = a
    [0x2] = a
    a = 0xe
    [0x1] = a
    [0x3] = a
    a = [0x407:x]
    carry = 0
    a = a +# [0x6aff:x]
    [0x407:x] = a
    [0x4] = a
    a = 0x0
    y = [0x6aff:x]
    goto ridley_page_83B6 when ~negative
    a = 0xff
def ridley_page_83B6:
    a = a +# [0x403:x]
    [0x403:x] = a
    y = a
    goto ridley_page_83D0 when ~negative
    a = 0x0
    carry = 1
    a = a -# [0x407:x]
    [0x4] = a
    a = 0x0
    a = a -# [0x403:x]
    y = a
    call game_engine_page_E449
def ridley_page_83D0:
    a = [0x4]
    compare a to [0x2]
    a = y
    a = a -# [0x3]
    goto ridley_page_83E3 when ~carry
    a = [0x0]
    [0x407:x] = a
    a = [0x1]
    [0x403:x] = a
def ridley_page_83E3:
    a = [0x6afd:x]
    carry = 0
    a = a +# [0x407:x]
    [0x6afd:x] = a
    a = 0x0
    a = a +# [0x403:x]
    [0x0] = a
    return

    x = [pageindex]
    a = [enyroompos:x]
    carry = 1
    a = a -# [enrady:x]
    a = a & 0x7
    carry = 1
    goto ridley_page_8406 when ~zero
    call game_engine_page_E770
def ridley_page_8406:
    y = 0x0
    [0x0] = y
    x = [pageindex]
    goto ridley_page_844A when ~carry
    [0x0]++
    y = [enyroompos:x]
    goto ridley_page_8429 when ~zero
    y = 0xf0
    a = [0x49]
    compare a to 0x2
    goto ridley_page_8429 when carry
    a = [0xfc]
    goto ridley_page_844A when zero
    call ridley_page_8563
    goto ridley_page_844A when zero
    call ridley_page_855A
def ridley_page_8429:
    y--
    a = y
    [enyroompos:x] = a
    compare a to [enrady:x]
    goto ridley_page_8441 when ~zero
    a = [0xfc]
    goto ridley_page_843C when zero
    call ridley_page_8563
    goto ridley_page_8441 when ~zero
def ridley_page_843C:
    [enyroompos:x]++
    carry = 0
    return

def ridley_page_8441:
    a = [0x405:x]
    goto ridley_page_8449 when negative
    [0x6b01:x]++
def ridley_page_8449:
    carry = 1
def ridley_page_844A:
    return

    x = [pageindex]
    a = [enyroompos:x]
    carry = 0
    a = a +# [enrady:x]
    a = a & 0x7
    carry = 1
    goto ridley_page_845C when ~zero
    call game_engine_page_E77B
def ridley_page_845C:
    y = 0x0
    [0x0] = y
    x = [pageindex]
    goto ridley_page_84A6 when ~carry
    [0x0]++
    y = [enyroompos:x]
    compare y to 0xef
    goto ridley_page_8481 when ~zero
    y = 0xff
    a = [0x49]
    compare a to 0x2
    goto ridley_page_8481 when carry
    a = [0xfc]
    goto ridley_page_84A6 when zero
    call ridley_page_8563
    goto ridley_page_84A6 when ~zero
    call ridley_page_855A
def ridley_page_8481:
    y++
    a = y
    [enyroompos:x] = a
    carry = 0
    a = a +# [enrady:x]
    compare a to 0xef
    goto ridley_page_849D when ~zero
    a = [0xfc]
    goto ridley_page_8497 when zero
    call ridley_page_8563
    goto ridley_page_849D when zero
def ridley_page_8497:
    [enyroompos:x]--
    carry = 0
    goto ridley_page_84A6 when ~carry
def ridley_page_849D:
    a = [0x405:x]
    goto ridley_page_84A5 when negative
    [0x6b01:x]--
def ridley_page_84A5:
    carry = 1
def ridley_page_84A6:
    return

    x = [pageindex]
    a = [enxroompos:x]
    carry = 1
    a = a -# [enradx:x]
    a = a & 0x7
    carry = 1
    goto ridley_page_84B8 when ~zero
    call game_engine_page_E8F1
def ridley_page_84B8:
    y = 0x0
    [0x0] = y
    x = [pageindex]
    goto ridley_page_84FD when ~carry
    [0x0]++
    y = [enxroompos:x]
    goto ridley_page_84DA when ~zero
    a = [0x49]
    compare a to 0x2
    goto ridley_page_84DA when ~carry
    a = [0xfd]
    goto ridley_page_84D4 when zero
    call ridley_page_8563
def ridley_page_84D4:
    carry = 0
    goto ridley_page_84FD when zero
    call ridley_page_855A
def ridley_page_84DA:
    [enxroompos:x]--
    a = [enxroompos:x]
    compare a to [enradx:x]
    goto ridley_page_84F4 when ~zero
    a = [0xfd]
    goto ridley_page_84EE when zero
    call ridley_page_8563
    goto ridley_page_84F4 when ~zero
def ridley_page_84EE:
    [enxroompos:x]++
    carry = 0
    goto ridley_page_84FD when ~carry
def ridley_page_84F4:
    a = [0x405:x]
    goto ridley_page_84FC when ~negative
    [0x6b01:x]++
def ridley_page_84FC:
    carry = 1
def ridley_page_84FD:
    return

    x = [pageindex]
    a = [enxroompos:x]
    carry = 0
    a = a +# [enradx:x]
    a = a & 0x7
    carry = 1
    goto ridley_page_850F when ~zero
    call game_engine_page_E8FC
def ridley_page_850F:
    y = 0x0
    [0x0] = y
    x = [pageindex]
    goto ridley_page_8559 when ~carry
    [0x0]++
    [enxroompos:x]++
    goto ridley_page_8536 when ~zero
    a = [0x49]
    compare a to 0x2
    goto ridley_page_8536 when ~carry
    a = [0xfd]
    goto ridley_page_852D when zero
    call ridley_page_8563
    goto ridley_page_8533 when zero
def ridley_page_852D:
    [enxroompos:x]--
    carry = 0
    goto ridley_page_8559 when ~carry
def ridley_page_8533:
    call ridley_page_855A
def ridley_page_8536:
    a = [enxroompos:x]
    carry = 0
    a = a +# [enradx:x]
    compare a to 0xff
    goto ridley_page_8550 when ~zero
    a = [0xfd]
    goto ridley_page_854A when zero
    call ridley_page_8563
    goto ridley_page_8550 when zero
def ridley_page_854A:
    [enxroompos:x]--
    carry = 0
    goto ridley_page_8559 when ~carry
def ridley_page_8550:
    a = [0x405:x]
    goto ridley_page_8558 when ~negative
    [0x6b01:x]--
def ridley_page_8558:
    carry = 1
def ridley_page_8559:
    return

def ridley_page_855A:
    a = [ennametable:x]
    a = a ^ 0x1
    [ennametable:x] = a
    return

def ridley_page_8563:
    a = [ennametable:x]
    a = a ^ [0xff]
    a = a & 0x1
    return

def ridley_page_856B:
    a = a ^ [0x405:x]
    [0x405:x] = a
    return

//---------------------------------[ Object animation data tables ]----------------------------------

//The following tables are indices into the FramePtrTable that correspond to various animations. The
//FramePtrTable represents individual frames and the entries in ObjectAnimIndexTbl are the groups of
//frames responsible for animaton Samus, her weapons and other objects.

def objectanimindextbl:


//Samus run animation.
    byte: 0x3, 0x4, 0x5, 0xff

//Samus front animation.
    byte: 0x7, 0xff

//Samus jump out of ball animation.
    byte: 0x17

//Samus Stand animation.
    byte: 0x8, 0xff

//Samus stand and fire animation.
    byte: 0x22, 0xff

//Samus stand and jump animation.
    byte: 0x4

//Samus Jump animation.
    byte: 0x10, 0xff

//Samus summersault animation.
    byte: 0x17, 0x18, 0x19, 0x1a, 0xff

//Samus run and jump animation.
    byte: 0x3, 0x17, 0xff

//Samus roll animation.
    byte: 0x1e, 0x1d, 0x1c, 0x1b, 0xff

//Bullet animation.
    byte: 0x28, 0xff

//Bullet hit animation.
    byte: 0x2a, 0xf7, 0xff

//Samus jump and fire animation.
    byte: 0x12, 0xff

//Samus run and fire animation.
    byte: 0xc, 0xd, 0xe, 0xff

//Samus point up and shoot animation.
    byte: 0x30

//Samus point up animation.
    byte: 0x2b, 0xff

//Door open animation.
    byte: 0x31, 0x31, 0x33, 0xf7, 0xff

//Door close animation.
    byte: 0x33, 0x33, 0x31, 0xff

//Samus explode animation.
    byte: 0x35, 0xff

//Samus jump and point up animation.
    byte: 0x39, 0x38, 0xff

//Samus run and point up animation.
    byte: 0x40, 0x41, 0x42, 0xff

//Samus run, point up and shoot animation 1.
    byte: 0x46, 0xff

//Samus run, point up and shoot animation 2.
    byte: 0x47, 0xff

//Samus run, point up and shoot animation 3.
    byte: 0x48, 0xff

//Samus on elevator animation 1.
    byte: 0x7, 0xf7, 0xf7, 0x7, 0xf7, 0xf7, 0xf7, 0x7, 0xf7, 0xf7, 0xf7, 0xf7, 0x7, 0xf7, 0xff

//Samus on elevator animation 2.
    byte: 0x23, 0xf7, 0xf7, 0x23, 0xf7, 0xf7, 0xf7, 0x23, 0xf7, 0xf7, 0xf7, 0xf7, 0x23, 0xf7, 0xff

//Samus on elevator animation 3.
    byte: 0x7, 0xf7, 0xf7, 0xf7, 0xf7, 0x7, 0xf7, 0xf7, 0xf7, 0x7, 0xf7, 0xf7, 0x7, 0xf7, 0xff

//Samus on elevator animation 4.
    byte: 0x23, 0xf7, 0xf7, 0xf7, 0xf7, 0x23, 0xf7, 0xf7, 0xf7, 0x23, 0xf7, 0xf7, 0x23, 0xf7, 0xff

//Wave beam animation.
    byte: 0x4b, 0xff

//Bomb tick animation.
    byte: 0x4e, 0x4f, 0xff

//Bomb explode animation.
    byte: 0x3c, 0x4a, 0x49, 0x4a, 0x4d, 0x4a, 0x4d, 0xf7, 0xff

//Missile left animation.
    byte: 0x26, 0xff

//Missile right animation.
    byte: 0x25, 0xff

//Missile up animation.
    byte: 0x27, 0xff

//Missile explode animation.
    byte: 0x67, 0x67, 0x67, 0x68, 0x68, 0x69, 0xf7, 0xff

//----------------------------[ Sprite drawing pointer tables ]--------------------------------------

//The above animation pointers provide an index into the following table
//for the animation sequences.

def frameptrtable:

    word: ridley_page_87CB, ridley_page_87CB, ridley_page_87CB, ridley_page_87CB, 0x87dd, 0x87f0, 0x8802, 0x8802
    word: ridley_page_8818, 0x882c, 0x882c, 0x882c, 0x882c, 0x883e, 0x8851, ridley_page_8863
    word: ridley_page_8863, 0x8874, 0x8874, 0x8885, 0x8885, 0x8885, 0x8885, 0x8885
    word: ridley_page_888F, 0x8899, 0x88a3, 0x88ad, 0x88b8, 0x88c3, 0x88ce, ridley_page_88D9
    word: ridley_page_88D9, ridley_page_88D9, ridley_page_88D9, 0x88ee, 0x88f8, 0x88f8, 0x88fe, 0x8904
    word: ridley_page_890A, 0x890f, 0x890f, 0x8914, ridley_page_8928, ridley_page_8928, ridley_page_8928, ridley_page_8928
    word: ridley_page_8928, 0x893c, 0x8948, 0x8948, 0x8954, 0x8954, ridley_page_8961, ridley_page_8961
    word: ridley_page_8961, 0x8974, 0x8987, 0x8987, 0x8987, ridley_page_8995, ridley_page_8995, ridley_page_8995
    word: ridley_page_8995, 0x89a9, 0x89be, 0x89d2, 0x89d2, 0x89d2, 0x89d2, 0x89e6
    word: ridley_page_89FB, 0x8a0f, 0x8a1d, 0x8a21, 0x8a26, 0x8a26, 0x8a3c, 0x8a41
    word: ridley_page_8A46, 0x8a4e, 0x8a56, 0x8a5e, 0x8a66, 0x8a6e, 0x8a76, 0x8a7e
    word: ridley_page_8A86, 0x8a8e, 0x8a9c, 0x8aa1, 0x8aa6, 0x8aae, 0x8aba, ridley_page_8AC4
    word: ridley_page_8AC4, ridley_page_8AC4, ridley_page_8AC4, ridley_page_8AC4, ridley_page_8AC4, ridley_page_8AC4, 0x8ad8, 0x8ae9
    word: ridley_page_8AF3, 0x8b03

//The following table provides pointers to data used for the placement of the sprites that make up
//Samus and other non-enemy objects.

def placeptrtable:

    word: ridley_page_8701, 0x871f, 0x872b, 0x8737, 0x8747, 0x8751, 0x86fd, 0x875d
    word: ridley_page_8775, 0x878d, 0x8791, 0x8799, 0x87a5, 0x8749, 0x87b1

//------------------------------[ Sprite placement data tables ]-------------------------------------

//Sprite placement data. The placement data is grouped into two byte segments. The first byte is the
//y placement byte and the second is the x placement byte.  If the MSB is set in the byte, the byte
//is in twos compliment format so when it is added to the object position, the end result is to
//decrease the x or y position of the sprite.  The Samus explode table is a special case with special
//data bytes. The format of those data bytes is listed just above the Samus explode data. Each data
//table has a graphical representation above it to show how the sprites are laid out with respect to
//the object position, which is represented by a * in the table. The numbers in the lower right corner
//of the boxes indicates which segment of the data table represents which box in the graphic. Each box
//is filled with an 8x8 sprite.

//Samus pointing up frames. Added to the main Samus animation table below.
//          +--------+ <----0
//          +--------+ <----1
//          |        |
//          |        |
//          |        |
//          +--------+
//          +--------+
//
//
//
//
//
//
//
//
//               *
//              +--0--+   +--1--+
    byte: 0xe8, 0xfc, 0xea, 0xfc

//Several Samus frames.
//      +-------+ <---------------D
//      +-------+ <---------------E
//      |       |
//      |   +---+----+--------+
//      |   |   |    |        |
//      +-------+    |        |
//      +-------+    |        |
//          |       0|       1|
// +----+-+-+----+-+-+--------+
// |    | | |    | | |        |
// |    | | |    | | |        |
// |    | | |    | | |        |
// |    | |2|   B|C|3|       4|
// +----+-+-+----+-+-*--------+--------+
//          |        |        |        |
//          |        |        |        |
//          |        |        |        |
//          |       5|       6|       7|
//          +--------+--------+--------+
//          |        |        |        |
//          |        |        |        |
//          |        |        |        |
//          |       8|       9|       A|
//          +--------+--------+--------+
//              +--0--+   +--1--+   +--2--+   +--3--+   +--4--+   +--5--+   +--6--+   +--7--+
def ridley_page_8701:
    byte: 0xf0, 0xf8, 0xf0, 0x0, 0xf8, 0xf0, 0xf8, 0xf8, 0xf8, 0x0, 0x0, 0xf8, 0x0, 0x0, 0x0, 0x8
//              +--8--+   +--9--+   +--A--+   +--B--+   +--C--+   +--D--+   +--E--+
    byte: 0x8, 0xf8, 0x8, 0x0, 0x8, 0x8, 0xf8, 0xf4, 0xf8, 0xf6, 0xec, 0xf4, 0xee, 0xf4

//Samus summersault and roll frames.
//          +--------+--------+
//          |        |        |
//          |        |        |
//          |        |        |
//          |       0|       1|
//          +--------+--------+
//          |        |        |
//          +--------+--------+
//          |        *        |
//          |       2|       3|
//          +--------+--------+
//          |       4|       5|
//          +--------+--------+
//              +--0--+   +--1--+   +--2--+   +--3--+   +--4--+   +--5--+
    byte: 0xf3, 0xf8, 0xf3, 0x0, 0xfb, 0xf8, 0xfb, 0x0, 0x3, 0xf8, 0x3, 0x0

//Samus summersault frame.
//          +--------+--------+--------+
//          |        |        |        |
//          |        |        |        |
//          |        |        |        |
//          |       0|       1|       2|
//          +--------+-*------+--------+
//          |        |        |        |
//          |        |        |        |
//          |        |        |        |
//          |       3|       4|       5|
//          +--------+--------+--------+
//              +--0--+   +--1--+   +--2--+   +--3--+   +--4--+   +--5--+
    byte: 0xf8, 0xf6, 0xf8, 0xfe, 0xf8, 0x6, 0x0, 0xf6, 0x0, 0xfe, 0x0, 0x6

//Elevator frame.
//          +--------+--------+--------+--------+--------+--------+--------+--------+
//          |        |        |        |        |        |        |        |        |
//          |        |        |        |        |        |        |        |        |
//          |        |        *        |        |        |        |        |        |
//          |       0|       1|       2|       3|       4|       5|       6|       7|
//          +--------+--------+--------+--------+--------+--------+--------+--------+
//              +--0--+   +--1--+   +--2--+   +--3--+   +--4--+   +--5--+   +--6--+   +--7--+
    byte: 0xfc, 0xf0, 0xfc, 0xf8, 0xfc, 0x0, 0xfc, 0x8, 0xfc, 0x10, 0xfc, 0x18, 0xfc, 0x20, 0xfc, 0x28

//Several projectile frames.
//          +--------+
//          |        |
//          |        |
//          |    *   |
//          |       0|
//          +--------+
//              +--0--+
    byte: 0xfc, 0xfc

//Power-up items and bomb explode frames.
//          +--------+--------+
//          |        |        |
//          |        |        |
//          |        |        |
//          |       0|       1|
//          +--------*--------+
//          |        |        |
//          |        |        |
//          |        |        |
//          |       2|       3|
//          +--------+--------+
//              +--0--+   +--1--+   +--2--+   +--3--+
    byte: 0xf8, 0xf8, 0xf8, 0x0, 0x0, 0xf8, 0x0, 0x0

//Door frames.
//          +--------+
//          |        |
//          |        |
//          |        |
//          |       0|
//          +--------+
//          |        |
//          |        |
//          |        |
//          |       1|
//          +--------+
//          |        |
//          |        |
//          |        |
//          |       2|
//          *--------+
//          |        |
//          |        |
//          |        |
//          |       3|
//          +--------+
//          |        |
//          |        |
//          |        |
//          |       4|
//          +--------+
//          |        |
//          |        |
//          |        |
//          |       5|
//          +--------+
//              +--0--+   +--1--+   +--2--+   +--3--+   +--4--+   +--5--+
    byte: 0xe8, 0x0, 0xf0, 0x0, 0xf8, 0x0, 0x0, 0x0, 0x8, 0x0, 0x10, 0x0

//Samus explode. Special case. The bytes that are #$8X indicate displacement data will be loaded
//from a table for the y direction and from a counter for the x direction.  The initial displacement
//bytes start at $8769.  If the LSB is clear in the bytes where the upper nibble is #$8, those
//data bytes will be used to decrease the x position of the sprite each frame. If the LSB is set,
//the data bytes will increase the x position of the sprite each frame.
//          +--------+--------+
//          |        |        |
//          |        |        |
//          |        |        |
//          |       0|       1|
//          +--------+--------+
//          |        |        |
//          |        |        |
//          |        *        |
//          |       2|       3|
//          +--------+--------+
//          |        |        |
//          |        |        |
//          |        |        |
//          |       4|       5|
//          +--------+--------+
//                                                                          +--0--+   +--1--+
    byte: 0x80, 0x80, 0x81, 0x81, 0x82, 0x82, 0x83, 0x83, 0x84, 0x84, 0x85, 0x85, 0xf4, 0xf8, 0xf4, 0x0
//              +--2--+   +--3--+   +--4--+   +--5--+
    byte: 0xfc, 0xf8, 0xfc, 0x0, 0x4, 0xf8, 0x4, 0x0

//Bomb explode frame.
//          +--------+--------+--------+--------+
//          |        |        |        |        |
//          |        |        |        |        |
//          |        |        |        |        |
//          |       3|       4|       0|       1|
//          +--------+--------+--------+--------+
//          |        |                 |        |
//          |        |                 |        |
//          |        |                 |        |
//          |       5|                 |       2|
//          +--------+        *        +--------+
//          |        |                 |        |
//          |        |                 |        |
//          |        |                 |        |
//          |       6|                 |       9|
//          +--------+--------+--------+--------+
//          |        |        |        |        |
//          |        |        |        |        |
//          |        |        |        |        |
//          |       7|       8|       A|       B|
//          +--------+--------+--------+--------+
//              +--0--+   +--1--+   +--2--+   +--3--+   +--4--+   +--5--+   +--6--+   +--7--+
def ridley_page_8775:
    byte: 0xf0, 0x0, 0xf0, 0x8, 0xf8, 0x8, 0xf0, 0xf0, 0xf0, 0xf8, 0xf8, 0xf0, 0x0, 0xf0, 0x8, 0xf0
//              +--8--+   +--9--+   +--A--+   +--B--+
    byte: 0x8, 0xf8, 0x0, 0x8, 0x8, 0x0, 0x8, 0x8

//Missile up frame.
//          +--------+
//          |        |
//          |        |
//          |        |
//          |       0|
//          +----*---+
//          |        |
//          |        |
//          |        |
//          |       1|
//          +--------+
//              +--0--+   +--1--+
    byte: 0xf8, 0xfc, 0x0, 0xfc

//Missile left/right and missile explode frames.
//          +--------+--------+        +--------+--------+
//          |        |        |        |        |        |
//          |        |        |        |        |        |
//          |        *        |        |        |        |
//          |       0|       1|        |       2|       3|
//          +--------+--------+        +--------+--------+
//              +--0--+   +--1--+   +--2--+   +--3--+
    byte: 0xfc, 0xf8, 0xfc, 0x0, 0xfc, 0x10, 0xfc, 0x18

//Missile explode frame.
//                   +--------+--------+
//                   |        |        |
//                   |        |        |
//                   |        |        |
//                   |       1|       2|
//          +--------+--------+--------+--------+
//          |        |                 |        |
//          |        |                 |        |
//          |        |        *        |        |
//          |       0|                 |       3|
//          +--------+--------+--------+--------+
//                   |        |        |
//                   |        |        |
//                   |        |        |
//                   |       4|       5|
//                   +--------+--------+
//              +--0--+   +--1--+   +--2--+   +--3--+   +--4--+   +--5--+
    byte: 0xfc, 0xf0, 0xf4, 0xf8, 0xf4, 0x0, 0xfc, 0x8, 0x4, 0xf8, 0x4, 0x0

//Missile explode frame.
//                    +--------+                 +--------+
//                    |        |                 |        |
//                    |        |                 |        |
//                    |        |                 |        |
//                    |       1|                 |       2|
//                    +--------+                 +--------+
//
//
//
//
//          +--------+                                     +--------+
//          |        |                                     |        |
//          |        |                                     |        |
//          |        |                  *                  |        |
//          |       0|                                     |       3|
//          +--------+                                     +--------+
//
//
//
//
//                    +--------+                 +--------+
//                    |        |                 |        |
//                    |        |                 |        |
//                    |        |                 |        |
//                    |       4|                 |       5|
//                    +--------+                 +--------+
//              +--0--+   +--1--+   +--2--+   +--3--+   +--4--+   +--5--+
    byte: 0xfc, 0xe8, 0xec, 0xf0, 0xec, 0x8, 0xfc, 0x10, 0xc, 0xf0, 0xc, 0x8

//Statue frames.
//          +--------+--------+--------+
//          |        |        |        |
//          |        |        |        |
//          |        |        |        |
//          |       4|       5|       6|
//          +--------+--------+--------+
//          |        |        |        |
//          |        |        |        |
//          |        |        |        |
//          |       7|       8|       9|
//          +--------+--------+--------+
//          |        |        |        |
//          |        |        |        |
//          |        |        |        |
//          |       A|       B|       C|
//          +--------+--------*--------+
//                   |        |        |
//                   |        |        |
//                   |        |        |
//                   |       0|       1|
//                   +--------+--------+
//                   |        |        |
//                   |        |        |
//                   |        |        |
//                   |       2|       3|
//                   +--------+--------+
//              +--0--+   +--1--+   +--2--+   +--3--+   +--4--+   +--5--+   +--6--+   +--7--+
    byte: 0x0, 0xf8, 0x0, 0x0, 0x8, 0xf8, 0x8, 0x0, 0xe8, 0xf0, 0xe8, 0xf8, 0xe8, 0x0, 0xf0, 0xf0
//              +--8--+   +--9--+   +--A--+   +--B--+   +--C--+
    byte: 0xf0, 0xf8, 0xf0, 0x0, 0xf8, 0xf0, 0xf8, 0xf8, 0xf8, 0x0

//-------------------------------[ Sprite frame data tables ]---------------------------------------

//Frame drawing data. The format for the frame drawing data is as follows:
//There are 4 control bytes associated with the frame data and they are #$FC, #$FD, #$FE and #$FF.
//
//#$FC displaces the location of the object in the x and y direction.  The first byte following #$FC
//is the y displacement of the object and the second byte is the x displacement. any further bytes
//are pattern table index bytes until the next control byte is reached.
//
//#$FD tells the program to change the sprite control byte.  The next byte after #$FD is the new
//control byte.  Only the 4 upper bits are used. Any further bytes are pattern table index bytes
//until the next control byte is reached.
//
//#$FE causes the next placement position to be skipped.  Any further bytes are pattern table index
//bytes until the next control byte is reached.
//
//#$FF ends the frame drawing data segment. 
//
//The first 3 bytes are unique.  The first byte contains two parts: AAAABBBB. The upper 4 bits
//are sprite control data which control mirroring and color bits.  The lower 4 bits are multiplied
//by 2 and used as an index into the PlacePtrTable to find the proper placement data for the
//current frame.  The second byte is saved as the object's y radius and the third byte is saved
//as the object's x radius.

//Samus run.
def ridley_page_87CB:
    byte: 0x40, 0xf, 0x4, 0x0, 0x1, 0xfd, 0x20, 0xfe, 0x41, 0x40, 0xfd, 0x60, 0x20, 0x21, 0xfe, 0xfe
    byte: 0x31, 0xff

//Samus run.
    byte: 0x40, 0xf, 0x4, 0x2, 0x3, 0xfd, 0x20, 0xfe, 0x43, 0x42, 0xfd, 0x60, 0x22, 0x23, 0xfe, 0x32
    byte: 0x33, 0x34, 0xff

//Samus run.
    byte: 0x40, 0xf, 0x4, 0x5, 0x6, 0xfd, 0x20, 0xfe, 0x45, 0x44, 0xfd, 0x60, 0x25, 0x26, 0x27, 0x35
    byte: 0x36, 0xff

//Samus facing forward.
    byte: 0x0, 0xf, 0x4, 0x9, 0xfd, 0x60, 0x9, 0xfd, 0x20, 0xfe, 0x19, 0x1a, 0xfd, 0x20, 0x29, 0x2a
    byte: 0xfe, 0x39, 0xfd, 0x60, 0x39, 0xff

//Samus stand.
def ridley_page_8818:
    byte: 0x40, 0xf, 0x4, 0xfd, 0x20, 0xe, 0xd, 0xfe, 0x1e, 0x1d, 0x2e, 0x2d, 0xfe, 0xfd, 0x60, 0x3b
    byte: 0x3c, 0xfe, 0x17, 0xff

//Samus run and fire.
    byte: 0x40, 0xf, 0x4, 0x0, 0x1, 0xfd, 0x20, 0x4b, 0x4a, 0x49, 0xfd, 0x60, 0x20, 0x21, 0xfe, 0xfe
    byte: 0x31, 0xff

//Samus run and fire.
    byte: 0x40, 0xf, 0x4, 0x0, 0x1, 0xfd, 0x20, 0x4b, 0x4a, 0x49, 0xfd, 0x60, 0x22, 0x23, 0xfe, 0x32
    byte: 0x33, 0x34, 0xff

//Samus run and fire.
    byte: 0x40, 0xf, 0x4, 0x0, 0x1, 0xfd, 0x20, 0x4b, 0x4a, 0x49, 0xfd, 0x60, 0x25, 0x26, 0x27, 0x35
    byte: 0x36, 0xff

//Samus stand and jump.
def ridley_page_8863:
    byte: 0x40, 0xf, 0x4, 0x0, 0x1, 0xfd, 0x20, 0xfe, 0x41, 0x40, 0xfd, 0x60, 0x22, 0x7, 0x8, 0x32
    byte: 0xff

//Samus jump and fire.
    byte: 0x40, 0xf, 0x4, 0x0, 0x1, 0xfd, 0x20, 0x4b, 0x4a, 0x49, 0xfd, 0x60, 0x22, 0x7, 0x8, 0x32
    byte: 0xff

//Samus summersault.
    byte: 0x41, 0xf, 0x4, 0x52, 0x53, 0x62, 0x63, 0x72, 0x73, 0xff

//Samus summersault.
def ridley_page_888F:
    byte: 0x42, 0xf, 0x4, 0x54, 0x55, 0x56, 0x64, 0x65, 0x66, 0xff

//Samus summersault.
    byte: 0x81, 0xf, 0x4, 0x52, 0x53, 0x62, 0x63, 0x72, 0x73, 0xff

//Samus summersault.
    byte: 0x82, 0xf, 0x4, 0x54, 0x55, 0x56, 0x64, 0x65, 0x66, 0xff

//Samus roll.
    byte: 0x1, 0x8, 0x4, 0xfc, 0x3, 0x0, 0x50, 0x51, 0x60, 0x61, 0xff

//Samus roll.
    byte: 0x81, 0x8, 0x4, 0xfc, 0xfd, 0x0, 0x50, 0x51, 0x60, 0x61, 0xff

//Samus roll.
    byte: 0xc1, 0x8, 0x4, 0xfc, 0xfd, 0x0, 0x50, 0x51, 0x60, 0x61, 0xff

//Samus roll.
    byte: 0x41, 0x8, 0x4, 0xfc, 0x3, 0x0, 0x50, 0x51, 0x60, 0x61, 0xff

//Samus stand and fire.
def ridley_page_88D9:
    byte: 0x40, 0xf, 0x4, 0xfd, 0x20, 0xe, 0xd, 0xfe, 0x1e, 0x1d, 0x2e, 0x2d, 0xfe, 0xfd, 0x60, 0x3b
    byte: 0x3c, 0xfe, 0xfe, 0x17, 0xff

//Elevator.
    byte: 0x3, 0x4, 0x10, 0x28, 0x38, 0x38, 0xfd, 0x60, 0x28, 0xff

//Missile right.
    byte: 0x4a, 0x4, 0x8, 0x5e, 0x5f, 0xff

//Missile left.
    byte: 0xa, 0x4, 0x8, 0x5e, 0x5f, 0xff

//Missile up.
    byte: 0x9, 0x8, 0x4, 0x14, 0x24, 0xff

//Bullet fire.
def ridley_page_890A:
    byte: 0x4, 0x2, 0x2, 0x30, 0xff

//Bullet hit.
    byte: 0x4, 0x0, 0x0, 0x4, 0xff

//Samus stand and point up.
    byte: 0x46, 0xf, 0x4, 0x69, 0xfe, 0xfd, 0x20, 0x7a, 0x79, 0xfe, 0x78, 0x77, 0x2e, 0x2d, 0xfe, 0xfd
    byte: 0x60, 0x3b, 0x3c, 0xff

//Samus from ball to pointing up.
def ridley_page_8928:
    byte: 0x46, 0xf, 0x4, 0xfe, 0x69, 0xfd, 0x20, 0x7a, 0x79, 0xfe, 0x78, 0x77, 0x2e, 0x2d, 0xfe, 0xfd
    byte: 0x60, 0x3b, 0x3c, 0xff

//Door closed.
    byte: 0x35, 0x18, 0x8, 0xf, 0x1f, 0x2f, 0xfd, 0xa3, 0x2f, 0x1f, 0xf, 0xff

//Door open/close.
    byte: 0x35, 0x18, 0x4, 0x6a, 0x6b, 0x6c, 0xfd, 0xa3, 0x6c, 0x6b, 0x6a, 0xff

//Samus explode.
    byte: 0x7, 0x0, 0x0, 0xfc, 0xfc, 0x0, 0xb, 0xc, 0x1b, 0x1c, 0x2b, 0x2c, 0xff

//Samus jump and point up.
def ridley_page_8961:
    byte: 0x46, 0xf, 0x4, 0x69, 0xfd, 0x20, 0xfe, 0x7a, 0x79, 0xfe, 0x78, 0x77, 0xfd, 0x60, 0x22, 0x7
    byte: 0x8, 0x32, 0xff

//Samus jump and point up.
    byte: 0x46, 0xf, 0x4, 0xfe, 0x69, 0xfd, 0x20, 0x7a, 0x79, 0xfe, 0x78, 0x77, 0xfd, 0x60, 0x22, 0x7
    byte: 0x8, 0x32, 0xff

//Bomb explode.
    byte: 0xd, 0xc, 0xc, 0x74, 0xfd, 0x60, 0x74, 0xfd, 0xa0, 0x74, 0xfd, 0xe0, 0x74, 0xff

//Samus run and point up.
def ridley_page_8995:
    byte: 0x46, 0xf, 0x4, 0x69, 0xfe, 0xfd, 0x20, 0x7a, 0x79, 0xfe, 0x78, 0x77, 0xfd, 0x60, 0x20, 0x21
    byte: 0xfe, 0xfe, 0x31, 0xff

//Samus run and point up.
    byte: 0x46, 0xf, 0x4, 0x69, 0xfe, 0xfd, 0x20, 0x7a, 0x79, 0xfe, 0x78, 0x77, 0xfd, 0x60, 0x22, 0x23
    byte: 0xfe, 0x32, 0x33, 0x34, 0xff

//Samus run and point up.
    byte: 0x46, 0xf, 0x4, 0x69, 0xfe, 0xfd, 0x20, 0x7a, 0x79, 0xfe, 0x78, 0x77, 0xfd, 0x60, 0x25, 0x26
    byte: 0x27, 0x35, 0x36, 0xff

//Samus run and point up.
    byte: 0x46, 0xf, 0x4, 0xfe, 0x69, 0xfd, 0x20, 0x7a, 0x79, 0xfe, 0x78, 0x77, 0xfd, 0x60, 0x20, 0x21
    byte: 0xfe, 0xfe, 0x31, 0xff

//Samus point up, run and fire.
    byte: 0x46, 0xf, 0x4, 0xfe, 0x69, 0xfd, 0x20, 0x7a, 0x79, 0xfe, 0x78, 0x77, 0xfd, 0x60, 0x22, 0x23
    byte: 0xfe, 0x32, 0x33, 0x34, 0xff

//Samus point up, run and fire.
def ridley_page_89FB:
    byte: 0x46, 0xf, 0x4, 0xfe, 0x69, 0xfd, 0x20, 0x7a, 0x79, 0xfe, 0x78, 0x77, 0xfd, 0x60, 0x25, 0x26
    byte: 0x27, 0x35, 0x36, 0xff

//Bomb explode.
    byte: 0xd, 0xc, 0xc, 0x75, 0xfd, 0x60, 0x75, 0xfd, 0xa0, 0x75, 0xfd, 0xe0, 0x75, 0xff

//Bomb explode.
    byte: 0x0, 0x0, 0x0, 0xff

//Wave beam.
    byte: 0x4, 0x4, 0x4, 0x4c, 0xff

//Bomb explode.
    byte: 0x8, 0x10, 0x10, 0x3d, 0x3e, 0x4e, 0xfd, 0x60, 0x3e, 0x3d, 0x4e, 0xfd, 0xe0, 0x4e, 0x3e, 0x3d
    byte: 0xfd, 0xa0, 0x4e, 0x3d, 0x3e, 0xff

//Bomb tick.
    byte: 0x4, 0x4, 0x4, 0x70, 0xff

//Bomb tick.
    byte: 0x4, 0x4, 0x4, 0x71, 0xff

//Bomb item.
def ridley_page_8A46:
    byte: 0xd, 0x3, 0x3, 0x86, 0x87, 0x96, 0x97, 0xff

//High jump item.
    byte: 0xd, 0x3, 0x3, 0x7b, 0x7c, 0x8b, 0x8c, 0xff

//Long beam item.
    byte: 0xd, 0x3, 0x3, 0x88, 0x67, 0x98, 0x99, 0xff

//Screw attack item.
    byte: 0xd, 0x3, 0x3, 0x80, 0x81, 0x90, 0x91, 0xff

//Maru Mari item.
    byte: 0xd, 0x3, 0x3, 0x7d, 0x7e, 0x8d, 0x8e, 0xff

//Varia item.
    byte: 0xd, 0x3, 0x3, 0x82, 0x83, 0x92, 0x93, 0xff

//Wave beam item.
    byte: 0xd, 0x3, 0x3, 0x88, 0x89, 0x98, 0x99, 0xff

//Ice beam item.
    byte: 0xd, 0x3, 0x3, 0x88, 0x68, 0x98, 0x99, 0xff

//Energy tank item.
def ridley_page_8A86:
    byte: 0xd, 0x3, 0x3, 0x84, 0x85, 0x94, 0x95, 0xff

//Missile item.
    byte: 0xd, 0x3, 0x3, 0x3f, 0xfd, 0x40, 0x3f, 0xfd, 0x0, 0x4f, 0xfd, 0x40, 0x4f, 0xff

//Skree burrow.
    byte: 0x34, 0x4, 0x4, 0xf2, 0xff

//Not used.
    byte: 0x4, 0x0, 0x0, 0x5a, 0xff, 0x13, 0x0, 0x0, 0xb0, 0xb1, 0xb2, 0xb3, 0xff, 0x13, 0x0, 0x0
    byte: 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb6, 0xb9, 0xb3, 0xff, 0x13, 0x0, 0x0, 0xb3, 0xba, 0xba, 0xfe
    byte: 0x80, 0x80, 0xff

//Kraid statue.
def ridley_page_8AC4:
    byte: 0x1e, 0x0, 0x8, 0xfa, 0xfb, 0xfa, 0xfb, 0xfc, 0x0, 0x4, 0xc5, 0xc6, 0xc7, 0xd5, 0xd6, 0xd7
    byte: 0xe5, 0xe6, 0xe7, 0xff

//Ridley statue.
    byte: 0x1e, 0x0, 0x8, 0xfa, 0xfb, 0xfa, 0xfb, 0xfe, 0xc8, 0xc9, 0xeb, 0xd8, 0xd9, 0xea, 0xe8, 0xe9
    byte: 0xff

//Missile explode.
    byte: 0xa, 0x4, 0x8, 0xfd, 0x0, 0x57, 0xfd, 0x40, 0x57, 0xff

//Missile explode.
def ridley_page_8AF3:
    byte: 0xb, 0x4, 0xc, 0xfd, 0x0, 0x57, 0x18, 0xfd, 0x40, 0x18, 0x57, 0xfd, 0xc0, 0x18, 0x18, 0xff

//Missile explode.
    byte: 0xc, 0x4, 0x10, 0xfd, 0x0, 0x57, 0x18, 0xfd, 0x40, 0x18, 0x57, 0xfd, 0xc0, 0x18, 0x18, 0xff

//------------------------------------[ Samus enter door routines ]-----------------------------------

//This function is called once when Samus first enters a door.

def samusenterdoor:

    //The code determines if Samus has entered a door if the-->
    a = [doorstatus]
    //door status is 0, but door data information has been-->
    goto _000B when ~zero
    //written. If both conditions are met, Samus has just-->
    y = [samusdoordata]
    //entered a door.
    goto _000B when zero
    [currentmissilepickups] = a
    //Reset current missile and energy power-up counters.
    [currentenergypickups] = a
    a = [randomnumber1]
    //Randomly recalculate max missile pickups(16 max, 0 min).
    a = a & 0xf
    [maxmissilepickup] = a
    a = a << 1
    //*2 for energy pickups and set bit 6(128 max, 64 min).
    a = a | 0x40
    [maxenergypickup] = a
    a = [ppucnt0zp]
    a = a ^ 0x1
    //Erase name table door data for new room.
    a = a & 0x1
    y = a
    a = a >> 1
    [0x6c:y] = a
    a = [scrolldir]
    //Is Samus scrolling horizontally?-->
    a = a & 0x2
    //If so, branch.
    goto _0008 when ~zero
    //Samus currently scrolling vertically.
    x = 0x4
    //Is room centered on screen?-->
    a = [scrolly]
    //If so, branch.
    goto _000C when zero
    a = [0xff]
    //Get inverse of Samus' current nametable.
    a = a ^ [objecthi]
    a = a >> 1
    //If Samus is on nametable 3, branch.
    goto _000A when ~carry
    //If Samus is on nametable 0, branch to decrement x.
    goto _0009 when carry

def _0008:
    //Samus is currently scrolling horizontally.
    x = 0x2
    //Is Samus entering a left hand door?-->
    a = [objectx]
    //If so, branch.
    goto _000A when ~negative
def _0009:
    x--

def setdoorentryinfo:

def _000A:
    //X contains door scroll status and is transferred to A.
    a = x
    //Save door scroll status.
    [doorscrollstatus] = a
    //($8B74)Indicate Samus just entered a door.
    call samusindoor
    a = 0x12
    //Set DoorDelay to 18 frames(going into door).
    [doordelay] = a
    a = [samusdoordata]
    //($C2C5)*16. Move scroll toggle data to upper 4 bits.
    call amul16
    //Keep Samus action so she will appear the same comming-->
    a = a | [objaction]
    //out of the door as she did going in.
    [samusdoordata] = a
    a = 0x5
    //Indicate Samus is in a door.
    [objaction] = a
def _000B:
    return

def _000C:
    //($8B53)Save Samus action and set door entry timer.
    call setdoorentryinfo
    //($E21B)Room is centered. Toggle scroll.
    call verticalroomcentered

    //X=#$01 or #$02(depending on which door Samus is in).
    a = x

def samusindoor:

    //Set MSB of DoorStatus to indicate Samus has just-->
    a = a | 0x80
    //entered a door.
    [doorstatus] = a
    return

//----------------------------------------------------------------------------------------------------

    x = 0xb0
def _000D:
    call 0x8b87
    a = [pageindex]
    carry = 1
    a = a -# 0x10
    x = a
    goto _000D when negative
    return

    [pageindex] = x
    a = [objaction:x]
    //($C27C)
    call chooseroutine

    word: game_engine_page_C45C
    word: ridley_page_8B9D
    word: ridley_page_8BD5
    word: ridley_page_8C01
    word: ridley_page_8C84
    word: ridley_page_8CC6
    word: ridley_page_8CF0

def ridley_page_8B9D:
    [0x300:x]++
    a = 0x30
    //($D2FA)
    call setprojectileanim
    call ridley_page_8CFB
    y = [0x307:x]
    a = [ridley_page_8BD1:y]
    [0x30f:x] = a
def ridley_page_8BB1:
    a = [0x307:x]
    compare a to 0x3
    goto ridley_page_8BBA when ~zero
    a = 0x1
def ridley_page_8BBA:
    a = a | 0xa0
    [0x6b] = a
    a = 0x0
    [0x30a:x] = a
    a = x
    a = a & 0x10
    a = a ^ 0x10
    a = a | [0x6b]
    [0x6b] = a
    a = 0x6
    goto game_engine_page_DE47

def ridley_page_8BD1:
    byte: 0x5, 0x1, 0xa, 0x1

def ridley_page_8BD5:
    a = [0x30a:x]
    a = a & 0x4
    goto ridley_page_8BB1 when zero
    [0x30f:x]--
    goto ridley_page_8BB1 when ~zero
    a = 0x3
    compare a to [0x307:x]
    goto ridley_page_8BEE when ~zero
    y = [0x10b]
    y++
    goto ridley_page_8BB1 when ~zero
def ridley_page_8BEE:
    [0x300:x] = a
    a = 0x50
    [0x30f:x] = a
    a = 0x2c
    [0x305:x] = a
    carry = 1
    a = a -# 0x3
    goto ridley_page_8C7E
def ridley_page_8C01:
    a = [doorstatus]
    goto ridley_page_8C1D when zero
    a = [0x30c]
    a = a ^ [0x30c:x]
    a = a >> 1
    goto ridley_page_8C1D when carry
    a = [0x30e]
    a = a ^ [0x30e:x]
    goto ridley_page_8C1D when negative
    a = 0x4
    [0x300:x] = a
    goto ridley_page_8C73 when ~zero
def ridley_page_8C1D:
    a = [0x306:x]
    compare a to [0x305:x]
    goto ridley_page_8C73 when ~carry
    a = [0x30f:x]
    compare a to 0x50
    goto ridley_page_8C57 when ~zero
    call ridley_page_8CF7
    a = [0x307:x]
    compare a to 0x1
    goto ridley_page_8C57 when zero
    compare a to 0x3
    goto ridley_page_8C57 when zero
    a = 0xa
    [0x9] = a
    a = [0x30c:x]
    [0x8] = a
    y = [0x50]
    a = x
    call game_engine_page_C2C5
    goto ridley_page_8C4C when ~carry
    y--
def ridley_page_8C4C:
    a = y
    call 0xdc1e
    a = 0x0
    [0x300:x] = a
    goto ridley_page_8C73 when zero
def ridley_page_8C57:
    a = [0x2d]
    a = a >> 1
    goto ridley_page_8C73 when carry
    [0x30f:x]--
    goto ridley_page_8C73 when ~zero
def ridley_page_8C61:
    a = 0x1
    [0x30f:x] = a
    call ridley_page_8CFB
    a = 0x2
    [0x300:x] = a
    call ridley_page_8C76
def ridley_page_8C71:
    x = [pageindex]
def ridley_page_8C73:
    goto ridley_page_8BB1
def ridley_page_8C76:
    a = 0x30
    [0x305:x] = a
    carry = 1
    a = a -# 0x2
def ridley_page_8C7E:
    call 0xd2fd
    goto game_engine_page_CBDA
def ridley_page_8C84:
    a = [doorstatus]
    compare a to 0x5
    goto ridley_page_8CC3 when carry
    call ridley_page_8CFB
    call ridley_page_8C76
    x = [pageindex]
    a = [0x91]
    goto ridley_page_8CA7 when zero
    a = x
    call game_engine_page_C2BF
    a = a ^ [0x91]
    a = a >> 1
    goto ridley_page_8CA7 when ~carry
    a = [0x76]
    a = a ^ 0x7
    [0x76] = a
    [0x1c] = a
def ridley_page_8CA7:
    [0x300:x]++
    a = 0x0
    [0x91] = a
    a = [0x307:x]
    compare a to 0x3
    goto ridley_page_8CC3 when ~zero
    a = x
    call game_engine_page_C2C5
    goto ridley_page_8CC0 when carry
    call game_engine_page_CC07
    goto ridley_page_8CC3 when ~zero
def ridley_page_8CC0:
    call game_engine_page_CC03
def ridley_page_8CC3:
    goto ridley_page_8C71
def ridley_page_8CC6:
    a = [doorstatus]
    compare a to 0x5
    goto ridley_page_8CED when ~zero
    a = x
    a = a ^ 0x10
    x = a
    a = 0x6
    [0x300:x] = a
    a = 0x2c
    [0x305:x] = a
    carry = 1
    a = a -# 0x3
    call 0xd2fd
    call game_engine_page_CBDA
    call 0xcb73
    x = [pageindex]
    a = 0x2
    [0x300:x] = a
def ridley_page_8CED:
    goto ridley_page_8BB1
def ridley_page_8CF0:
    a = [doorstatus]
    goto ridley_page_8CED when ~zero
    goto ridley_page_8C61
def ridley_page_8CF7:
    a = 0xff
    goto ridley_page_8CFD when ~zero
def ridley_page_8CFB:
    a = 0x4e
def ridley_page_8CFD:
    push a
    a = 0x50
    [0x2] = a
    a = x
    call game_engine_page_C2BF
    a = a & 0x1
    y = a
    a = [ridley_page_8D3A:y]
    [0x3] = a
    a = [0x30c:x]
    [0xb] = a
    call 0xe96a
    y = 0x0
    a = pop
def ridley_page_8D19:
    [[0x4]:y] = a
    x = a
    a = y
    carry = 0
    a = a +# 0x20
    y = a
    a = x
    compare y to 0xc0
    goto ridley_page_8D19 when ~zero
    x = [pageindex]
    a = x
    call game_engine_page_C2C0
    a = a & 0x6
    y = a
    a = [0x4]
    [0x5c:y] = a
    a = [0x5]
    [0x5d:y] = a
    return

def ridley_page_8D3A:
    byte: 0xe8, 0x10, 0x60, 0xad, 0x91, 0x69, 0x8d, 0x78, 0x68, 0xad, 0x92, 0x69, 0x8d, 0x79, 0x68, 0xa9
    byte: 0x0, 0x85, 0x0, 0x85, 0x2, 0xad, 0x97, 0x69, 0x29, 0x80, 0xf0, 0x6, 0xa5, 0x0, 0x9, 0x80
    byte: 0x85, 0x0, 0xad, 0x97, 0x69, 0x29

//------------------------------------------[ Graphics data ]-----------------------------------------

//Misc. tile patterns.
    byte: 0x73, 0xfd, 0x3b, 0xa0, 0xc0, 0xe0, 0x60, 0x80, 0x0, 0x0, 0x0, 0x1f, 0x10, 0x17, 0x14, 0x14
    byte: 0xe8, 0x9c, 0x7c, 0x1c, 0x44, 0x58, 0x5c, 0x5c, 0x0, 0x4, 0xc, 0xfc, 0x24, 0xb8, 0xbc, 0xbc
    byte: 0xe0, 0xe7, 0xa0, 0x2f, 0x73, 0x7c, 0x0, 0x0, 0x17, 0x10, 0x1f, 0xf, 0x33, 0x7c, 0x0, 0x0
    byte: 0x58, 0xd4, 0x14, 0xdc, 0xec, 0xd8, 0x0, 0x0, 0xb8, 0x34, 0xf4, 0xdc, 0xec, 0xd8, 0x0, 0x0
    byte: 0x41, 0x41, 0x77, 0x14, 0x14, 0x14, 0x14, 0x14, 0x1d, 0x1, 0x7f, 0xc, 0xc, 0xc, 0xc, 0xc
    byte: 0x14, 0x14, 0x14, 0x14, 0x14, 0x7f, 0x41, 0x41, 0xc, 0xc, 0xc, 0xc, 0xc, 0x1, 0x1, 0x1d
    byte: 0x7f, 0x7f, 0x7f, 0x3e, 0x3e, 0x3e, 0x3c, 0x1c, 0x3, 0x3, 0x7, 0x6, 0x6, 0x6, 0x4, 0x4
    byte: 0x7e, 0x7e, 0x7e, 0x7c, 0x7c, 0x3c, 0x38, 0x38, 0x6, 0x6, 0xe, 0xc, 0xc, 0xc, 0x8, 0x8
    byte: 0x1c, 0x1c, 0x1c, 0x8, 0x8, 0x8, 0x8, 0x8, 0x4, 0x4, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0x38, 0x10, 0x10, 0x10, 0x0, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0x7e, 0x7e, 0x7e, 0x3e, 0x3e, 0x3c, 0x1c, 0x1c, 0x60, 0x60, 0x70, 0x30, 0x30, 0x30, 0x10, 0x10
    byte: 0xfe, 0xfe, 0xfe, 0x7c, 0x7c, 0x7c, 0x3c, 0x38, 0xc0, 0xc0, 0xe0, 0x60, 0x60, 0x60, 0x20, 0x20
    byte: 0x1c, 0x8, 0x8, 0x8, 0x0, 0x0, 0x0, 0x0, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0x38, 0x38, 0x38, 0x10, 0x10, 0x10, 0x10, 0x10, 0x20, 0x20, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0x0, 0x1, 0x3, 0x0, 0xf, 0x3, 0x1f, 0x21, 0x0, 0x1, 0x1, 0x0, 0x1, 0x3, 0x7, 0x1
    byte: 0x7f, 0xff, 0xf0, 0xd7, 0x8f, 0xdc, 0x98, 0xf8, 0x7f, 0x9f, 0x70, 0xd0, 0x83, 0xc4, 0x88, 0xe8
    byte: 0x80, 0xf0, 0x78, 0xbc, 0xfc, 0x7e, 0x6e, 0x4c, 0x80, 0xf0, 0x78, 0x3c, 0xbc, 0x7e, 0x6e, 0x4c
    byte: 0x3c, 0x3c, 0x3a, 0x7b, 0x77, 0x6f, 0x69, 0x3c, 0x3c, 0x2c, 0x2a, 0x5b, 0x51, 0x47, 0x61, 0x1c
    byte: 0xd1, 0x89, 0x7, 0xc6, 0x20, 0x1c, 0x87, 0x0, 0xc1, 0x81, 0x7, 0xc6, 0x0, 0x0, 0x80, 0x0
    byte: 0xf6, 0x2, 0x8, 0x1c, 0x1e, 0x1e, 0x7, 0x7, 0xf6, 0x22, 0x60, 0xc0, 0x98, 0x9c, 0x44, 0x26
    byte: 0x70, 0x70, 0xc, 0x32, 0x20, 0x1c, 0x10, 0x6, 0x30, 0x30, 0xc, 0x12, 0x20, 0xc, 0x10, 0x2
    byte: 0x1c, 0x7e, 0x78, 0xf3, 0xf1, 0xe1, 0xc2, 0x73, 0x1c, 0x66, 0x58, 0xb3, 0xb1, 0xa1, 0xc2, 0x73
    byte: 0x3, 0x3, 0x3, 0x1, 0xb1, 0x18, 0xc, 0xcc, 0x12, 0x12, 0x22, 0x0, 0x90, 0x8, 0x4, 0x44
    byte: 0x0, 0x7, 0x0, 0x3, 0x0, 0x1, 0x3, 0xf, 0x0, 0x3, 0x0, 0x1, 0x0, 0x0, 0x1, 0x3
    byte: 0x1, 0x48, 0x46, 0x30, 0x1e, 0xc0, 0x81, 0x67, 0x1, 0x48, 0x46, 0x30, 0x1e, 0xc0, 0x80, 0x61
    byte: 0xe6, 0xf0, 0x31, 0xb, 0x83, 0x0, 0xef, 0xc9, 0xa2, 0xc0, 0x30, 0x8, 0x81, 0x0, 0x20, 0xc1
    byte: 0x2, 0x3, 0x77, 0x89, 0xbe, 0x2c, 0x0, 0x80, 0x0, 0x1, 0x77, 0x81, 0x8e, 0xc, 0x0, 0x0
    byte: 0xf, 0x2, 0x1f, 0x2, 0xf, 0x1b, 0x11, 0xf0, 0x7, 0x2, 0xf, 0x2, 0x7, 0xb, 0x11, 0xd0
    byte: 0x1f, 0x3c, 0x70, 0x61, 0x7, 0x5e, 0x19, 0x7e, 0x7, 0x1c, 0x30, 0x20, 0x1, 0x46, 0x19, 0x7e
    byte: 0x26, 0x7e, 0x58, 0xd2, 0x23, 0xc1, 0x0, 0x0, 0x20, 0x22, 0x10, 0x52, 0x23, 0xc1, 0x0, 0x0
    byte: 0x0, 0x40, 0x70, 0x18, 0xc8, 0xed, 0xf7, 0x3d, 0x0, 0x0, 0x40, 0x10, 0x0, 0xc9, 0xe1, 0x3d
    byte: 0x18, 0x70, 0xf0, 0x80, 0x0, 0x0, 0x0, 0x0, 0x10, 0x10, 0xf0, 0x80, 0x0, 0x0, 0x0, 0x0
    byte: 0x0, 0x0, 0x0, 0x70, 0xfc, 0xde, 0x2, 0xe2, 0x0, 0x0, 0x0, 0x0, 0x70, 0x1e, 0x2, 0xc0
    byte: 0x45, 0xd7, 0xff, 0xff, 0xfd, 0xff, 0xbf, 0xfb, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x40, 0x4
    byte: 0xff, 0xbb, 0xff, 0xff, 0xef, 0xff, 0x7f, 0xfd, 0x0, 0x44, 0x0, 0x0, 0x10, 0x0, 0x80, 0x2
    byte: 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d, 0x1d
    byte: 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8
    byte: 0x0, 0x0, 0x7f, 0x80, 0x80, 0xff, 0x7f, 0x0, 0x0, 0x7f, 0x80, 0x7f, 0xff, 0xff, 0x7f, 0x0
    byte: 0x0, 0x0, 0xfc, 0x1, 0x3, 0xff, 0xfe, 0x0, 0x0, 0xfe, 0x3, 0xff, 0xff, 0xff, 0xfe, 0x0
    byte: 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0, 0xff, 0xff
    byte: 0xff, 0x0, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0
    byte: 0x0, 0x0, 0x10, 0x0, 0x9, 0x10, 0xa, 0x25, 0x0, 0x0, 0x10, 0x0, 0x9, 0x10, 0xa, 0x25
    byte: 0x0, 0x0, 0x0, 0x90, 0x68, 0x90, 0xf4, 0xba, 0x0, 0x0, 0x0, 0x90, 0x68, 0x90, 0x74, 0xaa
    byte: 0xa, 0x7, 0x2b, 0x15, 0x2, 0x21, 0x4, 0x0, 0xa, 0x7, 0x2b, 0x15, 0x2, 0x21, 0x4, 0x0
    byte: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0xfc, 0xb4, 0x6a, 0xc8, 0x22, 0x28, 0x0, 0x0, 0xfc, 0xb4, 0x6a, 0xc8, 0x22, 0x28, 0x0, 0x0
    byte: 0x22, 0x76, 0xff, 0xff, 0xff, 0x7f, 0xff, 0x7e, 0x0, 0x76, 0xf7, 0x7f, 0xdb, 0x7f, 0xff, 0x5e
    byte: 0x90, 0x60, 0xe0, 0xd0, 0xf0, 0xac, 0xd0, 0xf8, 0x90, 0x40, 0xe0, 0xd0, 0xf0, 0xac, 0xd0, 0xf8
    byte: 0xff, 0xee, 0xbd, 0x7b, 0x3e, 0x50, 0x0, 0x0, 0xff, 0xee, 0xbd, 0x7b, 0x3e, 0x50, 0x0, 0x0
    byte: 0xe4, 0x40, 0xa8, 0x40, 0x40, 0x0, 0x0, 0x0, 0xe4, 0x40, 0xa8, 0x40, 0x40, 0x0, 0x0, 0x0
    byte: 0x3f, 0xc0, 0x80, 0x80, 0x0, 0x0, 0xff, 0x80, 0x0, 0x3f, 0x7f, 0x7f, 0x0, 0x0, 0x0, 0x7f
    byte: 0xfc, 0x0, 0x0, 0x0, 0x0, 0x1c, 0x90, 0x20, 0x0, 0xfc, 0xfc, 0xfc, 0x0, 0x0, 0xc, 0x9c
    byte: 0x80, 0x80, 0x0, 0xf0, 0x80, 0x80, 0x0, 0x0, 0x7f, 0x7f, 0x0, 0x0, 0x7f, 0x7f, 0x0, 0x0
    byte: 0x20, 0x20, 0x0, 0x3c, 0x40, 0x40, 0x0, 0x0, 0x9c, 0x1c, 0x0, 0x0, 0xbc, 0xbc, 0x0, 0x0
    byte: 0x10, 0x10, 0x10, 0x0, 0x8, 0x8, 0x8, 0x8, 0x6f, 0x6f, 0x6f, 0x0, 0x17, 0x17, 0x17, 0x17
    byte: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0x0, 0xff, 0xff, 0xff, 0xff
    byte: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe6, 0xe6, 0xe6, 0x0, 0xc8, 0xc8, 0xc8, 0xc8
    byte: 0x7e, 0xff, 0xc0, 0xc0, 0xc0, 0xcf, 0xc0, 0x4f, 0x0, 0x0, 0x3f, 0x2f, 0x3f, 0x30, 0x38, 0x30
    byte: 0x7e, 0xff, 0x3, 0x3, 0x3, 0xf3, 0x3, 0xf2, 0x0, 0x1, 0xff, 0xf7, 0xff, 0xff, 0xf, 0xfe
    byte: 0x40, 0xcf, 0xc0, 0xc0, 0xc0, 0xc0, 0xff, 0x7e, 0x38, 0x30, 0x38, 0x3f, 0x2f, 0x3f, 0x7f, 0x7e
    byte: 0x2, 0xf3, 0x3, 0x3, 0x3, 0x3, 0xff, 0x7e, 0xe, 0xff, 0xf, 0xff, 0xf7, 0xff, 0xff, 0x7e
    byte: 0x73, 0xf9, 0xff, 0x7f, 0x3f, 0xbf, 0xff, 0xff, 0x0, 0x79, 0x40, 0x5f, 0x10, 0x17, 0x54, 0x55
    byte: 0xcc, 0xdc, 0xfc, 0xf4, 0xf0, 0xd4, 0xd4, 0x54, 0x0, 0xdc, 0x4, 0xf4, 0x10, 0xd4, 0x54, 0x54
    byte: 0xfc, 0xff, 0xb0, 0x7f, 0xc0, 0xf7, 0x0, 0x0, 0x54, 0x57, 0x10, 0x5f, 0x40, 0x77, 0x0, 0x0
    byte: 0x50, 0xd4, 0x14, 0xf4, 0x4, 0xcc, 0x0, 0x0, 0x50, 0x94, 0x14, 0xe4, 0x4, 0xc8, 0x0, 0x0
    byte: 0xfe, 0x82, 0x92, 0xaa, 0x92, 0x82, 0xfe, 0x0, 0x0, 0x7e, 0x46, 0x5e, 0x56, 0x7e, 0xfe, 0x0

//Game over, Japaneese font tile patterns.
    byte: 0xc0, 0x4, 0xc4, 0x4, 0x4, 0xc, 0xf8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0x0, 0x0, 0x0, 0x0, 0x4, 0x12, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0x40, 0x7e, 0x48, 0x88, 0x8, 0x18, 0x70, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0xe0, 0x2, 0x2, 0x2, 0x6, 0xc, 0xf8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0x18, 0xc, 0x86, 0x82, 0x82, 0x82, 0x82, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0x7e, 0x42, 0xc2, 0x2, 0x6, 0xc, 0x78, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0x7e, 0x42, 0xc2, 0x1e, 0x2, 0x6, 0x7c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0x44, 0xfe, 0x44, 0x44, 0x4, 0xc, 0x78, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0x40, 0x40, 0x40, 0x78, 0x44, 0x40, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0x10, 0xfe, 0x82, 0x82, 0x6, 0xc, 0x78, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0xc, 0x78, 0x8, 0xfe, 0x8, 0x18, 0x70, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0x7c, 0x0, 0x0, 0x0, 0x0, 0x0, 0xfe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0x0, 0x0, 0x50, 0x54, 0x4, 0xc, 0x38, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0x0, 0x0, 0x0, 0x38, 0x8, 0x8, 0x7c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0xa2, 0xa2, 0xa2, 0x2, 0x6, 0xc, 0x78, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0x40, 0xfe, 0x42, 0x46, 0x44, 0x60, 0x3e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0x7e, 0x2, 0x2, 0x7e, 0x2, 0x2, 0x7e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0x0, 0x0, 0x0, 0x0, 0x0, 0x18, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0x3e, 0x60, 0xc0, 0xce, 0xc6, 0x66, 0x3e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0xfe, 0xc0, 0xc0, 0xfc, 0xc0, 0xc0, 0xfe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0xc6, 0xc6, 0xc6, 0xee, 0x7c, 0x38, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0xfc, 0xc6, 0xc6, 0xce, 0xf8, 0xdc, 0xce, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0x45, 0xd7, 0xff, 0xbb, 0xff, 0xef, 0x7f, 0xdd, 0x0, 0x0, 0x0, 0x44, 0x2, 0x50, 0x88, 0x22
    byte: 0xff, 0x77, 0xdd, 0xf7, 0xbe, 0xef, 0xbb, 0x6e, 0x24, 0x88, 0x22, 0x48, 0x45, 0x10, 0x46, 0xb1
    byte: 0x7e, 0x42, 0xc2, 0x1e, 0x2, 0x6, 0x7c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0x0, 0x0, 0x0, 0x0, 0x4, 0x12, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0x44, 0xfe, 0x44, 0x44, 0x4, 0xc, 0x78, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0x6, 0xc, 0x38, 0xf0, 0x10, 0x10, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0xfe, 0xc0, 0xc0, 0xfc, 0xc0, 0xc0, 0xfe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0xfc, 0xc6, 0xc6, 0xce, 0xf8, 0xdc, 0xce, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
    byte: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
    byte: 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0

//Unused tile patterns.
    byte: 0x6, 0xc, 0x38, 0xf0, 0x10, 0x10, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0xfe, 0xc0, 0xc0, 0xfc, 0xc0, 0xc0, 0xfe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0xfc, 0xc6, 0xc6, 0xce, 0xf8, 0xdc, 0xce, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
    byte: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
    byte: 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0

//----------------------------------------------------------------------------------------------------

def palpntrtbl:

    //($A0EB)
    word: palette00
    //($A10F)
    word: palette01
    //($A11B)
    word: palette02
    //($A115)
    word: palette03
    //($A121)
    word: palette04
    //($A127)
    word: palette05
    //($A13B)
    word: palette06
    //($A13B)
    word: palette06
    //($A13B)
    word: palette06
    //($A13B)
    word: palette06
    //($A13B)
    word: palette06
    //($A13B)
    word: palette06
    //($A13B)
    word: palette06
    //($A13B)
    word: palette06
    //($A13B)
    word: palette06
    //($A13B)
    word: palette06
    //($A13B)
    word: palette06
    //($A13B)
    word: palette06
    //($A13B)
    word: palette06
    //($A13B)
    word: palette06
    //($A142)
    word: palette07
    //($A149)
    word: palette08
    //($A150)
    word: palette09
    //($A157)
    word: palette0a
    //($A15F)
    word: palette0b
    //($A167)
    word: palette0c
    //($A16F)
    word: palette0d
    //($A177)
    word: palette0e

def areapointers:

    //($A20D)Beginning of special items table.
    word: specitmstbl
    //($A17F)Beginning of room pointer table.
    word: rmptrtbl
    //($A1D3)Beginning of structure pointer table.
    word: strctptrtbl
    //($AB23)Beginning of macro definitions.
    word: macrodefs
    //($9BF0)Address table into enemy animation data. Two-->
    word: enemyframeptrtbl1
    //($9CF0)tables needed to accommodate all entries.
    word: enemyframeptrtbl2
    //($9D04)Pointers to enemy frame placement data.
    word: enemyplaceptrtbl
    //($9B85)Index to values in addr tables for enemy animations.
    word: enemyanimindextbl

    byte: 0x60, 0xea, 0xea, 0x60, 0xea, 0xea, 0x60, 0xea, 0xea, 0x60, 0xea, 0xea, 0x60, 0xea, 0xea, 0x60
    byte: 0xea, 0xea, 0x60, 0xea, 0xea, 0x60, 0xea, 0xea, 0x60, 0xea, 0xea

def arearoutine:

    //Area specific routine.
    goto ridley_page_9B48

def twoscompliment_:

def ridley_page_95C6:
    a = a ^ 0xff
    //The following routine returns the twos-->
    carry = 0
    //compliment of the value stored in A.
    a = a +# 0x1
    return

    //Ridley's room.
    byte: 0x12

    //Ridley hideout music init flag.
    byte: 0x80

    //Base damage caused by area enemies to lower health byte.
    byte: 0x40
    //Base damage caused by area enemies to upper health byte.
    byte: 0x2

//Special room numbers(used to start item room music).
    byte: 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff

    //Samus start x coord on world map.
    byte: 0x19
    //Samus start y coord on world map.
    byte: 0x18
    //Samus start verticle screen position.
    byte: 0x6e

    byte: 0x6, 0x0, 0x3, 0x58, 0x44, 0x4a, 0x48, 0x4a, 0x4a, 0x36, 0x25

    a = [0x6b02:x]
    call ridley_page_8024

    word: ridley_page_98D7
    word: ridley_page_990C
    word: ridley_page_9847
    word: ridley_page_9862
    word: ridley_page_982A
    word: ridley_page_982A
    word: ridley_page_9967
    word: ridley_page_9867
    word: ridley_page_982A
    word: ridley_page_9A13
    word: ridley_page_9A4A
    word: ridley_page_982A
    word: ridley_page_9B03
    word: ridley_page_982A
    word: ridley_page_9B16
    word: ridley_page_982A

    byte: 0x23, 0x23, 0x23, 0x23, 0x3a, 0x3a, 0x3c, 0x3c, 0x0, 0x0, 0x0, 0x0, 0x56, 0x56, 0x65, 0x63

    byte: 0x0, 0x0, 0x11, 0x11, 0x13, 0x18, 0x28, 0x28, 0x32, 0x32, 0x34, 0x34, 0x0, 0x0, 0x0, 0x0

    byte: 0x8, 0x8, 0x8, 0x8, 0x1, 0x1, 0x2, 0x1, 0x1, 0x8c, 0xff, 0xff, 0x8, 0x6, 0xff, 0x0

    byte: 0x1d, 0x1d, 0x1d, 0x1d, 0x3e, 0x3e, 0x44, 0x44, 0x0, 0x0, 0x0, 0x0, 0x4a, 0x4a, 0x69, 0x67

    byte: 0x0, 0x0, 0x5, 0x8, 0x13, 0x18, 0x1d, 0x1d, 0x2d, 0x28, 0x34, 0x34, 0x0, 0x0, 0x0, 0x0

    byte: 0x20, 0x20, 0x20, 0x20, 0x3e, 0x3e, 0x44, 0x44, 0x0, 0x0, 0x0, 0x0, 0x4a, 0x4a, 0x60, 0x5d

    byte: 0x0, 0x0, 0x5, 0x8, 0x13, 0x18, 0x1d, 0x1d, 0x2d, 0x28, 0x34, 0x34, 0x0, 0x0, 0x0, 0x0

    byte: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x82, 0x0, 0x0, 0x0

def ridley_page_968B:
    byte: 0x89, 0x89, 0x89, 0x89, 0x0, 0x0, 0x4, 0x80, 0x80, 0x81, 0x0, 0x0, 0x5, 0x89, 0x0, 0x0

    byte: 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x28, 0x10, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0

    byte: 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x86, 0x0, 0x0

    byte: 0x10, 0x1, 0x3, 0x3, 0x10, 0x10, 0x1, 0x8, 0x9, 0x10, 0x1, 0x10, 0x1, 0x20, 0x0, 0x0

    byte: 0x18, 0x1a, 0x0, 0x3, 0x0, 0x0, 0x8, 0x8, 0x0, 0xa, 0xc, 0xf, 0x14, 0x16, 0x18, 0x0

def ridley_page_96DB:
    word: ridley_page_97ED, ridley_page_97ED, ridley_page_97ED, ridley_page_97ED, ridley_page_97ED, 0x97f0, ridley_page_97F3, ridley_page_97F3
    word: ridley_page_97F3, ridley_page_97F3, ridley_page_97F3, ridley_page_97F3, ridley_page_97F3, ridley_page_97F3, ridley_page_97F3, ridley_page_97F3
    word: ridley_page_97F3, ridley_page_97F3, ridley_page_97F3, ridley_page_97F3, ridley_page_97F3, ridley_page_97F3, ridley_page_97F3, ridley_page_97F3
    word: ridley_page_97F3, ridley_page_97F3, ridley_page_97F3, ridley_page_97F3, ridley_page_97F3, ridley_page_97F3, ridley_page_97F3, ridley_page_97F3
    word: ridley_page_97F3, ridley_page_97F3, ridley_page_97F3, ridley_page_97F3

    byte: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x80, 0x0, 0x0, 0x7f, 0x7f, 0x81, 0x81
    byte: 0x0, 0x0, 0xe0, 0x16, 0x15, 0x7f, 0x7f, 0x7f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0x0, 0x0, 0x0, 0x0, 0xc8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x20, 0x0, 0x0, 0x0, 0x0
    byte: 0xc, 0xc, 0x2, 0x1, 0xf6, 0xfc, 0xa, 0x4, 0x1, 0xfc, 0x6, 0xfe, 0xfe, 0xfa, 0xf9, 0xf9
    byte: 0xfd, 0x0, 0x0, 0x0, 0x0, 0x2, 0x1, 0x1, 0x2, 0x2, 0x2, 0x2, 0x6, 0x0, 0x1, 0x1
    byte: 0x1, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0

def ridley_page_977B:
    byte: 0x4c, 0x4c, 0x64, 0x6c, 0x0, 0x0, 0x0, 0x40, 0x0, 0x64, 0x44, 0x44, 0x40, 0x0, 0x0, 0x0

    byte: 0x0, 0x0, 0x0, 0x0, 0x34, 0x34, 0x44, 0x4a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0x8, 0xf8, 0x0, 0x0, 0x0, 0x0, 0x8, 0xf8, 0x0, 0x0, 0x0, 0xf8

    word: ridley_page_97FD, ridley_page_97FD, 0x980c, 0x981b, 0x9b49, 0x9b4e, 0x9b53, 0x9b58
    word: ridley_page_9B5D, 0x9b62, 0x9b67, 0x9b6c, 0x9b71, 0x9b76, 0x9b7b, 0x9b80
    word: ridley_page_9B85, ridley_page_9B85, ridley_page_9B85, ridley_page_9B85, ridley_page_9B85

    byte: 0x1, 0x4, 0x5, 0x1, 0x6, 0x7, 0x0, 0x2, 0x0, 0x9, 0x0, 0xd, 0x1, 0xe, 0xf, 0x3
    byte: 0x0, 0x1, 0x2, 0x3, 0x0, 0x10, 0x0, 0x11, 0x0, 0x0, 0x0, 0x1

def ridley_page_97ED:
    byte: 0x1, 0x3, 0xff

    byte: 0x1, 0xb, 0xff

def ridley_page_97F3:
    byte: 0x14, 0x90, 0xa, 0x0, 0xfd, 0x30, 0x0, 0x14, 0x10, 0xfa

def ridley_page_97FD:
    byte: 0x9, 0xc2, 0x8, 0xa2, 0x7, 0x92, 0x7, 0x12, 0x8, 0x22, 0x9, 0x42, 0x50, 0x72, 0xff

    byte: 0x7, 0xc2, 0x6, 0xa2, 0x5, 0x92, 0x5, 0x12, 0x6, 0x22, 0x7, 0x42, 0x50, 0x72, 0xff

    byte: 0x5, 0xc2, 0x4, 0xa2, 0x3, 0x92, 0x3, 0x12, 0x4, 0x22, 0x5, 0x42, 0x50, 0x72, 0xff

def ridley_page_982A:
    a = 0x0
    [0x6af4:x] = a
    return

def ridley_page_9830:
    a = [0x81]
    compare a to 0x1
    goto ridley_page_983F when zero
    compare a to 0x3
    goto ridley_page_9844 when zero
    a = [0x0]
    goto ridley_page_8000
def ridley_page_983F:
    a = [0x1]
    goto ridley_page_8003
def ridley_page_9844:
    goto ridley_page_8006
def ridley_page_9847:
    a = 0x42
def ridley_page_9849:
    [0x85] = a
    [0x86] = a
    a = [0x6af4:x]
    compare a to 0x3
    goto ridley_page_9857 when zero
    call ridley_page_801B
def ridley_page_9857:
    a = 0x6
    [0x0] = a
    a = 0x8
    [0x1] = a
    goto ridley_page_9830
def ridley_page_9862:
    a = 0x48
    goto ridley_page_9849
def ridley_page_9867:
    a = [0x6af4:x]
    compare a to 0x2
    goto ridley_page_98A6 when ~zero
    a = [0x403:x]
    goto ridley_page_98A6 when ~zero
    a = [0x6afe:x]
    goto ridley_page_988A when ~zero
    a = [0x30d]
    carry = 1
    a = a -# [0x400:x]
    compare a to 0x40
    goto ridley_page_98A6 when carry
    a = 0x7f
    [0x6afe:x] = a
    goto ridley_page_98A6 when ~zero
def ridley_page_988A:
    a = [0x402:x]
    goto ridley_page_98A6 when negative
    a = 0x0
    [0x402:x] = a
    [0x406:x] = a
    [0x6afe:x] = a
    a = [0x405:x]
    a = a & 0x1
    y = a
    a = [ridley_page_98D5:y]
    [0x403:x] = a
def ridley_page_98A6:
    a = [0x405:x]
    a = a << 1
    goto ridley_page_98CA when negative
    a = [0x6af4:x]
    compare a to 0x2
    goto ridley_page_98CA when ~zero
    call ridley_page_8036
    push a
    call ridley_page_8039
    [0x5] = a
    a = pop
    [0x4] = a
    call ridley_page_9AE1
    call ridley_page_8027
    goto ridley_page_98CF when ~carry
    call ridley_page_9AF1
def ridley_page_98CA:
    a = 0x3
    goto ridley_page_8003
def ridley_page_98CF:
    a = 0x0
    [0x6af4:x] = a
    return

def ridley_page_98D5:
    push p
    decimal = 1
def ridley_page_98D7:
    a = 0x3
    [0x0] = a
    a = 0x8
    [0x1] = a
    a = [0x6af4:x]
    compare a to 0x1
    goto ridley_page_98F2 when ~zero
    a = [0x405:x]
    a = a & 0x10
    goto ridley_page_98F2 when zero
    a = 0x1
    call ridley_page_9958
def ridley_page_98F2:
    call ridley_page_98F8
    goto ridley_page_9830
def ridley_page_98F8:
    a = [0x6af4:x]
    compare a to 0x2
    goto ridley_page_990B when ~zero
    a = 0x20
    y = [0x402:x]
    goto ridley_page_9908 when ~negative
    a = 0x1d
def ridley_page_9908:
    [0x6af9:x] = a
def ridley_page_990B:
    return

def ridley_page_990C:
    a = [0x81]
    compare a to 0x1
    goto ridley_page_9922 when zero
    compare a to 0x3
    goto ridley_page_9955 when zero
    a = [0x6af4:x]
    compare a to 0x1
    goto ridley_page_9927 when ~zero
    a = 0x0
    call ridley_page_9958
def ridley_page_9922:
    a = 0x8
    goto ridley_page_8003
def ridley_page_9927:
    a = 0x80
    [0x6afe:x] = a
    a = [0x402:x]
    goto ridley_page_994D when negative
    a = [0x405:x]
    a = a & 0x10
    goto ridley_page_994D when zero
    a = [0x400:x]
    carry = 1
    a = a -# [0x30d]
    goto ridley_page_9944 when ~negative
    call ridley_page_95C6
def ridley_page_9944:
    compare a to 0x10
    goto ridley_page_994D when carry
    a = 0x0
    [0x6afe:x] = a
def ridley_page_994D:
    call ridley_page_98F8
    a = 0x3
    goto ridley_page_8000
def ridley_page_9955:
    goto ridley_page_8006
def ridley_page_9958:
    [0x6b02:x] = a
    a = [0x40b:x]
    push a
    call ridley_page_802A
    a = pop
    [0x40b:x] = a
    return

def ridley_page_9967:
    call ridley_page_8009
    a = a & 0x3
    goto ridley_page_99A2 when zero
    a = [0x81]
    compare a to 0x1
    goto ridley_page_99AA when zero
    compare a to 0x3
    goto ridley_page_99A7 when zero
    a = [0x6af4:x]
    compare a to 0x3
    goto ridley_page_99A2 when zero
    a = [0x40a:x]
    a = a & 0x3
    compare a to 0x1
    goto ridley_page_9999 when ~zero
    y = [0x400:x]
    compare y to 0xeb
    goto ridley_page_9999 when ~zero
    call ridley_page_99DB
    a = 0x3
    [0x40a:x] = a
    goto ridley_page_999F when ~zero
def ridley_page_9999:
    call ridley_page_9A00
    call ridley_page_99C6
def ridley_page_999F:
    call ridley_page_99E4
def ridley_page_99A2:
    a = 0x3
    call ridley_page_800C
def ridley_page_99A7:
    goto ridley_page_8006
def ridley_page_99AA:
    goto ridley_page_8003
def ridley_page_99AD:
    a = [0x405:x]
    a = a >> 1
    a = [0x40a:x]
    a = a & 0x3
    a = a <<< 1
    y = a
    a = [ridley_page_99BE:y]
    goto ridley_page_800F

def ridley_page_99BE:
    byte: 0x4a, 0x4a, 0x53, 0x4d, 0x50, 0x50, 0x4d, 0x53

def ridley_page_99C6:
    x = [0x4b]
    goto ridley_page_99E3 when carry
    a = [0x0]
    goto ridley_page_99DB when ~zero
    y = [0x40a:x]
    y--
    a = y
    a = a & 0x3
    [0x40a:x] = a
    goto ridley_page_99AD
def ridley_page_99DB:
    a = [0x405:x]
    a = a ^ 0x1
    [0x405:x] = a
def ridley_page_99E3:
    return

def ridley_page_99E4:
    call ridley_page_99F8
    call ridley_page_9A00
    x = [0x4b]
    goto ridley_page_99F7 when ~carry
    call ridley_page_99F8
    [0x40a:x] = a
    call ridley_page_99AD
def ridley_page_99F7:
    return

def ridley_page_99F8:
    y = [0x40a:x]
    y++
    a = y
    a = a & 0x3
    return

def ridley_page_9A00:
    y = [0x405:x]
    [0x0] = y
    [0x0] = [0x0] >> 1
    a = a <<< 1
    a = a << 1
    y = a
    a = [0x8049:y]
    push a
    a = [ridley_page_8048:y]
    push a
    return

def ridley_page_9A13:
    a = [0x6af4:x]
    compare a to 0x3
    goto ridley_page_9A33 when ~carry
    goto ridley_page_9A20 when zero
    compare a to 0x5
    goto ridley_page_9A41 when ~zero
def ridley_page_9A20:
    a = 0x0
    [0x6b04] = a
    [0x6b14] = a
    [0x6b24] = a
    [0x6b34] = a
    [0x6b44] = a
    goto ridley_page_9A41 when zero
def ridley_page_9A33:
    a = 0xb
    [0x85] = a
    a = 0xe
    [0x86] = a
    call ridley_page_801B
    call ridley_page_9A79
def ridley_page_9A41:
    a = 0x3
    [0x0] = a
    [0x1] = a
    goto ridley_page_9830
def ridley_page_9A4A:
    a = [0x405:x]
    push a
    a = 0x2
    [0x0] = a
    [0x1] = a
    call ridley_page_9830
    a = pop
    x = [0x4b]
    a = a ^ [0x405:x]
    a = a >> 1
    goto ridley_page_9A73 when carry
    a = [0x405:x]
    a = a >> 1
    goto ridley_page_9A78 when carry
    a = [0x401:x]
    carry = 1
    a = a -# [0x30e]
    goto ridley_page_9A78 when ~carry
    compare a to 0x20
    goto ridley_page_9A78 when ~carry
def ridley_page_9A73:
    a = 0x0
    [0x6af4:x] = a
def ridley_page_9A78:
    return

def ridley_page_9A79:
    y = [0x80]
    goto ridley_page_9A7F when ~zero
    y = 0x60
def ridley_page_9A7F:
    a = [0x2d]
    a = a & 0x2
    goto ridley_page_9AA9 when ~zero
    y--
    [0x80] = y
    a = y
    a = a << 1
    goto ridley_page_9AA9 when negative
    a = a & 0xf
    compare a to 0xa
    goto ridley_page_9AA9 when ~zero
    x = 0x50
def ridley_page_9A94:
    a = [0x6af4:x]
    goto ridley_page_9AAA when zero
    a = [0x405:x]
    a = a & 0x2
    goto ridley_page_9AAA when zero
    a = x
    carry = 1
    a = a -# 0x10
    x = a
    goto ridley_page_9A94 when ~zero
    [0x7e]++
def ridley_page_9AA9:
    return

def ridley_page_9AAA:
    a = x
    y = a
    x = 0x0
    call ridley_page_9AE1
    a = y
    x = a
    a = [0x405]
    [0x405:x] = a
    a = a & 0x1
    y = a
    a = [ridley_page_9ADF:y]
    [0x5] = a
    a = 0xf8
    [0x4] = a
    call ridley_page_8027
    goto ridley_page_9AA9 when ~carry
    a = 0x0
    [0x40f:x] = a
    a = 0xa
    [0x6b02:x] = a
    a = 0x1
    [0x6af4:x] = a
    call ridley_page_9AF1
    goto ridley_page_802A
def ridley_page_9ADF:
    push p
    decimal = 1
def ridley_page_9AE1:
    a = [0x400:x]
    [0x8] = a
    a = [0x401:x]
    [0x9] = a
    a = [0x6afb:x]
    [0xb] = a
    return

def ridley_page_9AF1:
    a = [0xb]
    a = a & 0x1
    [0x6afb:x] = a
    a = [0x8]
    [0x400:x] = a
    a = [0x9]
    [0x401:x] = a
    return

def ridley_page_9B03:
    a = [0x6af4:x]
    compare a to 0x2
    goto ridley_page_9B0D when ~zero
    call ridley_page_801E
def ridley_page_9B0D:
    a = 0x2
    [0x0] = a
    [0x1] = a
    goto ridley_page_9830
def ridley_page_9B16:
    a = 0x0
    [0x6af5:x] = a
    [0x6af6:x] = a
    a = 0x10
    [0x405:x] = a
    a = x
    a = a >> 1
    a = a >> 1
    a = a >> 1
    a = a >> 1
    a = a +# [0x2d]
    a = a & 0x7
    goto ridley_page_9B48 when ~zero
    [0x405:x] = [0x405:x] >> 1
    a = 0x3
    [0x87] = a
    a = [0x2e]
    a = a >> 1
    [0x405:x] = [0x405:x] <<< 1
    a = a & 0x3
    goto ridley_page_9B48 when zero
    [0x88] = a
    a = 0x2
    [0x85] = a
    goto ridley_page_8021
def ridley_page_9B48:
    return

    byte: 0x22, 0xff, 0xff, 0xff, 0xff

    byte: 0x22, 0x80, 0x81, 0x82, 0x83

    byte: 0x22, 0x84, 0x85, 0x86, 0x87

    byte: 0x22, 0x88, 0x89, 0x8a, 0x8b

def ridley_page_9B5D:
    byte: 0x22, 0x8c, 0x8d, 0x8e, 0x8f

    byte: 0x22, 0x94, 0x95, 0x96, 0x97

    byte: 0x22, 0x9c, 0x9d, 0x9d, 0x9c

    byte: 0x22, 0x9e, 0x9f, 0x9f, 0x9e

    byte: 0x22, 0x90, 0x91, 0x92, 0x93

    byte: 0x22, 0x70, 0x71, 0x72, 0x73

    byte: 0x22, 0x74, 0x75, 0x76, 0x77

    byte: 0x22, 0x78, 0x79, 0x7a, 0x7b

//-----------------------------------[ Enemy animation data tables ]----------------------------------

def enemyanimindextbl:

def ridley_page_9B85:
    byte: 0x0, 0x1, 0xff

    byte: 0x2, 0xff

    byte: 0x3, 0x4, 0xff

    byte: 0x7, 0x8, 0xff

    byte: 0x5, 0x6, 0xff

    byte: 0x9, 0xa, 0xff

    byte: 0xb, 0xff

    byte: 0xc, 0xd, 0xe, 0xf, 0xff

    byte: 0x10, 0x11, 0x12, 0x13, 0xff

    byte: 0x17, 0x18, 0xff

    byte: 0x19, 0x1a, 0xff

    byte: 0x1b, 0xff

    byte: 0x21, 0x22, 0xff

    byte: 0x27, 0x28, 0x29, 0x2a, 0xff

    byte: 0x2b, 0x2c, 0x2d, 0x2e, 0xff

    byte: 0x2f, 0xff

    byte: 0x42, 0xff

    byte: 0x43, 0x44, 0xf7, 0xff

    byte: 0x37, 0xff, 0x38, 0xff

    byte: 0x30, 0x31, 0xff

    byte: 0x31, 0x32, 0xff

    byte: 0x33, 0x34, 0xff

    byte: 0x34, 0x35, 0xff

    byte: 0x58, 0x59, 0xff

    byte: 0x5a, 0x5b, 0xff

    byte: 0x5c, 0x5d, 0xff

    byte: 0x5e, 0x5f, 0xff

    byte: 0x60, 0xff

    byte: 0x61, 0xf7, 0x62, 0xf7, 0xff

    byte: 0x66, 0x67, 0xff

    byte: 0x69, 0x6a, 0xff

    byte: 0x68, 0xff

    byte: 0x6b, 0xff

    byte: 0x66, 0xff

    byte: 0x69, 0xff

//----------------------------[ Enemy sprite drawing pointer tables ]---------------------------------

def enemyframeptrtbl1:

    word: ridley_page_9DD8, 0x9ddd, 0x9de2, 0x9de7, 0x9dfa, 0x9e0e, 0x9e24, 0x9e3a
    word: ridley_page_9E4D, 0x9e61, 0x9e77, 0x9e8d, 0x9e97, 0x9e9c, 0x9ea1, 0x9ea6
    word: ridley_page_9EAB, 0x9eb0, 0x9eb5, 0x9eba, 0x9ebf, 0x9ebf, 0x9ebf, 0x9ebf
    word: ridley_page_9ECE, 0x9edd, 0x9eee, 0x9eff, ridley_page_9F07, ridley_page_9F07, ridley_page_9F07, ridley_page_9F07
    word: ridley_page_9F07, ridley_page_9F07, 0x9f0f, 0x9f17, 0x9f17, 0x9f17, 0x9f17, 0x9f17
    word: ridley_page_9F23, 0x9f31, 0x9f3f, 0x9f4d, 0x9f59, 0x9f67, 0x9f75, 0x9f83
    word: ridley_page_9F8E, 0x9f9c, 0x9faa, 0x9fb6, 0x9fc4, 0x9fd2, 0x9fde, 0x9fde
    word: ridley_page_9FF2, ridley_page_A006, ridley_page_A006, ridley_page_A006, ridley_page_A006, ridley_page_A006, ridley_page_A006, ridley_page_A006
    word: ridley_page_A006, ridley_page_A006, ridley_page_A006, 0xa00b, 0xa013, ridley_page_A01B, ridley_page_A01B, ridley_page_A01B
    word: ridley_page_A01B, ridley_page_A01B, ridley_page_A01B, ridley_page_A01B, ridley_page_A01B, ridley_page_A01B, ridley_page_A01B, ridley_page_A01B
    word: ridley_page_A01B, ridley_page_A01B, ridley_page_A01B, ridley_page_A01B, ridley_page_A01B, ridley_page_A01B, ridley_page_A01B, ridley_page_A01B
    word: ridley_page_A01B, 0xa027, 0xa033, 0xa03f, 0xa04b, 0xa057, 0xa063, 0xa06f
    word: ridley_page_A07B, 0xa083, 0xa091, 0xa0ab, 0xa0ab, 0xa0ab, 0xa0ab, 0xa0b3
    word: ridley_page_A0BB, 0xa0c3, 0xa0cb, 0xa0d3, ridley_page_A0DB, ridley_page_A0DB, ridley_page_A0DB, ridley_page_A0DB
    word: ridley_page_A0DB, ridley_page_A0DB, ridley_page_A0DB, ridley_page_A0DB, ridley_page_A0DB, ridley_page_A0DB, ridley_page_A0DB, ridley_page_A0DB
    word: ridley_page_A0DB, ridley_page_A0DB, ridley_page_A0DB, ridley_page_A0DB, ridley_page_A0DB, ridley_page_A0DB, ridley_page_A0DB, ridley_page_A0DB

def enemyframeptrtbl2:

    word: ridley_page_A0DB, 0xa0e1, 0xa0e6, 0xa0e6, 0xa0e6, 0xa0e6, 0xa0e6, 0xa0e6
    word: 0xa0e6, 0xa0e6

def enemyplaceptrtbl:

    word: ridley_page_9D22, 0x9d24, 0x9d3c, 0x9d60, 0x9d72, 0x9d64, 0x9d6e, 0x9d76
    word: ridley_page_9D82, 0x9d8a, 0x9d8a, 0x9daa, 0x9db8, 0x9dbc, 0x9dcc

//------------------------------[ Enemy sprite placement data tables ]--------------------------------

def ridley_page_9D22:
    byte: 0xfc, 0xfc

    byte: 0x80, 0x80, 0x81, 0x81, 0x82, 0x82, 0x83, 0x83, 0x84, 0x84, 0x85, 0x85, 0xf4, 0xf8, 0xf4, 0x0
    byte: 0xfc, 0xf8, 0xfc, 0x0, 0x4, 0xf8, 0x4, 0x0

    byte: 0xec, 0xf8, 0xec, 0x0, 0xf4, 0xf8, 0xf4, 0x0, 0xfc, 0xf8, 0xfc, 0x0, 0x4, 0xe8, 0x4, 0xf0
    byte: 0x4, 0xf8, 0x4, 0x0, 0xc, 0xf0, 0xc, 0xf8, 0xc, 0x0, 0xf4, 0xf4, 0xf4, 0xec, 0xfc, 0xf4
    byte: 0x12, 0xe8, 0x14, 0xf8

    byte: 0xf4, 0xf4, 0xf4, 0x4

    byte: 0xf8, 0xf4, 0xf8, 0xfc, 0xf8, 0x4, 0x0, 0xf8, 0x0, 0x0

    byte: 0xfc, 0xf8, 0xfc, 0x0

    byte: 0xf0, 0xf8, 0xf0, 0x0

    byte: 0xf8, 0xf8, 0xf8, 0x0, 0x0, 0xf8, 0x0, 0x0, 0x8, 0xf8, 0x8, 0x0

def ridley_page_9D82:
    byte: 0xf8, 0xe8, 0xf8, 0x10, 0xf8, 0xf0, 0xf8, 0x8

    byte: 0xf8, 0xf8, 0xf8, 0x0, 0x0, 0xf8, 0x0, 0x0, 0xf0, 0x0, 0xf0, 0x8, 0xf8, 0x8, 0xf0, 0xf0
    byte: 0xf0, 0xf8, 0xf8, 0xf0, 0x0, 0xf0, 0x8, 0xf0, 0x8, 0xf8, 0x0, 0x8, 0x8, 0x0, 0x8, 0x8

    byte: 0xf8, 0xfc, 0x0, 0xf8, 0xf4, 0xf4, 0xfc, 0xf4, 0x0, 0x0, 0xf4, 0x4, 0xfc, 0x4

    byte: 0xf8, 0xfc, 0x0, 0xfc

    byte: 0xf8, 0xf4, 0x0, 0xf4, 0xf8, 0xfc, 0x0, 0xfc, 0xf4, 0xfc, 0xfc, 0xfc, 0xf8, 0x4, 0x0, 0x4

    byte: 0x2, 0xf4, 0xa, 0xf4, 0xf8, 0xfc, 0x0, 0xfc, 0x2, 0x4, 0xa, 0x4

//Enemy frame drawing data.

def ridley_page_9DD8:
    byte: 0x0, 0x2, 0x2, 0x14, 0xff

    byte: 0x0, 0x2, 0x2, 0x24, 0xff

    byte: 0x0, 0x0, 0x0, 0x4, 0xff

    byte: 0x22, 0x13, 0x14, 0xc8, 0xc9, 0xc6, 0xc7, 0xd6, 0xd7, 0xd5, 0xe5, 0xe6, 0xe7, 0xf5, 0xf6, 0xf7
    byte: 0xf9, 0xf8, 0xff

    byte: 0x22, 0x13, 0x14, 0xc8, 0xc9, 0xc6, 0xc7, 0xd6, 0xd7, 0xd5, 0xe5, 0xe6, 0xe7, 0xf5, 0xf6, 0xf7
    byte: 0xd8, 0xfe, 0xe8, 0xff

    byte: 0x22, 0x13, 0x14, 0xc8, 0xc9, 0xc6, 0xc7, 0xd6, 0xd7, 0xfe, 0xd9, 0xe6, 0xe7, 0xe9, 0xea, 0xeb
    byte: 0xf9, 0xf8, 0xfe, 0xd5, 0xfa, 0xff

    byte: 0x22, 0x13, 0x14, 0xc8, 0xc9, 0xc6, 0xc7, 0xd6, 0xd7, 0xfe, 0xd9, 0xe6, 0xe7, 0xe9, 0xea, 0xeb
    byte: 0xd8, 0xfe, 0xe8, 0xd5, 0xfa, 0xff

    byte: 0x62, 0x13, 0x14, 0xc8, 0xc9, 0xc6, 0xc7, 0xd6, 0xd7, 0xd5, 0xe5, 0xe6, 0xe7, 0xf5, 0xf6, 0xf7
    byte: 0xf9, 0xf8, 0xff

def ridley_page_9E4D:
    byte: 0x62, 0x13, 0x14, 0xc8, 0xc9, 0xc6, 0xc7, 0xd6, 0xd7, 0xd5, 0xe5, 0xe6, 0xe7, 0xf5, 0xf6, 0xf7
    byte: 0xd8, 0xfe, 0xe8, 0xff

    byte: 0x62, 0x13, 0x14, 0xc8, 0xc9, 0xc6, 0xc7, 0xd6, 0xd7, 0xfe, 0xd9, 0xe6, 0xe7, 0xe9, 0xea, 0xeb
    byte: 0xf9, 0xf8, 0xfe, 0xd5, 0xfa, 0xff

    byte: 0x62, 0x13, 0x14, 0xc8, 0xc9, 0xc6, 0xc7, 0xd6, 0xd7, 0xfe, 0xd9, 0xe6, 0xe7, 0xe9, 0xea, 0xeb
    byte: 0xd8, 0xfe, 0xe8, 0xd5, 0xfa, 0xff

    byte: 0x21, 0x0, 0x0, 0xc6, 0xc7, 0xd6, 0xd7, 0xe6, 0xe7, 0xff

    byte: 0x30, 0x7, 0x7, 0xec, 0xff

    byte: 0x30, 0x7, 0x7, 0xfb, 0xff

    byte: 0xf0, 0x7, 0x7, 0xec, 0xff

    byte: 0xf0, 0x7, 0x7, 0xfb, 0xff

def ridley_page_9EAB:
    byte: 0x70, 0x7, 0x7, 0xec, 0xff

    byte: 0x70, 0x7, 0x7, 0xfb, 0xff

    byte: 0xb0, 0x7, 0x7, 0xec, 0xff

    byte: 0xb0, 0x7, 0x7, 0xfb, 0xff

    byte: 0x25, 0x8, 0x8, 0xce, 0xcf, 0xfd, 0x62, 0xce, 0xfd, 0x22, 0xdf, 0xfd, 0x62, 0xdf, 0xff

def ridley_page_9ECE:
    byte: 0x25, 0x8, 0x8, 0xce, 0xcf, 0xfd, 0x62, 0xce, 0xfd, 0x22, 0xde, 0xfd, 0x62, 0xde, 0xff

    byte: 0xa5, 0x8, 0x8, 0xfd, 0x22, 0xce, 0xcf, 0xfd, 0x62, 0xce, 0xfd, 0xa2, 0xdf, 0xfd, 0xe2, 0xdf
    byte: 0xff

    byte: 0xa5, 0x8, 0x8, 0xfd, 0x22, 0xce, 0xcf, 0xfd, 0x62, 0xce, 0xfd, 0xa2, 0xde, 0xfd, 0xe2, 0xde
    byte: 0xff

    byte: 0x21, 0x0, 0x0, 0xce, 0xce, 0xdf, 0xdf, 0xff

def ridley_page_9F07:
    byte: 0x29, 0x4, 0x8, 0xe6, 0xfd, 0x62, 0xe6, 0xff

    byte: 0x29, 0x4, 0x8, 0xe5, 0xfd, 0x62, 0xe5, 0xff, 0x27, 0x8, 0x8, 0xee, 0xef

    byte: 0xfd, 0xe2, 0xef, 0xfd, 0xa2, 0xef, 0xff

def ridley_page_9F23:
    byte: 0x27, 0x8, 0x8, 0xfd, 0x62, 0xef, 0xfd, 0x22, 0xef, 0xed, 0xfd, 0xa2, 0xef, 0xff

    byte: 0x27, 0x8, 0x8, 0xfd, 0x62, 0xef, 0xfd, 0x22, 0xef, 0xfd, 0xe2, 0xef, 0xee, 0xff

    byte: 0x27, 0x8, 0x8, 0xfd, 0x62, 0xef, 0xfd, 0xe2, 0xed, 0xef, 0xfd, 0xa2, 0xef, 0xff

    byte: 0x67, 0x8, 0x8, 0xee, 0xef, 0xfd, 0xa2, 0xef, 0xfd, 0xe2, 0xef, 0xff

    byte: 0x67, 0x8, 0x8, 0xfd, 0x22, 0xef, 0xfd, 0x62, 0xef, 0xed, 0xfd, 0xe2, 0xef, 0xff

    byte: 0x67, 0x8, 0x8, 0xfd, 0x22, 0xef, 0xfd, 0x62, 0xef, 0xfd, 0xa2, 0xef, 0xee, 0xff

    byte: 0x67, 0x8, 0x8, 0xfd, 0x22, 0xef, 0xfd, 0xa2, 0xed, 0xef, 0xfd, 0xe2, 0xef, 0xff

    byte: 0x21, 0x0, 0x0, 0xfc, 0x4, 0x0, 0xee, 0xef, 0xef, 0xef, 0xff

def ridley_page_9F8E:
    byte: 0x2d, 0x8, 0xa, 0xe2, 0xf2, 0xe3, 0xf3, 0xfe, 0xfe, 0xfd, 0x62, 0xe2, 0xf2, 0xff

    byte: 0x2d, 0x8, 0xa, 0xe4, 0xf2, 0xfe, 0xfe, 0xe3, 0xf3, 0xfd, 0x62, 0xe4, 0xf2, 0xff

    byte: 0x2e, 0x8, 0xa, 0xf4, 0xf2, 0xe3, 0xf3, 0xfd, 0x62, 0xf4, 0xf2, 0xff

    byte: 0xad, 0x8, 0xa, 0xe2, 0xf2, 0xe3, 0xf3, 0xfe, 0xfe, 0xfd, 0xe2, 0xe2, 0xf2, 0xff

    byte: 0xad, 0x8, 0xa, 0xe4, 0xf2, 0xfe, 0xfe, 0xe3, 0xf3, 0xfd, 0xe2, 0xe4, 0xf2, 0xff

    byte: 0xae, 0x8, 0xa, 0xf4, 0xf2, 0xe3, 0xf3, 0xfd, 0xe2, 0xf4, 0xf2, 0xff

    byte: 0x21, 0x0, 0x0, 0xfc, 0x8, 0xfc, 0xe2, 0xfc, 0x0, 0x8, 0xe2, 0xfc, 0x0, 0xf8, 0xf2, 0xfc
    byte: 0x0, 0x8, 0xf2, 0xff

def ridley_page_9FF2:
    byte: 0x21, 0x0, 0x0, 0xfc, 0x0, 0xfc, 0xf2, 0xfc, 0x0, 0x8, 0xf2, 0xfc, 0x0, 0xf8, 0xe2, 0xfc
    byte: 0x0, 0x8, 0xe2, 0xff

def ridley_page_A006:
    byte: 0x20, 0x4, 0x4, 0xc0, 0xff

    byte: 0x20, 0x0, 0x0, 0xfc, 0xf8, 0x0, 0xd0, 0xff

    byte: 0x23, 0x0, 0x0, 0xd1, 0xfd, 0x62, 0xd1, 0xff

def ridley_page_A01B:
    byte: 0x27, 0x8, 0x8, 0xcc, 0xfd, 0x62, 0xcc, 0xfd, 0x22, 0xdc, 0xdd, 0xff

    byte: 0x67, 0x8, 0x8, 0xfd, 0x22, 0xcd, 0xfd, 0x62, 0xcd, 0xdc, 0xdd, 0xff

    byte: 0x27, 0x8, 0x8, 0xfd, 0xa2, 0xda, 0xfd, 0x22, 0xcb, 0xda, 0xdb, 0xff

    byte: 0xa7, 0x8, 0x8, 0xca, 0xcb, 0xfd, 0x22, 0xca, 0xfd, 0xa2, 0xdb, 0xff

    byte: 0xa7, 0x8, 0x8, 0xcc, 0xfd, 0xe2, 0xcc, 0xfd, 0xa2, 0xdc, 0xdd, 0xff

    byte: 0xe7, 0x8, 0x8, 0xfd, 0xa2, 0xcd, 0xfd, 0xe2, 0xcd, 0xdc, 0xdd, 0xff

    byte: 0x67, 0x8, 0x8, 0xfd, 0xe2, 0xda, 0xfd, 0x62, 0xcb, 0xda, 0xdb, 0xff

    byte: 0xe7, 0x8, 0x8, 0xca, 0xcb, 0xfd, 0x62, 0xca, 0xfd, 0xe2, 0xdb, 0xff

def ridley_page_A07B:
    byte: 0x21, 0x0, 0x0, 0xcc, 0xcd, 0xdc, 0xdd, 0xff

    byte: 0xa, 0x0, 0x0, 0x75, 0xfd, 0x60, 0x75, 0xfd, 0xa0, 0x75, 0xfd, 0xe0, 0x75, 0xff

    byte: 0xa, 0x0, 0x0, 0xfe, 0xfe, 0xfe, 0xfe, 0x3d, 0x3e, 0x4e, 0xfd, 0x60, 0x3e, 0x3d, 0x4e, 0xfd
    byte: 0xe0, 0x4e, 0x3e, 0x3d, 0xfd, 0xa0, 0x4e, 0x3d, 0x3e, 0xff

    byte: 0x2a, 0x8, 0x8, 0xc2, 0xc3, 0xd2, 0xd3, 0xff

    byte: 0x2a, 0x8, 0x8, 0xc2, 0xc4, 0xd2, 0xd4, 0xff

def ridley_page_A0BB:
    byte: 0x21, 0x8, 0x8, 0xc2, 0xc4, 0xd2, 0xd4, 0xff

    byte: 0x6a, 0x8, 0x8, 0xc2, 0xc3, 0xd2, 0xd3, 0xff

    byte: 0x6a, 0x8, 0x8, 0xc2, 0xc4, 0xd2, 0xd4, 0xff

    byte: 0x61, 0x8, 0x8, 0xc2, 0xc4, 0xd2, 0xd4, 0xff

def ridley_page_A0DB:
    byte: 0xc, 0x8, 0x4, 0x14, 0x24, 0xff

def a0e1:
    byte: 0x0, 0x4, 0x4, 0x8a, 0xff

def a0e6:
    byte: 0x0, 0x4, 0x4, 0x8a, 0xff


//------------------------------------------[ Palette data ]------------------------------------------

def palette00:

    //Upper byte of PPU palette adress.
    byte: 0x3f
    //Lower byte of PPU palette adress.
    byte: 0x0
    //Palette data length.
    byte: 0x20
//The following values are written to the background palette:
    byte: 0xf, 0x20, 0x10, 0x0, 0xf, 0x21, 0x14, 0x13, 0xf, 0x28, 0x1b, 0x2, 0xf, 0x15, 0x16, 0x4
//The following values are written to the sprite palette:
    byte: 0xf, 0x16, 0x19, 0x27, 0xf, 0x12, 0x30, 0x21, 0xf, 0x14, 0x13, 0x29, 0xf, 0x13, 0x15, 0x27

    //End Palette00 info.
    byte: 0x0

def palette01:

    //Upper byte of PPU palette adress.
    byte: 0x3f
    //Lower byte of PPU palette adress.
    byte: 0x12
    //Palette data length.
    byte: 0x2
//The following values are written to the sprite palette:
    byte: 0x19, 0x27

    //End Palette01 info.
    byte: 0x0

def palette03:

    //Upper byte of PPU palette adress.
    byte: 0x3f
    //Lower byte of PPU palette adress.
    byte: 0x12
    //Palette data length.
    byte: 0x2
//The following values are written to the sprite palette:
    byte: 0x2c, 0x27

    //End Palette03 info.
    byte: 0x0

def palette02:

    //Upper byte of PPU palette adress.
    byte: 0x3f
    //Lower byte of PPU palette adress.
    byte: 0x12
    //Palette data length.
    byte: 0x2
//The following values are written to the sprite palette:
    byte: 0x19, 0x35

    //End Palette02 info.
    byte: 0x0

def palette04:

    //Upper byte of PPU palette adress.
    byte: 0x3f
    //Lower byte of PPU palette adress.
    byte: 0x12
    //Palette data length.
    byte: 0x2
//The following values are written to the sprite palette:
    byte: 0x2c, 0x24

    //End Palette04 info.
    byte: 0x0

def palette05:

    //Upper byte of PPU palette adress.
    byte: 0x3f
    //Lower byte of PPU palette adress.
    byte: 0x0
    //Palette data length.
    byte: 0x10
//The following values are written to the background palette:
    byte: 0xf, 0x20, 0x16, 0x4, 0xf, 0x21, 0x14, 0x13, 0xf, 0x27, 0x16, 0x2, 0xf, 0x15, 0x16, 0x4

    //End Palette05 info.
    byte: 0x0

def palette06:

    //Upper byte of PPU palette adress.
    byte: 0x3f
    //Lower byte of PPU palette adress.
    byte: 0x11
    //Palette data length.
    byte: 0x3
//The following values are written to the sprite palette:
    byte: 0x4, 0x9, 0x7

    //End Palette06 info.
    byte: 0x0

def palette07:

    //Upper byte of PPU palette adress.
    byte: 0x3f
    //Lower byte of PPU palette adress.
    byte: 0x11
    //Palette data length.
    byte: 0x3
//The following values are written to the sprite palette:
    byte: 0x5, 0x9, 0x17

    //End Palette07 info.
    byte: 0x0

def palette08:

    //Upper byte of PPU palette adress.
    byte: 0x3f
    //Lower byte of PPU palette adress.
    byte: 0x11
    //Palette data length.
    byte: 0x3
//The following values are written to the sprite palette:
    byte: 0x6, 0xa, 0x26

    //End Palette08 info.
    byte: 0x0

def palette09:

    //Upper byte of PPU palette adress.
    byte: 0x3f
    //Lower byte of PPU palette adress.
    byte: 0x11
    //Palette data length.
    byte: 0x3
//The following values are written to the sprite palette:
    byte: 0x16, 0x19, 0x27

    //End Palette09 info.
    byte: 0x0

def palette0a:

    //Upper byte of PPU palette adress.
    byte: 0x3f
    //Lower byte of PPU palette adress.
    byte: 0x0
    //Palette data length.
    byte: 0x4
//The following values are written to the background palette:
    byte: 0xf, 0x30, 0x30, 0x21

    //End Palette0A info.
    byte: 0x0

def palette0b:

    //Upper byte of PPU palette adress.
    byte: 0x3f
    //Lower byte of PPU palette adress.
    byte: 0x10
    //Palette data length.
    byte: 0x4
//The following values are written to the sprite palette:
    byte: 0xf, 0x15, 0x34, 0x17

    //End Palette0B info.
    byte: 0x0

def palette0c:

    //Upper byte of PPU palette adress.
    byte: 0x3f
    //Lower byte of PPU palette adress.
    byte: 0x10
    //Palette data length.
    byte: 0x4
//The following values are written to the sprite palette:
    byte: 0xf, 0x15, 0x34, 0x19

    //End Palette0C info.
    byte: 0x0

def palette0d:

    //Upper byte of PPU palette adress.
    byte: 0x3f
    //Lower byte of PPU palette adress.
    byte: 0x10
    //Palette data length.
    byte: 0x4
//The following values are written to the sprite palette:
    byte: 0xf, 0x15, 0x34, 0x28

    //End Palette0D info.
    byte: 0x0

def palette0e:

    //Upper byte of PPU palette adress.
    byte: 0x3f
    //Lower byte of PPU palette adress.
    byte: 0x10
    //Palette data length.
    byte: 0x4
//The following values are written to the sprite palette:
    byte: 0xf, 0x15, 0x34, 0x29

    //End Palette0E info.
    byte: 0x0

//----------------------------[ Room and structure pointer tables ]-----------------------------------

def rmptrtbl:

    word: ridley_page_A23F, ridley_page_A23F, 0xa247, 0xa273, 0xa29e, 0xa2b2, 0xa2e4, 0xa30f
    word: ridley_page_A34D, 0xa383, 0xa3b8, 0xa3f9, 0xa429, 0xa455, 0xa48c, 0xa4c3
    word: ridley_page_A4F6, 0xa525, 0xa555, 0xa5a1, 0xa5e5, 0xa618, 0xa653, 0xa67c
    word: ridley_page_A6A9, 0xa6d6, 0xa6ff, 0xa72c, 0xa76b, 0xa79d, 0xa7cf, 0xa7fc
    word: ridley_page_A826, 0xa849, 0xa867, 0xa88d, 0xa8bf, 0xa8ec, 0xa92a, 0xa95d
    word: ridley_page_A97B, 0xa9a5

def strctptrtbl:

    word: ridley_page_A9BF, 0xa9d2, 0xa9d9, 0xa9e0, 0xa9f9, 0xa9fd, 0xaa02, 0xaa07
    word: ridley_page_AA17, 0xaa2c, 0xaa32, 0xaa3d, 0xaa57, 0xaa64, 0xaa6d, 0xaa78
    word: ridley_page_AA83, 0xaa86, 0xaa8c, 0xaa96, 0xaaab, 0xaac7, 0xaad2, 0xaad9
    word: ridley_page_AAEE, 0xab0a, 0xab11, 0xab1a, 0xab1d

//-----------------------------------[ Special items table ]-----------------------------------------

//The way the bytes work int the special items table is as follows:
//Long entry(one with a data word in it):
//Byte 0=Y coordinate of room on the world map.
//Word 0=Address of next entry in the table that has a different Y coordinate.--> 
//    $FFFF=No more items with different Y coordinates.
//Byte 1=X coordinate of room in the world map.
//Byte 2=byte offset-1 of next special item in the table that has the same-->
//    Y coordinate(short entry). $FF=No more items with different X-->
//    coordinates until next long entry.
//Byte 3=Item type. See list below for special item types.
//Bytes 4 to end of entry(ends with #$00)=Data bytes for special item(s).-->
//    It is possible to have multiple special items in one room.
//Short entry(one without a data word in it):
//Byte 0=X coordinate of room in the world map(Y coordinate is the same-->
//    as the last long item entry in the table).
//Byte 1=byte offset-1 of next special item in the table that has the same-->
//    Y coordinate(short entry). $FF=No more items with different X-->
//    coordinates until next long entry.
//Byte 2=Item type. See list below for special item types.
//Bytes 3 to end of entry(ends with #$00)=Data bytes for special item(s).-->
//    It is possible to have multiple special items in one room.
//
//Special item types:
//#$01=Squeept.
//#$02=Power up.
//#$03=Mellows, Memus or Melias.
//#$04=Elevator.
//#$05=Mother brain room cannon.
//#$06=Mother brain.
//#$07=Zeebetite.
//#$08=Rinka.
//#$09=Door.
//#$0A=Palette change room.

def specitmstbl:


//Missiles.
    byte: 0x18
    word: ridley_page_A21B
    byte: 0x12, 0x6, 0x2, 0x9, 0x6d, 0x0

//Elevator to Norfair.
    byte: 0x19, 0xff, 0x4, 0x84, 0x0

//Energy tank.
def ridley_page_A21B:
    byte: 0x19
    word: ridley_page_A224
    byte: 0x11, 0xff, 0x2, 0x8, 0x74, 0x0

//Missiles.
def ridley_page_A224:
    byte: 0x1b
    word: ridley_page_A22D
    byte: 0x18, 0xff, 0x2, 0x9, 0x6d, 0x0

//Energy tank.
def ridley_page_A22D:
    byte: 0x1d
    word: ridley_page_A236
    byte: 0xf, 0xff, 0x2, 0x8, 0x66, 0x0

//Missiles.
def ridley_page_A236:
    byte: 0x1e
    word: 0xffff
    byte: 0x14, 0xff, 0x2, 0x9, 0x6d, 0x0

//-----------------------------------------[ Room definitions ]---------------------------------------

//The first byte of the room definitions is attribute table data and is used to set the base color of
//the room. The object data is grouped into 3 byte segments and represents a structure in the room.
//The first byte of the structure data has the format yyyyxxxx and contains the y, x location of the
//structure in the room(measured in tiles). The second byte is an index into the StrctPtrTbl and
//identifies which structure to use.  The third byte is an attribute table byte and determines the
//color of the structure.  Most of the time, this byte will have the same value as the attribute byte
//for the base color of the room. Having a room base color byte reduces the calculations required to
//find the proper color for each structure as the structure attribute byte is skipped if it is the same
//as the room attribute byte. #$FD marks the end of the room objects portion of the room definition.
//Using the byte #$FE can be used as an empty place holder in the room data.  For example, if you
//wanted to remove a structure from a room, simply replace the three bytes associated with the structure
//with #$FE. The next portion of the room definition describes the enemies and doors in the room. The
//number of data bytes and their functions vary depending on what type of item is being loaded.

//Room #$00
def ridley_page_A23F:
    //Attribute table data.
    byte: 0x2
//Room object data:
    byte: 0x7, 0x3, 0x2, 0x87, 0x3, 0x2, 0xff

//Room #$01
    //Attribute table data.
    byte: 0x3
//Room object data:
    byte: 0x0, 0x7, 0x3, 0x1, 0x8, 0x3, 0x6, 0x9, 0x3, 0xb, 0x8, 0x3, 0xe, 0x7, 0x3, 0x50
    byte: 0x7, 0x3, 0x5e, 0x7, 0x3, 0x93, 0xa, 0x0, 0x96, 0x9, 0x3, 0x9c, 0xa, 0x0, 0xa0, 0x7
    byte: 0x3, 0xae, 0x7, 0x3, 0xe2, 0x8, 0x3, 0xea, 0x8, 0x3, 0xff

//Room #$02
    //Attribute table data.
    byte: 0x3
//Room object data:
    byte: 0x0, 0x7, 0x3, 0xe, 0x7, 0x3, 0x46, 0x8, 0x3, 0x50, 0x1, 0x2, 0x5f, 0x1, 0x2, 0x80
    byte: 0x8, 0x3, 0x84, 0x9, 0x3, 0x88, 0x9, 0x3, 0x8c, 0x8, 0x3, 0xb0, 0x8, 0x3, 0xbc, 0x8
    byte: 0x3, 0xd4, 0x0, 0x3, 0xfd
//Room enemy/door data:
    byte: 0x2, 0xa1, 0x2, 0xb1, 0xff

//Room #$03
    //Attribute table data.
    byte: 0x3
//Room object data:
    byte: 0x0, 0x7, 0x3, 0xe, 0x7, 0x3, 0x50, 0x7, 0x3, 0x5e, 0x7, 0x3, 0xa0, 0x7, 0x3, 0xae
    byte: 0x7, 0x3, 0xff

//Room #$04
    //Attribute table data.
    byte: 0x3
//Room object data:
    byte: 0x0, 0x8, 0x3, 0x4, 0x8, 0x3, 0x8, 0x8, 0x3, 0xc, 0x8, 0x3, 0x40, 0x8, 0x3, 0x44
    byte: 0x8, 0x3, 0x48, 0x8, 0x3, 0x4c, 0x8, 0x3, 0x70, 0x8, 0x3, 0x74, 0x8, 0x3, 0x78, 0x8
    byte: 0x3, 0x7c, 0x8, 0x3, 0xb0, 0x8, 0x3, 0xb4, 0x8, 0x3, 0xb8, 0x8, 0x3, 0xbc, 0x8, 0x3
    byte: 0xff

//Room #$05
    //Attribute table data.
    byte: 0x3
//Room object data:
    byte: 0x0, 0x7, 0x3, 0x5, 0x8, 0x3, 0xe, 0x7, 0x3, 0x50, 0x1, 0x2, 0x5f, 0x1, 0x2, 0x68
    byte: 0x8, 0x3, 0x80, 0x7, 0x3, 0x82, 0x9, 0x3, 0x8c, 0x9, 0x3, 0x8e, 0x7, 0x3, 0xae, 0x7
    byte: 0x3, 0xb0, 0x7, 0x3, 0xfd
//Room enemy/door data:
    byte: 0x2, 0xa1, 0x2, 0xb1, 0xff

//Room #$06
    //Attribute table data.
    byte: 0x3
//Room object data:
    byte: 0x0, 0x7, 0x3, 0xe, 0x7, 0x3, 0x26, 0x4, 0x3, 0x35, 0x9, 0x3, 0x50, 0x1, 0x2, 0x5e
    byte: 0x7, 0x3, 0x80, 0x7, 0x3, 0x82, 0x9, 0x3, 0x89, 0x9, 0x3, 0xae, 0x7, 0x3, 0xb2, 0x5
    byte: 0x1, 0xc4, 0x9, 0x3, 0xd0, 0x7, 0x3, 0xdc, 0x4, 0x3, 0xeb, 0x9, 0x3, 0xfd
//Room enemy/door data:
    byte: 0x2, 0xb1, 0x7, 0x87, 0x27, 0x17, 0x87, 0xdd, 0x21, 0x86, 0xb5, 0x31, 0x86, 0x7b, 0xff

//Room #$07
def ridley_page_A34D:
    //Attribute table data.
    byte: 0x3
//Room object data:
    byte: 0x0, 0x7, 0x3, 0xe, 0x7, 0x3, 0x22, 0x5, 0x1, 0x26, 0x9, 0x3, 0x50, 0x7, 0x3, 0x5e
    byte: 0x7, 0x3, 0x62, 0x9, 0x3, 0x79, 0x9, 0x3, 0x95, 0x4, 0x3, 0xa0, 0x7, 0x3, 0xa4, 0x9
    byte: 0x3, 0xae, 0x7, 0x3, 0xe8, 0x9, 0x3, 0xfd
//Room enemy/door data:
    byte: 0x51, 0x6, 0x17, 0x1, 0x86, 0x6b, 0x11, 0x86, 0xda, 0x27, 0x87, 0x96, 0xff

//Room #$08
    //Attribute table data.
    byte: 0x3
//Room object data:
    byte: 0x0, 0x7, 0x3, 0xe, 0x7, 0x3, 0x26, 0x9, 0x3, 0x2d, 0x6, 0x1, 0x50, 0x1, 0x2, 0x5c
    byte: 0x9, 0x3, 0x5e, 0x7, 0x3, 0x80, 0x8, 0x3, 0x84, 0x8, 0x3, 0x88, 0x8, 0x3, 0x8c, 0x8
    byte: 0x3, 0xc0, 0x8, 0x3, 0xcc, 0x8, 0x3, 0xd4, 0x0, 0x3, 0xfd
//Room enemy/door data:
    byte: 0x2, 0xb1, 0x31, 0x86, 0x18, 0x41, 0x86, 0x78, 0xff

//Room #$09
    //Attribute table data.
    byte: 0x0
//Room object data:
    byte: 0x0, 0x7, 0x3, 0x7, 0x19, 0x0, 0xe, 0x7, 0x3, 0x45, 0x19, 0x0, 0x4c, 0x19, 0x0, 0x50
    byte: 0x7, 0x3, 0x5f, 0x1, 0x2, 0x72, 0x19, 0x0, 0x8c, 0x9, 0x3, 0x8e, 0x7, 0x3, 0xa0, 0x7
    byte: 0x3, 0xab, 0x19, 0x0, 0xb4, 0x19, 0x0, 0xbe, 0x7, 0x3, 0xe8, 0x19, 0x0, 0xfd
//Room enemy/door data:
    byte: 0x2, 0xa1, 0x1, 0x6, 0x34, 0x11, 0x86, 0x3c, 0x21, 0x6, 0x9b, 0x31, 0x86, 0xa4, 0x51, 0x86
    byte: 0xd8, 0xff

//Room #$0A
    //Attribute table data.
    byte: 0x3
//Room object data:
    byte: 0x0, 0x7, 0x3, 0xe, 0x7, 0x3, 0x16, 0x19, 0x0, 0x50, 0x7, 0x3, 0x53, 0x19, 0x0, 0x5e
    byte: 0x7, 0x3, 0x86, 0x19, 0x0, 0xa0, 0x7, 0x3, 0xae, 0x7, 0x3, 0xb9, 0x19, 0x0, 0xbd, 0x6
    byte: 0x1, 0xfd
//Room enemy/door data:
    byte: 0x41, 0x86, 0x6, 0x1, 0x6, 0x43, 0x11, 0x86, 0x76, 0x21, 0x86, 0xa9, 0xff

//Room #$0B
    //Attribute table data.
    byte: 0x3
//Room object data:
    byte: 0x0, 0x7, 0x3, 0xe, 0x7, 0x3, 0x50, 0x7, 0x3, 0x5f, 0x1, 0x2, 0x80, 0x8, 0x3, 0x84
    byte: 0x8, 0x3, 0x88, 0x9, 0x3, 0x8c, 0x8, 0x3, 0xc0, 0x8, 0x3, 0xcc, 0x8, 0x3, 0xd4, 0x0
    byte: 0x3, 0xfd
//Room enemy/door data:
    byte: 0x2, 0xa1, 0x31, 0x82, 0x74, 0x41, 0x82, 0x79, 0xff

//Room #$0C
    //Attribute table data.
    byte: 0x0
//Room object data:
    byte: 0x0, 0xb, 0x0, 0x4, 0xb, 0x0, 0x8, 0xb, 0x0, 0xc, 0xb, 0x0, 0x50, 0x1, 0x2, 0x5f
    byte: 0x1, 0x2, 0x80, 0xb, 0x0, 0x82, 0xb, 0x0, 0x86, 0xc, 0x0, 0x88, 0xb, 0x0, 0x8c, 0xb
    byte: 0x0, 0xc0, 0xb, 0x0, 0xc2, 0xb, 0x0, 0xc6, 0xc, 0x0, 0xd8, 0xb, 0x0, 0xdc, 0xb, 0x0
    byte: 0xfd
//Room enemy/door data:
    byte: 0x2, 0xa0, 0x2, 0xb1, 0xff

//Room #$0D
    //Attribute table data.
    byte: 0x0
//Room object data:
    byte: 0x0, 0xb, 0x0, 0x4, 0xb, 0x0, 0x8, 0xb, 0x0, 0xc, 0xb, 0x0, 0xe, 0xd, 0x0, 0x1e
    byte: 0xd, 0x0, 0x50, 0x1, 0x2, 0x5f, 0x1, 0x2, 0x80, 0xb, 0x0, 0x84, 0xb, 0x0, 0x88, 0xb
    byte: 0x0, 0x8c, 0xb, 0x0, 0xc0, 0xb, 0x0, 0xc4, 0xb, 0x0, 0xc8, 0xb, 0x0, 0xcc, 0xb, 0x0
    byte: 0xfd
//Room enemy/door data:
    byte: 0x2, 0xa1, 0x2, 0xb1, 0xff

//Room #$0E
    //Attribute table data.
    byte: 0x0
//Room object data:
    byte: 0x0, 0xe, 0x0, 0x4, 0xe, 0x0, 0x8, 0xe, 0x0, 0xc, 0xe, 0x0, 0x7d, 0xa, 0x0, 0xb0
    byte: 0xb, 0x0, 0xb4, 0xb, 0x0, 0xb8, 0xc, 0x0, 0xb9, 0xb, 0x0, 0xbe, 0xb, 0x0, 0xbf, 0xc
    byte: 0x0, 0xd0, 0x0, 0x3, 0xd8, 0x0, 0x3, 0xfd
//Room enemy/door data:
    byte: 0x51, 0x80, 0x27, 0x1, 0x2, 0xa4, 0x11, 0x2, 0xaa, 0xff

//Room #$0F
def ridley_page_A4F6:
    //Attribute table data.
    byte: 0x0
//Room object data:
    byte: 0x0, 0xe, 0x0, 0x4, 0xe, 0x0, 0x8, 0xe, 0x0, 0xb, 0xe, 0x0, 0xf, 0xa, 0x0, 0x5f
    byte: 0x2, 0x2, 0x8c, 0x8, 0x3, 0xcc, 0x8, 0x3, 0xd0, 0xf, 0x3, 0xd4, 0x0, 0x3, 0xd8, 0xf
    byte: 0x3, 0xfd
//Room enemy/door data:
    byte: 0x2, 0xa2, 0x51, 0x80, 0x27, 0x21, 0x80, 0x29, 0x11, 0x80, 0x2b, 0xff

//Room #$10
    //Attribute table data.
    byte: 0x3
//Room object data:
    byte: 0x0, 0x8, 0x3, 0x4, 0x8, 0x3, 0x8, 0xe, 0x0, 0xc, 0xe, 0x0, 0x40, 0x8, 0x3, 0x42
    byte: 0xb, 0x0, 0x70, 0x8, 0x3, 0x72, 0xb, 0x0, 0x76, 0xa, 0x0, 0xb0, 0x8, 0x3, 0xb4, 0x8
    byte: 0x3, 0xd8, 0xf, 0x3, 0xdc, 0xf, 0x3, 0xfd
//Room enemy/door data:
    byte: 0x31, 0x80, 0x2e, 0x41, 0x80, 0x2b, 0xff

//Room #$11
    //Attribute table data.
    byte: 0x3
//Room object data:
    byte: 0x0, 0x7, 0x3, 0x2, 0x11, 0x3, 0x6, 0x11, 0x3, 0xa, 0x11, 0x3, 0xe, 0x7, 0x3, 0x13
    byte: 0x10, 0x3, 0x14, 0x12, 0x3, 0x1c, 0x10, 0x3, 0x22, 0xa, 0x0, 0x50, 0x2, 0x2, 0x5f, 0x2
    byte: 0x2, 0x80, 0x7, 0x3, 0x84, 0x11, 0x3, 0x8f, 0x7, 0x3, 0x92, 0x19, 0x0, 0x95, 0x11, 0x3
    byte: 0x99, 0x11, 0x3, 0xae, 0x19, 0x0, 0xc0, 0x7, 0x3, 0xd2, 0x0, 0x3, 0xd7, 0x0, 0x3, 0xdf
    byte: 0x7, 0x3, 0xfd
//Room enemy/door data:
    byte: 0x2, 0xa1, 0x2, 0xb2, 0x1, 0x49, 0x66, 0xff

//Room #$12
    //Attribute table data.
    byte: 0x1
//Room object data:
    byte: 0x0, 0x7, 0x3, 0x1, 0xe, 0x0, 0x5, 0xe, 0x0, 0x9, 0xe, 0x0, 0xd, 0xe, 0x0, 0x22
    byte: 0x11, 0x3, 0x26, 0x11, 0x3, 0x50, 0x2, 0x2, 0x80, 0x7, 0x3, 0x81, 0x11, 0x3, 0x8b, 0xa
    byte: 0x0, 0xa7, 0xa, 0x0, 0xb0, 0x7, 0x3, 0xbf, 0xa, 0x0, 0xd2, 0x0, 0x3, 0xda, 0x0, 0x3
    byte: 0xfd
//Room enemy/door data:
    byte: 0x2, 0xb1, 0x11, 0x86, 0x97, 0x21, 0x6, 0x7b, 0x31, 0x86, 0xaf, 0x41, 0x80, 0x35, 0x51, 0x83
    byte: 0x3e, 0xff

//Room #$13
    //Attribute table data.
    byte: 0x1
//Room object data:
    byte: 0x0, 0xe, 0x0, 0x4, 0xe, 0x0, 0x8, 0xe, 0x0, 0xc, 0xe, 0x0, 0x86, 0xa, 0x0, 0x8a
    byte: 0xa, 0x0, 0xa2, 0xa, 0x0, 0xa3, 0xa, 0x0, 0xbe, 0xa, 0x0, 0xd0, 0x0, 0x3, 0xd8, 0x0
    byte: 0x3, 0xfd
//Room enemy/door data:
    byte: 0x1, 0x86, 0x92, 0x11, 0x86, 0x76, 0x21, 0x86, 0x7a, 0x31, 0x6, 0xae, 0x41, 0x80, 0x27, 0xff

//Room #$14
    //Attribute table data.
    byte: 0x1
//Room object data:
    byte: 0x0, 0xe, 0x0, 0x4, 0xe, 0x0, 0x8, 0xe, 0x0, 0xc, 0xb, 0x0, 0x5f, 0x1, 0x2, 0x85
    byte: 0xa, 0x0, 0x86, 0xa, 0x0, 0x8c, 0x11, 0x3, 0x9e, 0x7, 0x3, 0xa2, 0xa, 0x0, 0xb9, 0xa
    byte: 0x0, 0xce, 0x7, 0x3, 0xd0, 0x0, 0x3, 0xd6, 0x0, 0x3, 0xfd
//Room enemy/door data:
    byte: 0x2, 0xa1, 0x51, 0x86, 0x92, 0x1, 0x86, 0x75, 0x21, 0x80, 0x23, 0x31, 0x80, 0x28, 0xff

//Room #$15
    //Attribute table data.
    byte: 0x1
//Room object data:
    byte: 0x0, 0x14, 0x1, 0x8, 0x14, 0x1, 0x10, 0x13, 0x1, 0x50, 0x1, 0x2, 0x80, 0x13, 0x1, 0x94
    byte: 0x5, 0x1, 0xc0, 0x14, 0x1, 0xca, 0x14, 0x1, 0xd8, 0x0, 0x3, 0xfd
//Room enemy/door data:
    byte: 0x2, 0xb1, 0x41, 0x80, 0x37, 0x51, 0x80, 0x3c, 0x1, 0x80, 0x3e, 0xff

//Room #$16
    //Attribute table data.
    byte: 0x1
//Room object data:
    byte: 0x0, 0x14, 0x1, 0x8, 0x14, 0x1, 0x30, 0x14, 0x1, 0x38, 0x14, 0x1, 0x90, 0x14, 0x1, 0x92
    byte: 0x4, 0x3, 0x94, 0x4, 0x3, 0x98, 0x14, 0x1, 0x9b, 0x4, 0x3, 0xc0, 0x14, 0x1, 0xc8, 0x14
    byte: 0x1, 0xfd
//Room enemy/door data:
    byte: 0x17, 0x87, 0x93, 0x27, 0x7, 0x95, 0x37, 0x87, 0x9c, 0xff

//Room #$17
def ridley_page_A6A9:
    //Attribute table data.
    byte: 0x1
//Room object data:
    byte: 0x0, 0x14, 0x1, 0x8, 0x14, 0x1, 0x30, 0x14, 0x1, 0x38, 0x14, 0x1, 0x52, 0x13, 0x1, 0x5a
    byte: 0x13, 0x1, 0x61, 0x6, 0x1, 0xc0, 0x14, 0x1, 0xc3, 0x4, 0x3, 0xc8, 0x14, 0x1, 0xcb, 0x4
    byte: 0x3, 0xfd
//Room enemy/door data:
    byte: 0x47, 0x87, 0xc4, 0x57, 0x87, 0xcc, 0x1, 0x80, 0x67, 0xff

//Room #$18
    //Attribute table data.
    byte: 0x1
//Room object data:
    byte: 0x0, 0x14, 0x1, 0x8, 0x14, 0x1, 0x1c, 0x13, 0x1, 0x5f, 0x1, 0x2, 0x8c, 0x13, 0x1, 0xc0
    byte: 0x14, 0x1, 0xca, 0x14, 0x1, 0xd0, 0x0, 0x3, 0xd5, 0x0, 0x3, 0xfd
//Room enemy/door data:
    byte: 0x2, 0xa1, 0x11, 0x80, 0x33, 0x21, 0x0, 0x35, 0x31, 0x80, 0x37, 0xff

//Room #$19
    //Attribute table data.
    byte: 0x0
//Room object data:
    byte: 0x0, 0x14, 0x1, 0x8, 0x14, 0x1, 0x30, 0x14, 0x1, 0x38, 0x14, 0x1, 0xd0, 0x0, 0x3, 0xd2
    byte: 0x13, 0x1, 0xd7, 0x13, 0x1, 0xd8, 0x4, 0x3, 0xdb, 0x0, 0x3, 0xdc, 0x13, 0x1, 0xfd
//Room enemy/door data:
    byte: 0x41, 0x0, 0x64, 0x51, 0x80, 0x68, 0x1, 0x0, 0x6c, 0x17, 0x87, 0xd9, 0xff

//Room #$1A
    //Attribute table data.
    byte: 0x1
//Room object data:
    byte: 0x0, 0x14, 0x1, 0x8, 0x14, 0x1, 0x30, 0x13, 0x1, 0x34, 0x13, 0x1, 0x38, 0x13, 0x1, 0x3c
    byte: 0x13, 0x1, 0x40, 0x16, 0x1, 0x41, 0x15, 0x1, 0x44, 0x15, 0x1, 0x48, 0x15, 0x1, 0x4c, 0x15
    byte: 0x1, 0x4f, 0x16, 0x1, 0x90, 0x14, 0x1, 0x92, 0x4, 0x3, 0x98, 0x14, 0x1, 0x9b, 0x4, 0x3
    byte: 0xc0, 0x14, 0x1, 0xc8, 0x14, 0x1, 0xfd
//Room enemy/door data:
    byte: 0x27, 0x87, 0x93, 0x37, 0x87, 0x9c, 0xff

//Room #$1B
    //Attribute table data.
    byte: 0x2
//Room object data:
    byte: 0x0, 0x18, 0x2, 0x8, 0x18, 0x2, 0x20, 0x18, 0x2, 0x28, 0xa, 0x0, 0x50, 0x1, 0x2, 0x5f
    byte: 0x19, 0x0, 0x80, 0x17, 0x2, 0x8c, 0x19, 0x0, 0xc0, 0x18, 0x2, 0xca, 0x18, 0x2, 0xd8, 0x0
    byte: 0x3, 0xfd
//Room enemy/door data:
    byte: 0x2, 0xb1, 0x1, 0x8c, 0x39, 0x11, 0xc, 0x3d, 0x21, 0x8c, 0x6b, 0x31, 0xc, 0x66, 0xff

//Room #$1C
    //Attribute table data.
    byte: 0x2
//Room object data:
    byte: 0x0, 0x18, 0x2, 0x8, 0x18, 0x2, 0x28, 0x18, 0x2, 0x5f, 0x1, 0x2, 0x70, 0x19, 0x0, 0x8c
    byte: 0x17, 0x2, 0x94, 0x19, 0x0, 0xb8, 0x17, 0x2, 0xbc, 0x17, 0x2, 0xc0, 0x18, 0x2, 0xd0, 0x0
    byte: 0x3, 0xfd
//Room enemy/door data:
    byte: 0x2, 0xa1, 0x1, 0x8c, 0x33, 0x11, 0xc, 0x36, 0x41, 0x8c, 0x92, 0x51, 0xc, 0xa6, 0xff

//Room #$1D
    //Attribute table data.
    byte: 0x0
//Room object data:
    byte: 0x0, 0x18, 0x2, 0x8, 0x18, 0x2, 0x30, 0xa, 0x0, 0x49, 0x19, 0x0, 0x55, 0xa, 0x0, 0x5d
    byte: 0xa, 0x0, 0xa0, 0x18, 0x2, 0xa8, 0x18, 0x2, 0xd0, 0x0, 0x3, 0xd8, 0x0, 0x3, 0xfd
//Room enemy/door data:
    byte: 0x21, 0x8c, 0x38, 0x31, 0xc, 0x97, 0x41, 0x8c, 0x99, 0x51, 0xc, 0x9b, 0xff

//Room #$1E
    //Attribute table data.
    byte: 0x2
//Room object data:
    byte: 0x0, 0x17, 0x2, 0x4, 0x17, 0x2, 0x8, 0x17, 0x2, 0xc, 0x17, 0x2, 0x70, 0x17, 0x2, 0x74
    byte: 0x17, 0x2, 0x78, 0x17, 0x2, 0x7c, 0x17, 0x2, 0xd0, 0x0, 0x3, 0xd8, 0x0, 0x3, 0xfd
//Room enemy/door data:
    byte: 0x1, 0x8c, 0x42, 0x11, 0xc, 0x45, 0x21, 0x8c, 0x48, 0xff

//Room #$1F
def ridley_page_A826:
    //Attribute table data.
    byte: 0x0
//Room object data:
    byte: 0x0, 0xb, 0x0, 0x4, 0x18, 0x2, 0xc, 0xb, 0x0, 0x50, 0x1, 0x2, 0x80, 0xb, 0x0, 0xc0
    byte: 0x18, 0x2, 0xc8, 0x18, 0x2, 0xfd
//Room enemy/door data:
    byte: 0x2, 0xb1, 0x21, 0x82, 0x5b, 0x31, 0x3, 0x85, 0x41, 0x83, 0x88, 0xff

//Room #$20
    //Attribute table data.
    byte: 0x2
//Room object data:
    byte: 0x20, 0x18, 0x2, 0x28, 0x18, 0x2, 0xa0, 0x18, 0x2, 0xa8, 0x18, 0x2, 0xd0, 0x0, 0x3, 0xd8
    byte: 0x0, 0x3, 0xfd
//Room enemy/door data:
    byte: 0x1, 0x82, 0x98, 0x11, 0x2, 0x9e, 0x41, 0x83, 0x53, 0xff

//Room #$21
    //Attribute table data.
    byte: 0x0
//Room object data:
    byte: 0x0, 0xb, 0x0, 0x4, 0x18, 0x2, 0xc, 0xb, 0x0, 0x5f, 0x1, 0x2, 0x8c, 0xb, 0x0, 0xc0
    byte: 0x18, 0x2, 0xc8, 0x18, 0x2, 0xfd
//Room enemy/door data:
    byte: 0x2, 0xa1, 0x11, 0x2, 0x57, 0x31, 0x83, 0x85, 0x41, 0x83, 0x88, 0x51, 0x3, 0x8a, 0xff

//Room #$22
    //Attribute table data.
    byte: 0x0
//Room object data:
    byte: 0x0, 0x7, 0x3, 0x2, 0x12, 0x3, 0xa, 0x12, 0x3, 0x50, 0x1, 0x2, 0x80, 0x7, 0x3, 0x82
    byte: 0xb, 0x0, 0x8f, 0xb, 0x0, 0xb0, 0x7, 0x3, 0xb9, 0xb, 0x0, 0xd2, 0x0, 0x3, 0xda, 0x0
    byte: 0x3, 0xfd
//Room enemy/door data:
    byte: 0x2, 0xb1, 0x1, 0x80, 0x18, 0x11, 0x80, 0x1e, 0x21, 0x86, 0xab, 0x31, 0x86, 0x7f, 0xff

//Room #$23
    //Attribute table data.
    byte: 0x1
//Room object data:
    byte: 0x0, 0x12, 0x3, 0x8, 0x12, 0x3, 0x92, 0x4, 0x3, 0x94, 0x4, 0x3, 0x99, 0xb, 0x0, 0xa2
    byte: 0xb, 0x0, 0xbf, 0xb, 0x0, 0xd0, 0x0, 0x3, 0xd8, 0x0, 0x3, 0xfd
//Room enemy/door data:
    byte: 0x7, 0x87, 0x93, 0x11, 0x0, 0x1a, 0x21, 0x80, 0x1f, 0x47, 0x87, 0x95, 0x51, 0x86, 0x8b, 0xff

//Room #$24
    //Attribute table data.
    byte: 0x2
//Room object data:
    byte: 0x0, 0xb, 0x0, 0x4, 0xe, 0x0, 0x8, 0xe, 0x0, 0xc, 0xe, 0x0, 0x37, 0xa, 0x0, 0x50
    byte: 0x1, 0x2, 0x77, 0xa, 0x0, 0x80, 0x17, 0x2, 0x8d, 0x1a, 0x1, 0xc0, 0x18, 0x2, 0xc4, 0x1b
    byte: 0x2, 0xc8, 0x18, 0x2, 0xd4, 0x1c, 0x2, 0xd8, 0x1c, 0x2, 0xdc, 0x1c, 0x2, 0xfd
//Room enemy/door data:
    byte: 0x2, 0xb0, 0x1, 0x82, 0x27, 0x11, 0x82, 0x2b, 0x21, 0x83, 0xb5, 0x31, 0x83, 0xba, 0xff

//Room #$25
    //Attribute table data.
    byte: 0x2
//Room object data:
    byte: 0x0, 0xe, 0x0, 0x4, 0xe, 0x0, 0x8, 0xe, 0x0, 0xc, 0xe, 0x0, 0x87, 0x1a, 0x1, 0xc0
    byte: 0x18, 0x2, 0xc8, 0x18, 0x2, 0xcf, 0x1b, 0x2, 0xd0, 0x1c, 0x2, 0xd4, 0x1c, 0x2, 0xd8, 0x1c
    byte: 0x2, 0xdc, 0x1c, 0x2, 0xfd
//Room enemy/door data:
    byte: 0x21, 0x82, 0x26, 0x31, 0x2, 0x2b, 0x41, 0x83, 0xb3, 0x51, 0x3, 0xbc, 0xff

//Room #$26
    //Attribute table data.
    byte: 0x1
//Room object data:
    byte: 0x0, 0x14, 0x1, 0x8, 0x14, 0x1, 0xb2, 0x4, 0x3, 0xc0, 0x14, 0x1, 0xc9, 0x14, 0x1, 0xd0
    byte: 0x0, 0x3, 0xd8, 0x0, 0x3, 0xfd
//Room enemy/door data:
    byte: 0x7, 0x87, 0xb3, 0x11, 0x3, 0x29, 0xff

//Room #$27
def ridley_page_A97B:
    //Attribute table data.
    byte: 0x1
//Room object data:
    byte: 0x0, 0x14, 0x1, 0x8, 0x14, 0x1, 0x10, 0xa, 0x0, 0x60, 0xa, 0x0, 0xb0, 0xa, 0x0, 0xb5
    byte: 0x4, 0x3, 0xc1, 0x14, 0x1, 0xca, 0x14, 0x1, 0xd1, 0x0, 0x3, 0xd8, 0x0, 0x3, 0xfd
//Room enemy/door data:
    byte: 0x27, 0x87, 0xb6, 0x11, 0x82, 0xb7, 0x11, 0x80, 0x27, 0xff

//Room #$28
    //Attribute table data.
    byte: 0x0
//Room object data:
    byte: 0x0, 0xb, 0x0, 0xc, 0xb, 0x0, 0x50, 0x1, 0x2, 0x5c, 0xb, 0x0, 0x80, 0xb, 0x0, 0xaf
    byte: 0xb, 0x0, 0xd0, 0xb, 0x0, 0xfd
//Room enemy/door data:
    byte: 0x2, 0xb1, 0xff

//---------------------------------------[ Structure definitions ]------------------------------------

//The first byte of the structure definition states how many macros are in the first row of the
//structure. The the number of bytes after the macro number byte is equal to the value of the macro
//number byte and those bytes define what each macro in the row are. For example, if the macro number
//byte is #$08, the next 8 bytes represent 8 macros. The macro description bytes are the macro numbers
//and are multiplied by 4 to find the index to the desired macro in MacroDefs.  Any further bytes in
//the structure definition represent the next rows.  #$FF marks the end of the structure definition.

//Structure #$00
def ridley_page_A9BF:
    byte: 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1
    byte: 0x1, 0x1, 0xff

//Structure #$01
    byte: 0x1, 0x12, 0x1, 0x12, 0x1, 0x12, 0xff

//Structure #$02
    byte: 0x1, 0x13, 0x1, 0x13, 0x1, 0x13, 0xff

//Structure #$03
    byte: 0x2, 0x2, 0x3, 0x2, 0x2, 0x3, 0x2, 0x2, 0x3, 0x2, 0x2, 0x3, 0x2, 0x2, 0x3
    byte: 0x2, 0x2, 0x3, 0x2, 0x2, 0x3, 0x2, 0x2, 0x3, 0xff

//Structure #$04
    byte: 0x2, 0x6, 0x7, 0xff

//Structure #$05
    byte: 0x1, 0xa, 0x1, 0xa, 0xff

//Structure #$06
    byte: 0x1, 0xb, 0x1, 0xb, 0xff

//Structure #$07
    byte: 0x2, 0x8, 0x8, 0x2, 0x8, 0x5, 0x2, 0x9, 0x8, 0x2, 0x8, 0x8, 0x2, 0x5, 0x8, 0xff

//Structure #$08
def ridley_page_AA17:
    byte: 0x4, 0x8, 0x8, 0x8, 0x8, 0x4, 0x8, 0x9, 0x9, 0x8, 0x4, 0x8, 0x9, 0x9, 0x8, 0x4
    byte: 0x8, 0x8, 0x8, 0x8, 0xff

//Structure #$09
    byte: 0x4, 0x8, 0x9, 0x9, 0x8, 0xff

//Structure #$0A
    byte: 0x1, 0x14, 0x1, 0x5, 0x1, 0x5, 0x1, 0x5, 0x1, 0x14, 0xff

//Structure #$0B
    byte: 0x4, 0x15, 0x15, 0x15, 0x15, 0x4, 0x15, 0x15, 0x15, 0x15, 0x4, 0x15, 0x15, 0x15, 0x15, 0x4
    byte: 0x15, 0x15, 0x15, 0x15, 0x4, 0x15, 0x15, 0x15, 0x15, 0xff

//Structure #$0C
    byte: 0x2, 0x16, 0x16, 0x2, 0x16, 0x16, 0x2, 0x16, 0x16, 0x2, 0x16, 0x16, 0xff

//Structure #$0D
    byte: 0x1, 0x17, 0x1, 0x17, 0x1, 0x17, 0x1, 0x17, 0xff

//Structure #$0E
    byte: 0x4, 0x11, 0x11, 0x11, 0x11, 0x4, 0x11, 0x11, 0x11, 0x11, 0xff

//Structure #$0F
    byte: 0x4, 0x18, 0x18, 0x18, 0x18, 0x4, 0x19, 0x19, 0x19, 0x19, 0xff

//Structure #$10
def ridley_page_AA83:
    byte: 0x1, 0x1b, 0xff

//Structure #$11
    byte: 0x4, 0x1a, 0x1a, 0x1a, 0x1a, 0xff

//Structure #$12
    byte: 0x8, 0xf, 0xf, 0xf, 0xf, 0x10, 0x10, 0x10, 0x10, 0xff

//Structure #$13
    byte: 0x4, 0xd, 0xd, 0xd, 0xd, 0x4, 0xd, 0xe, 0xe, 0xd, 0x4, 0xd, 0xe, 0xe, 0xd, 0x4
    byte: 0xd, 0xd, 0xd, 0xd, 0xff

//Structure #$14
    byte: 0x8, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0x8, 0xd, 0xe, 0xe, 0xe, 0xe, 0xe
    byte: 0xe, 0xd, 0x8, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xd, 0xff

//Structure #$15
    byte: 0x4, 0x1c, 0x1c, 0x1c, 0x1c, 0x4, 0x1c, 0x1c, 0x1c, 0x1c, 0xff

//Structure #$16
    byte: 0x1, 0x1d, 0x1, 0x1d, 0x1, 0x1d, 0xff

//Structure #$17
    byte: 0x4, 0x1e, 0x1e, 0x1e, 0x1e, 0x4, 0x1e, 0x5, 0x5, 0x1e, 0x4, 0x1e, 0x5, 0x5, 0x1e, 0x4
    byte: 0x1e, 0x1e, 0x1e, 0x1e, 0xff

//Structure #$18
def ridley_page_AAEE:
    byte: 0x8, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x8, 0x1e, 0x9, 0x9, 0x9, 0x9, 0x9
    byte: 0x9, 0x1e, 0x8, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0xff

//Structure #$19
    byte: 0x1, 0x14, 0x1, 0x5, 0x1, 0x14, 0xff

//Structure #$1A
    byte: 0x1, 0x4, 0x1, 0x4, 0x1, 0x4, 0x1, 0x4, 0xff

//Structure #$1B
    byte: 0x1, 0x1f, 0xff

//Structure #$1C
    byte: 0x4, 0x20, 0x20, 0x20, 0x20, 0xff


//----------------------------------------[ Macro definitions ]---------------------------------------

//The macro definitions are simply index numbers into the pattern tables that represent the 4 quadrants
//of the macro definition. The bytes correspond to the following position in order: lower right tile,
//lower left tile, upper right tile, upper left tile. 

def macrodefs:


    byte: 0xff, 0xff, 0xf0, 0xf0
    byte: 0xf1, 0xf1, 0xf1, 0xf1
    byte: 0xa4, 0xff, 0xa4, 0xff
    byte: 0xff, 0xa5, 0xff, 0xa5
    byte: 0x80, 0x81, 0x82, 0x83
    byte: 0x45, 0x46, 0x45, 0x46
    byte: 0xff, 0xff, 0x59, 0x5a
    byte: 0xff, 0xff, 0x5a, 0x5b
    byte: 0x60, 0x61, 0x62, 0x63
    byte: 0xc, 0xd, 0xe, 0xf
    byte: 0xec, 0xff, 0xed, 0xff
    byte: 0xff, 0xee, 0xff, 0xef
    byte: 0x1c, 0x1d, 0x1e, 0x1f
    byte: 0x20, 0x21, 0x22, 0x23
    byte: 0x25, 0x25, 0x24, 0x24
    byte: 0x26, 0x27, 0x28, 0x29
    byte: 0x2a, 0x2b, 0x2c, 0x2d
    byte: 0x18, 0x19, 0x1a, 0x1b
    byte: 0xa0, 0xa0, 0xa0, 0xa0
    byte: 0xa1, 0xa1, 0xa1, 0xa1
    byte: 0x10, 0x11, 0x12, 0x13
    byte: 0x4, 0x5, 0x6, 0x7
    byte: 0xe0, 0xe1, 0xe2, 0xe3
    byte: 0x70, 0x71, 0x72, 0x73
    byte: 0xff, 0xff, 0x43, 0x43
    byte: 0x44, 0x44, 0x44, 0x44
    byte: 0x14, 0x15, 0x16, 0x17
    byte: 0x88, 0x89, 0x8a, 0x8b
    byte: 0xe8, 0xe9, 0xea, 0xeb
    byte: 0x78, 0x79, 0x7a, 0x7b
    byte: 0x55, 0x56, 0x57, 0x58
    byte: 0x90, 0x91, 0x92, 0x93
    byte: 0xc7, 0xc8, 0xc9, 0xca

//Not used.
    byte: 0x11, 0x11, 0x11, 0x4, 0x11, 0x11, 0x11, 0x11, 0xff, 0x8, 0x20, 0x22, 0x22, 0x22, 0x22, 0x22
    byte: 0x22, 0x22, 0xff, 0x1, 0x1f, 0xff, 0x1, 0x21, 0x1, 0x21, 0x1, 0x21, 0xff, 0x8, 0x23, 0x23
    byte: 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x8, 0x23, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x23, 0x8
    byte: 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0xff, 0x1, 0x23, 0x1, 0x23, 0x1, 0x23, 0x1
    byte: 0x23, 0xff, 0x4, 0x23, 0x23, 0x23, 0x23, 0x4, 0x23, 0x24, 0x24, 0x23, 0x4, 0x23, 0x24, 0x24
    byte: 0x23, 0x4, 0x23, 0x23, 0x23, 0x23, 0xff, 0x1, 0x25, 0xff, 0x1, 0x26, 0x1, 0x26, 0x1, 0x26
    byte: 0x1, 0x26, 0xff, 0x3, 0x27, 0x27, 0x27, 0xff, 0x3, 0x28, 0x28, 0x28, 0xff, 0x8, 0x13, 0x13
    byte: 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0xff, 0x1, 0x13, 0x1, 0x13, 0x1, 0x13, 0x1, 0x13, 0xff
    byte: 0x4, 0xc, 0xc, 0xc, 0xc, 0x4, 0xd, 0xd, 0xd, 0xd, 0xff, 0xf1, 0xf1, 0xf1, 0xf1, 0xff
    byte: 0xff, 0xf0, 0xf0, 0x64, 0x64, 0x64, 0x64, 0xff, 0xff, 0x64, 0x64, 0xa4, 0xff, 0xa4, 0xff, 0xff
    byte: 0xa5, 0xff, 0xa5, 0xa0, 0xa0, 0xa0, 0xa0, 0xa1, 0xa1, 0xa1, 0xa1, 0x4f, 0x4f, 0x4f, 0x4f, 0x84
    byte: 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x80, 0x81, 0x82, 0x83, 0xff, 0xff, 0xba, 0xba, 0xbb
    byte: 0xbb, 0xbb, 0xbb, 0x10, 0x11, 0x12, 0x13, 0x4, 0x5, 0x6, 0x7, 0x14, 0x15, 0x16, 0x17, 0x1c
    byte: 0x1d, 0x1e, 0x1f, 0x9, 0x9, 0x9, 0x9, 0xc, 0xd, 0xe, 0xf, 0xff, 0xff, 0x59, 0x5a, 0xff
    byte: 0xff, 0x5a, 0x5b, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0xec, 0xff, 0xed, 0xff, 0xff
    byte: 0xee, 0xff, 0xef, 0x45, 0x46, 0x45, 0x46, 0x4b, 0x4c, 0x4d, 0x50, 0xff, 0xff, 0xff, 0xff, 0x47
    byte: 0x48, 0x47, 0x48, 0x8, 0x8, 0x8, 0x8, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0xe0
    byte: 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0x20, 0x21, 0x22, 0x23, 0x25, 0x25, 0x24, 0x24, 0x78
    byte: 0x79, 0x7a, 0x7b, 0xe8, 0xe9, 0xea, 0xeb, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0xd
    byte: 0x1e, 0x7, 0x21, 0x1d, 0xd, 0xd, 0xd, 0x1e, 0x21, 0x7, 0x21, 0x21, 0x15, 0x14, 0x15, 0x21
    byte: 0x21, 0x7, 0xd, 0x21, 0x16, 0x10, 0x16, 0x21, 0xd, 0x7, 0x1f, 0xd, 0x20, 0x10, 0x1f, 0xd
    byte: 0x20, 0xff, 0x8, 0x22, 0x22, 0xd, 0x22, 0x22, 0x1e, 0x1c, 0x1d, 0x8, 0x1c, 0x1c, 0x21, 0x1c
    byte: 0x1c, 0x21, 0x1c, 0x21, 0x8, 0x1c, 0x1c, 0xc, 0x1c, 0x1c, 0x1f, 0xd, 0x20, 0x7, 0x1c, 0x1c
    byte: 0x21, 0x1c, 0x1c, 0x1c, 0x14, 0x4, 0x1c, 0x14, 0xd, 0x14, 0x3, 0x1c, 0x1c, 0x15, 0xff, 0x2
    byte: 0x1, 0x1, 0x2, 0x0, 0x0, 0xff, 0x1, 0x16, 0x1, 0x21, 0x1, 0x21, 0x1, 0xc, 0x1, 0x21
    byte: 0x1, 0xd, 0x1, 0x21, 0xff, 0x1, 0xc, 0xff, 0x7, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22
    byte: 0xff, 0x5, 0xb, 0x1d, 0x22, 0xd, 0x22, 0x4, 0x11, 0x21, 0x11, 0x21, 0x4, 0x11, 0x21, 0x11
    byte: 0xd, 0x3, 0x11, 0x21, 0x11, 0x3, 0x23, 0x23, 0x23, 0xff, 0x3, 0x19, 0x1b, 0x1a, 0xff, 0x1
    byte: 0x34, 0x1, 0x34, 0xff, 0x8, 0x1d, 0x22, 0x17, 0xd, 0x1e, 0xd, 0x17, 0xd, 0x8, 0xd, 0x22
    byte: 0x17, 0x20, 0x21, 0x14, 0xd, 0x11, 0x8, 0x21, 0x1d, 0x22, 0x17, 0x20, 0x10, 0x10, 0x21, 0x8
    byte: 0x21, 0x1f, 0x17, 0xd, 0x22, 0xd, 0x1e, 0x11, 0x8, 0xd, 0x14, 0x10, 0x1f, 0x22, 0x22, 0x20
    byte: 0x11, 0xff, 0x8, 0x17, 0x17, 0xd, 0x17, 0x17, 0xd, 0x17, 0x17, 0x8, 0xd, 0x17, 0x17, 0x17
    byte: 0x17, 0x17, 0x17, 0xd, 0xff, 0x8, 0x18, 0x1d, 0x17, 0x1e, 0x1d, 0x17, 0x17, 0x1e, 0x8, 0x18
    byte: 0x21, 0x1c, 0x21, 0x21, 0x1c, 0x1c, 0x21, 0x8, 0xd, 0x20, 0x1c, 0x1f, 0x20, 0x1c, 0x1c, 0x1f
    byte: 0xff, 0x4, 0xd, 0xd, 0xd, 0xd, 0x4, 0x18, 0x18, 0x18, 0x18, 0x4, 0x18, 0x18, 0x18, 0x18
    byte: 0x4, 0x18, 0x18, 0x18, 0x18, 0xff, 0x7, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0x7, 0xd
    byte: 0x17, 0x17, 0x17, 0x17, 0x17, 0xd, 0x7, 0x18, 0xa, 0x10, 0xa, 0xa, 0x10, 0x18, 0x7, 0xd
    byte: 0x17, 0x17, 0x17, 0x17, 0x17, 0xd, 0xff, 0x1, 0xa, 0x1, 0xa, 0x1, 0xa, 0x1, 0xa, 0x1
    byte: 0xa, 0x1, 0xa, 0x1, 0xa, 0x1, 0xa, 0xff, 0x1, 0xd, 0x1, 0x18, 0x1, 0x18, 0x1, 0x18
    byte: 0x1, 0x18, 0xff, 0x2, 0x19, 0x1a, 0xff, 0x1, 0xd, 0xff, 0x4, 0x14, 0x1c, 0x1c, 0x14, 0x4
    byte: 0xa, 0xa, 0xa, 0xa, 0xff, 0x8, 0xd, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0xd, 0xff, 0x8
    byte: 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0xe, 0x8, 0xe, 0x10, 0xe, 0xe, 0x10, 0x10, 0xe
    byte: 0x10, 0xff, 0xa7, 0xa7, 0xa7, 0xa7, 0xff, 0xff, 0xa6, 0xa6, 0xa2, 0xa2, 0xff, 0xff, 0xff, 0xff
    byte: 0xa3, 0xa3, 0xa4, 0xff, 0xa4, 0xff, 0xff, 0xa5, 0xff, 0xa5, 0xff, 0x79, 0xff, 0x7e, 0x4f, 0x4f
    byte: 0x4f, 0x4f, 0xa0, 0xa0, 0xa0, 0xa0, 0xa1, 0xa1, 0xa1, 0xa1, 0x4, 0x5, 0x6, 0x7, 0x10, 0x11
    byte: 0x12, 0x13, 0x0, 0x1, 0x2, 0x3, 0x8, 0x8, 0x8, 0x8, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d
    byte: 0x1e, 0x1f, 0xc, 0xd, 0xe, 0xf, 0x9, 0x9, 0x9, 0x9, 0x7a, 0x7b, 0x7f, 0x5a, 0x2a, 0x2c
    byte: 0xff, 0xff, 0x14, 0x15, 0x16, 0x17, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x20, 0x21, 0x28, 0x28
    byte: 0x29, 0x29, 0x26, 0x27, 0x26, 0x27, 0x2a, 0x2b, 0xff, 0xff, 0x2b, 0x2c, 0xff, 0xff, 0x2b, 0x2b
    byte: 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x3d, 0x3e
    byte: 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x39, 0x3a, 0x39, 0x3a, 0x3b, 0x3b, 0x3c, 0x3c, 0xb, 0xb
    byte: 0x2d, 0x2e, 0x2f, 0x30, 0xb, 0xb, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x54, 0x55, 0x56, 0x57
    byte: 0x58, 0x59, 0xff, 0xff, 0xff, 0x5e, 0x5b, 0x5c, 0x5f, 0x60, 0xff, 0xff, 0x61, 0xff, 0x5d, 0x62
    byte: 0x67, 0x68, 0x63, 0x64, 0x69, 0x6a, 0x65, 0x66, 0x6b, 0x6c, 0x6d, 0x6e, 0x73, 0x74, 0x6f, 0x70
    byte: 0x75, 0x76, 0x71, 0x72, 0x77, 0x78, 0x45, 0x46, 0x47, 0x48, 0xff, 0x98, 0xff, 0x98, 0x49, 0x4a
    byte: 0x4b, 0x4c, 0x90, 0x91, 0x90, 0x91, 0x7c, 0x7d, 0x4d, 0xff, 0x1c, 0x1d, 0x1e, 0x17, 0x18, 0x19
    byte: 0x1a, 0x1f, 0x20, 0x21, 0x22, 0x60, 0x61, 0x62, 0x63, 0xe, 0xf, 0xff, 0xff, 0xc, 0xd, 0xd
    byte: 0xd, 0x10, 0xd, 0xff, 0x10, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x30, 0xff, 0x33, 0xff
    byte: 0x36, 0xff, 0x39, 0xff, 0x3d, 0xff, 0xff, 0x31, 0x32, 0x34, 0x35, 0x37, 0x38, 0x3a, 0x3b, 0x3e
    byte: 0x3f, 0x3c, 0x41, 0x40, 0x42, 0x84, 0x85, 0x86, 0x87, 0x80, 0x81, 0x82, 0x83, 0x88, 0x89, 0x8a
    byte: 0x8b, 0x45, 0x46, 0x45, 0x46, 0x47, 0x48, 0x48, 0x47, 0x5c, 0x5d, 0x5e, 0x5f, 0xb8, 0xb8, 0xb9
    byte: 0xb9, 0x74, 0x75, 0x75, 0x74, 0xc1, 0x13, 0x13, 0x13, 0x36, 0xbe, 0xbc, 0xbd, 0xbf, 0x14, 0x15
    byte: 0x14, 0xc0, 0x14, 0xc0, 0x16, 0xff, 0xc1, 0xff, 0xff, 0xc2, 0x14, 0xff, 0xff, 0x30, 0x13, 0xbc
    byte: 0xbd, 0x13, 0x14, 0x15, 0x16, 0xd7, 0xd7, 0xd7, 0xd7, 0x76, 0x76, 0x76, 0x76, 0xff, 0xff, 0xba
    byte: 0xba, 0xbb, 0xbb, 0xbb, 0xbb, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0xff, 0xff, 0x8
    byte: 0x9, 0xff, 0xff, 0x9, 0xa, 0x55, 0x56, 0x57, 0x58, 0x90, 0x91, 0x92, 0x93, 0x4b, 0x4c, 0x4d
    byte: 0x50, 0x51, 0x52, 0x53, 0x54, 0x70, 0x71, 0x72, 0x73, 0x8c, 0x8d, 0x8e, 0x8f, 0x11, 0x12, 0xff
    byte: 0x11, 0x11, 0x12, 0x12, 0x11, 0x11, 0x12, 0x12, 0xff, 0xc3, 0xc4, 0xc5, 0xc6, 0x30, 0x0, 0xbc
    byte: 0xbd, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0x90, 0x91, 0x92, 0x93, 0x20, 0x20, 0x20
    byte: 0x20, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0

//------------------------------------------[ Area music data ]---------------------------------------

//There are 3 control bytes associated with the music data and the rest are musical note indexes.
//If the byte has the binary format 1011xxxx ($Bx), then the byte is an index into the corresponding
//musical notes table and is used to set the note length until it is set by another note length
//byte. The lower 4 bits are the index into the note length table. Another control byte is the loop
//and counter btye. The loop and counter byte has the format 11xxxxxx. Bits 0 thru 6 contain the
//number of times to loop.  The third control byte is #$FF. This control byte marks the end of a loop
//and decrements the loop counter. If #$00 is found in the music data, the music has reached the end.
//A #$00 in any of the different music channel data segments will mark the end of the music. The
//remaining bytes are indexes into the MusicNotesTbl and should only be even numbers as there are 2
//bytes of data per musical note.

def ridleytriangleindexdata:

    //1 3/16 seconds
    byte: 0xb6
    //E3
    byte: 0x20
    //3/8 seconds
    byte: 0xb2
    //Ab3
    byte: 0x28
    //3/4 seconds
    byte: 0xb3
    //A#3
    byte: 0x2c
    //D4
    byte: 0x34
    //1 1/2 seconds
    byte: 0xb4
    //C4
    byte: 0x30
    //C4
    byte: 0x30
    //3/4 seconds
    byte: 0xb3
    //F#4
    byte: 0x3c
    //E4
    byte: 0x38
    //C4
    byte: 0x30
    //Ab3
    byte: 0x28
    //1 1/2 seconds
    byte: 0xb4
    //F#3
    byte: 0x24
    //F#3
    byte: 0x24
    //D#3
    byte: 0x1e
    //3/4 seconds
    byte: 0xb3
    //A3
    byte: 0x2a
    //G3
    byte: 0x26
    //1 1/2 seconds
    byte: 0xb4
    //B3
    byte: 0x2e
    //B3
    byte: 0x2e
    //3/4 seconds
    byte: 0xb3
    //C#4
    byte: 0x32
    //D#4
    byte: 0x36
    //B3
    byte: 0x2e
    //C#4
    byte: 0x32
    //1 1/2 seconds
    byte: 0xb4
    //A3
    byte: 0x2a
    //A3
    byte: 0x2a
    //End Ridley area music.
    byte: 0x0

def ridleysq1indexdata:

def ridley_page_B022:
    //3/64 seconds
    byte: 0xba
    //No sound
    byte: 0x2
    byte: 0xd0
    //3/16 seconds    +
    byte: 0xb1
    //F#4        |
    byte: 0x3c
    //Ab4        | Repeat 16 times
    byte: 0x40
    //A#4        |
    byte: 0x44
    //Ab4        +
    byte: 0x40
    byte: 0xff
    byte: 0xd0
    //A4        +
    byte: 0x42
    //B4        | Repeat 16 times
    byte: 0x46
    //C#5        |
    byte: 0x4a
    //B4        +
    byte: 0x46
    byte: 0xff

def ridleysq2indexdata:

    byte: 0xd0
    //3/16 seconds    +
    byte: 0xb1
    //A#4        |
    byte: 0x44
    //C5        | Repeat 16 times
    byte: 0x48
    //D5        |
    byte: 0x4c
    //C5        +
    byte: 0x48
    byte: 0xff
    byte: 0xd0
    //C#5        +
    byte: 0x4a
    //D#5        | Repeat 16 times
    byte: 0x4e
    //F5        |
    byte: 0x52
    //D#5        +
    byte: 0x4e
    byte: 0xff
    //End Ridley area music.
    byte: 0x0

def kraidsq1indexdata:

def ridley_page_B03F:
    //11/64 seconds
    byte: 0xb8
    //No sound
    byte: 0x2

//SQ1 music data runs down into the SQ2 music data.
def kraidsq2indexdata:

    byte: 0xc4
    //1/2 seconds    +
    byte: 0xb3
    //E4        |
    byte: 0x38
    //1/4 seconds    |
    byte: 0xb2
    //B3        |
    byte: 0x2e
    //1/2 seconds    |
    byte: 0xb3
    //A4        |
    byte: 0x42
    //1/4 seconds    |
    byte: 0xb2
    //C4        | Repeat 4 times
    byte: 0x30
    //1/2 seconds    |
    byte: 0xb3
    //F#4        |
    byte: 0x3c
    //1/4 seconds    |
    byte: 0xb2
    //D4        |
    byte: 0x34
    //1/2 seconds    |
    byte: 0xb3
    //B3        |
    byte: 0x2e
    //1/4 seconds    |
    byte: 0xb2
    //A#3        +
    byte: 0x2c
    byte: 0xff
    byte: 0xc2
    //1/2 seconds    +
    byte: 0xb3
    //G4        |
    byte: 0x3e
    //1/4 seconds    |
    byte: 0xb2
    //D4        |
    byte: 0x34
    //1/2 seconds    |
    byte: 0xb3
    //E4        |
    byte: 0x38
    //1/4 seconds    |
    byte: 0xb2
    //B3        | Repeat 2 times
    byte: 0x2e
    //1/2 seconds    |
    byte: 0xb3
    //F#4        |
    byte: 0x3c
    //1/4 seconds    |
    byte: 0xb2
    //D4        |
    byte: 0x34
    //1/2 seconds    |
    byte: 0xb3
    //A4        |
    byte: 0x42
    //1/4 seconds    |
    byte: 0xb2
    //E4        +
    byte: 0x38
    byte: 0xff
    byte: 0xc4
    //1/8 seconds    +
    byte: 0xb1
    //G4        |
    byte: 0x3e
    //B3        |
    byte: 0x2e
    //G4        |
    byte: 0x3e
    //B3        |
    byte: 0x2e
    //G4        |
    byte: 0x3e
    //B3        |
    byte: 0x2e
    //A#4        |
    byte: 0x44
    //E4        |
    byte: 0x38
    //A#4        |
    byte: 0x44
    //E4        |
    byte: 0x38
    //A#4        | Repeat 4 times
    byte: 0x44
    //E4        |
    byte: 0x38
    //A4        |
    byte: 0x42
    //C4        |
    byte: 0x30
    //A4        |
    byte: 0x42
    //C4        |
    byte: 0x30
    //A4        |
    byte: 0x42
    //C4        |
    byte: 0x30
    //A4        |
    byte: 0x42
    //D#4        |
    byte: 0x36
    //F#4        |
    byte: 0x3c
    //D#4        |
    byte: 0x36
    //B4        |
    byte: 0x46
    //D#4        +
    byte: 0x36
    byte: 0xff
    byte: 0xc2
    //F#4        +
    byte: 0x3c
    //G4        |
    byte: 0x3e
    //A4        |
    byte: 0x42
    //B4        |
    byte: 0x46
    //D5        |
    byte: 0x4c
    //B4        |
    byte: 0x46
    //F#5        |
    byte: 0x54
    //D5        |
    byte: 0x4c
    //A4        |
    byte: 0x42
    //G4        |
    byte: 0x3e
    //F#4        | Repeat 2 times
    byte: 0x3c
    //B4        |
    byte: 0x46
    //A5        |
    byte: 0x5a
    //F#5        |
    byte: 0x54
    //D5        |
    byte: 0x4c
    //A4        |
    byte: 0x42
    //G4        |
    byte: 0x3e
    //F#4        |
    byte: 0x3c
    //E4        |
    byte: 0x38
    //G4        |
    byte: 0x3e
    //A4        |
    byte: 0x42
    //D5        |
    byte: 0x4c
    //E5        |
    byte: 0x50
    //No sound    +
    byte: 0x2
    byte: 0xff
    byte: 0xc4
    //1/8 seconds    +
    byte: 0xb1
    //A5        |
    byte: 0x5a
    //No sound    |
    byte: 0x2
    //G5        |
    byte: 0x56
    //No sound    |
    byte: 0x2
    //F#5        |
    byte: 0x54
    //No sound    | Repeat 4 times
    byte: 0x2
    //E5        |
    byte: 0x50
    //No sound    |
    byte: 0x2
    //F#5        |
    byte: 0x54
    //No sound    |
    byte: 0x2
    //G5        |
    byte: 0x56
    //No sound    +
    byte: 0x2
    byte: 0xff
    //End Kraid area music.
    byte: 0x0

def kraidtriangleindexdata:

    byte: 0xd0
    //1/4 seconds    +
    byte: 0xb2
    //E3        | Repeat 16 times
    byte: 0x20
    //1/2 seconds    |
    byte: 0xb3
    //E4        +
    byte: 0x38
    byte: 0xff
    byte: 0xc2
    //1/4 seconds    +
    byte: 0xb2
    //C3        |
    byte: 0x18
    //1/2 seconds    |
    byte: 0xb3
    //C4        |
    byte: 0x30
    //1/4 seconds    |
    byte: 0xb2
    //C3        |
    byte: 0x18
    //1/2 seconds    |
    byte: 0xb3
    //C4        | Repeat 2 times
    byte: 0x30
    //1/4 seconds    |
    byte: 0xb2
    //D3        |
    byte: 0x1c
    //1/2 seconds    |
    byte: 0xb3
    //D4        |
    byte: 0x34
    //1/4 seconds    |
    byte: 0xb2
    //D3        |
    byte: 0x1c
    //1/2 seconds    |
    byte: 0xb3
    //D4        +
    byte: 0x34
    byte: 0xff
    byte: 0xc4
    //1/4 seconds    +
    byte: 0xb2
    //E3        |
    byte: 0x20
    //E4        |
    byte: 0x38
    //E5        |
    byte: 0x50
    //F#3        |
    byte: 0x24
    //F#4        | Repeat 4 times
    byte: 0x3c
    //F#5        |
    byte: 0x54
    //F3        |
    byte: 0x22
    //F4        |
    byte: 0x3a
    //F5        |
    byte: 0x52
    //B2        |
    byte: 0x16
    //B3        |
    byte: 0x2e
    //B4        +
    byte: 0x46
    byte: 0xff
    byte: 0xc2
    //1/2 seconds    +
    byte: 0xb3
    //E3        |
    byte: 0x20
    //1/4 seconds    |
    byte: 0xb2
    //B3        |
    byte: 0x2e
    //1/2 seconds    |
    byte: 0xb3
    //C4        |
    byte: 0x30
    //1/4 seconds    |
    byte: 0xb2
    //B3        | Repeat 2 times
    byte: 0x2e
    //1/2 seconds    |
    byte: 0xb3
    //C3        |
    byte: 0x18
    //1/4 seconds    |
    byte: 0xb2
    //G3        |
    byte: 0x26
    //1/2 seconds    |
    byte: 0xb3
    //A3        |
    byte: 0x2a
    //1/4 seconds    |
    byte: 0xb2
    //B3        +
    byte: 0x2e
    byte: 0xff
    byte: 0xc8
    //1 second    + Repeat 8 times
    byte: 0xb4
    //E2        +
    byte: 0x8
    byte: 0xff

//Not used.
def b0e7:
    byte: 0x2a, 0x2a, 0x2a, 0xb9, 0x2a, 0x2a, 0x2a, 0xb2, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0xb9, 0x2a, 0x12
def b0f7:
    byte: 0x2a, 0xb2, 0x26, 0xb9, 0xe, 0x26, 0x26, 0xb2, 0x26, 0xb9, 0xe, 0x26, 0x26, 0xb2, 0x22, 0xb9
def b107:
    byte: 0xa, 0x22, 0x22, 0xb2, 0x22, 0xb9, 0xa, 0x22, 0x22, 0xb2, 0x20, 0x20, 0xb9, 0x20, 0x20, 0x20
def b117:
    byte: 0xb2, 0x20, 0xb9, 0x34, 0x30, 0x34, 0x38, 0x34, 0x38, 0x3a, 0x38, 0x3a, 0x3e, 0x3a, 0x3e, 0xff
def b127:
    byte: 0xc2, 0xb2, 0x18, 0x30, 0x18, 0x30, 0x18, 0x30, 0x18, 0x30, 0x22, 0x22, 0xb1, 0x22, 0x22, 0xb2
def b137:
    byte: 0x22, 0x20, 0x1c, 0x18, 0x16, 0x14, 0x14, 0x14, 0x2c, 0x2a, 0x2a, 0xb9, 0x2a, 0x2a, 0x2a, 0xb2
def b147:
    byte: 0x2a, 0x28, 0x28, 0xb9, 0x28, 0x28, 0x28, 0xb2, 0x28, 0x26, 0x26, 0xb9, 0x26, 0x26, 0x3e, 0x26
def b157:
    byte: 0x26, 0x3e, 0xff, 0xf0, 0xb2, 0x1, 0x4, 0x1, 0x4, 0xff, 0xe0, 0xba, 0x2a, 0x1a, 0x2, 0x3a
def b167:
    byte: 0x40, 0x2, 0x1c, 0x2e, 0x38, 0x2c, 0x3c, 0x38, 0x2, 0x40, 0x44, 0x46, 0x2, 0x1e, 0x2, 0x2c
def b177:
    byte: 0x38, 0x46, 0x26, 0x2, 0x3a, 0x20, 0x2, 0x28, 0x2e, 0x2, 0x18, 0x44, 0x2, 0x46, 0x48, 0x4a
def b187:
    byte: 0x4c, 0x2, 0x18, 0x1e, 0xff, 0xb8, 0x2, 0xc8, 0xb0, 0xa, 0xc, 0xff, 0xc8, 0xe, 0xc, 0xff
def b197:
    byte: 0xc8, 0x10, 0xe, 0xff, 0xc8, 0xe, 0xc, 0xff, 0x0, 0x2b, 0x3b, 0x1b, 0x5a, 0xd0, 0xd1, 0xc3
def b1a7:
    byte: 0xc3, 0x3b, 0x3b, 0x9b, 0xda, 0xd0, 0xd0, 0xc0, 0xc0, 0x2c, 0x23, 0x20, 0x20, 0x30, 0x98, 0xcf
def b1b7:
    byte: 0xc7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x30, 0x1f, 0x80, 0xc0, 0xc0, 0x60, 0x70, 0xfc
def b1c7:
    byte: 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
def b1d7:
    byte: 0x0, 0x80, 0x80, 0xc0, 0x78, 0x4c, 0xc7, 0x80, 0x80, 0xc4, 0xa5, 0x45, 0xb, 0x1b, 0x3, 0x3
def b1e7:
    byte: 0x0, 0x3a, 0x13, 0x31, 0x63, 0xc3, 0x83, 0x3, 0x4, 0xe6, 0xe6, 0xc4, 0x8e, 0x1c, 0x3c, 0x18
def b1f7:
    byte: 0x30, 0xe8, 0xe8, 0xc8, 0x90, 0x60, 0x0, 0x0, 0x0

//------------------------------------------[ Sound Engine ]------------------------------------------

//SFXdata. The top four entries are used by the noise music player for drum beats.
def ridley_page_B200:
    //Base for drum beat music data.
    byte: 0x0

def drumbeat00sfxdata:

def ridley_page_B201:
    //Noise channel music data #$01.
    byte: 0x10, 0x1, 0x18
def drumbeat01sfxdata:

    //Noise channel music data #$04.
    byte: 0x0, 0x1, 0x38
def drumbeat02sfxdata:

    //Noise channel music data #$07.
    byte: 0x1, 0x2, 0x40
def drumbeat03sfxdata:

    //Noise channel music data #$0A.
    byte: 0x0, 0x9, 0x58
def gamepausedsfxdata:

    byte: 0x80, 0x7f, 0x80, 0x48
def screwattsfxdata:

    byte: 0x35, 0x7f, 0x0, 0xb0
def missilelaunchsfxdata:

    byte: 0x19, 0x7f, 0xe, 0xa0
def bombexplodesfxdata:

    byte: 0xd, 0x7f, 0xf, 0x8
def samuswalksfxdata:

    byte: 0x16, 0x7f, 0xb, 0x18
def spitflamesfxdata:

    byte: 0x13, 0x7f, 0xe, 0xf8
def samushitsq1sq2sfxdata:

    byte: 0xc1, 0x89, 0x2, 0xf
def bosshitsq2sfxdata:

    byte: 0x34, 0xba, 0xe0, 0x5
def bosshitsq1sfxdata:

    byte: 0x34, 0xbb, 0xce, 0x5
def incorrectpasswordsq1sfxdata:

    byte: 0xb6, 0x7f, 0x0, 0xc2
def incorrectpasswordsq2sfxdata:

    byte: 0xb6, 0x7f, 0x4, 0xc2
def timebombticksfxdata:

    byte: 0x17, 0x7f, 0x66, 0x89
def energypickupsfxdata:

    byte: 0x89, 0x7f, 0x67, 0x18
def missilepickupsfxdata:

    byte: 0x8b, 0x7f, 0xfd, 0x28
def metalsfxdata:

    byte: 0x2, 0x7f, 0xa8, 0xf8
def longrangeshotsfxdata:

    byte: 0xd7, 0x83, 0x58, 0xf8
def shortrangeshotsfxdata:

    byte: 0xd6, 0x82, 0x58, 0xf8
def jumpsfxdata:

    byte: 0x95, 0x8c, 0x40, 0xb9
def enemyhitsfxdata:

    byte: 0x1d, 0x9a, 0x20, 0x8f
def bugoutofholesfxdata:

    byte: 0x16, 0x8d, 0xe0, 0x42
def wavebeamsfxdata:

    byte: 0x19, 0x7f, 0x6f, 0x40
def icebeamsfxdata:

    byte: 0x18, 0x7f, 0x80, 0x40
def bomblaunch1sfxdata:

    byte: 0x7, 0x7f, 0x40, 0x28
def bomblaunch2sfxdata:

    byte: 0x7, 0x7f, 0x45, 0x28
def samustoballsfxdata:

    byte: 0x7f, 0x7f, 0xdd, 0x3b
def metroidhitsfxdata:

    byte: 0x7f, 0x7f, 0xff, 0x98
def samusdiesfxdata:

    byte: 0x7f, 0x7f, 0x40, 0x8
def samusbeepsfxdata:

    byte: 0x9, 0x7f, 0x30, 0x48
def bigenemyhitsfxdata:

    byte: 0x3, 0x7f, 0x42, 0x18
def statueraisesfxdata:

    byte: 0x3, 0x7f, 0x11, 0x9
def doorsfxdata:

    byte: 0x7f, 0x7f, 0x30, 0xb2

//The following table is used by the CheckSFXFlag routine.  The first two bytes of each row
//are the address of the pointer table used for handling SFX and music  routines for set flags.
//The second pair of bytes is the address of the routine to next jump to if no SFX or music
//flags were found.  The final byte represents what type of channel is currently being
//processed: 0=Noise, 1=SQ1, 3=Triangle, 4=Multiple channels.

def choosenextsfxroutinetbl:


    //Noise init SFX        (1st).
    word: ridley_page_B2BB, 0xb322
    byte: 0x0
    
    //Noise continue SFX    (2nd).
    word: ridley_page_B2CB, ridley_page_B4EE
    byte: 0x0

    //SQ1 init SFX        (5th).
    word: ridley_page_B2DB, 0xb330
    byte: 0x1

    //SQ2 continue SFX    (6th).
    word: ridley_page_B2EB, ridley_page_B4EE
    byte: 0x1

    //Triangle init SFX    (7th).
    word: ridley_page_B2FB, 0xb344
    byte: 0x3

    //Triangle continue SFX    (8th).
    word: ridley_page_B30B, ridley_page_B4EE
    byte: 0x3

    //Multi init SFX        (3rd).
    word: ridley_page_BC06, 0xb35c
    byte: 0x4

    //Multi continue SFX    (4th).
    word: ridley_page_BC16, 0xb364
    byte: 0x4

    //temp flag Music    (10th).
    word: ridley_page_BC26, 0xbc4b
    byte: 0x0

    //Music            (9th).
    word: ridley_page_BC26, 0xbc3d
    byte: 0x0

//The tables below contain addresses for SFX handling routines.

//Noise Init SFX handling routine addresses:
def ridley_page_B2BB:
    //No sound.
    word: ridley_page_B4EE
    //Screw attack init SFX.
    word: ridley_page_B52B
    //Missile launch init SFX.
    word: ridley_page_B56E
    //Bomb explode init SFX.
    word: ridley_page_B583
    //Samus walk init SFX.
    word: ridley_page_B598
    //Spit flame init SFX.
    word: ridley_page_B50F
    //No sound.
    word: ridley_page_B4EE
    //No sound.
    word: ridley_page_B4EE

//Noise Continue SFX handling routine addresses:

def ridley_page_B2CB:
    //No sound.
    word: ridley_page_B4EE
    //Screw attack continue SFX.
    word: ridley_page_B539
    //Missile launch continue SFX.
    word: ridley_page_B57B
    //Bomb explode continue SFX.
    word: ridley_page_B58A
    //Samus walk continue SFX.
    word: ridley_page_B58A
    //Spit flame continue SFX.
    word: ridley_page_B516
    //No sound.
    word: ridley_page_B4EE
    //No sound.
    word: ridley_page_B4EE

//SQ1 Init SFX handling routine addresses:

def ridley_page_B2DB:
    //Missile pickup init SFX.
    word: ridley_page_B6CD
    //Energy pickup init SFX.
    word: ridley_page_B6E7
    //Metal init SFX.
    word: ridley_page_B735
    //Bullet fire init SFX.
    word: ridley_page_B716
    //Bird out of hole init SFX.
    word: ridley_page_B73C
    //Enemy hit init SFX.
    word: ridley_page_B710
    //Samus jump init SFX.
    word: ridley_page_B703
    //Wave beam init SFX.
    word: ridley_page_B77A

//SQ1 Continue SFX handling routine addresses:

def ridley_page_B2EB:
    //Missile pickup continue SFX.
    word: ridley_page_B6B0
    //Energy pickup continue SFX.
    word: ridley_page_B6D3
    //Metal continue SFX.
    word: ridley_page_B6ED
    //Bullet fire continue SFX.
    word: ridley_page_B74F
    //Bird out of hole continue SFX.
    word: ridley_page_B6ED
    //Enemy hit continue SFX.
    word: ridley_page_B6ED
    //Samus jump continue SFX.
    word: ridley_page_B6ED
    //Wave beam continue SFX.
    word: ridley_page_B781

//Triangle init handling routine addresses:

def ridley_page_B2FB:
    //Samus die init SFX.
    word: ridley_page_B8D2
    //Door open close init SFX.
    word: ridley_page_B7AC
    //Metroid hit init SFX.
    word: ridley_page_B8A7
    //Statue raise init SFX.
    word: ridley_page_B921
    //Beep init SFX.
    word: ridley_page_B7D9
    //Big enemy hit init SFX.
    word: ridley_page_B7EF
    //Samus to ball init SFX.
    word: ridley_page_B834
    //Bomb launch init SFX.
    word: ridley_page_B878

//Triangle continue handling routine addresses:

def ridley_page_B30B:
    //Samus die continue SFX.
    word: ridley_page_B8ED
    //Door open close continue SFX.
    word: ridley_page_B7CB
    //Metroid hit continue SFX.
    word: ridley_page_B8B1
    //Statue raise continue SFX.
    word: ridley_page_B940
    //Beep continue SFX.
    word: ridley_page_B7E7
    //Big enemy hit continue SFX.
    word: ridley_page_B80E
    //Samus to ball continue SFX.
    word: ridley_page_B84F
    //Bomb launch continue SFX.
    word: ridley_page_B87F

def loadnoisesfxinitflags:

    //Load A with Noise init SFX flags, (1st SFX cycle).
    a = [noisesfxflag]
    //Lower address byte in ChooseNextSFXRoutineTbl.
    x = 0x89
    //Branch always.
    goto gotosfxcheckflags when ~zero

def loadnoisesfxcontflags:

    //Load A with Noise continue flags, (2nd SFX cycle).
    a = [noisecontsfx]
    //Lower address byte in ChooseNextSFXRoutineTbl.
    x = 0x8e
    //Branch always.
    goto gotosfxcheckflags when ~zero

def loadsq1sfxinitflags:

    //Load A with SQ1 init flags, (5th SFX cycle).
    a = [sq1sfxflag]
    //Lower address byte in ChooseNextSFXRoutineTbl.
    x = 0x93
    //Branch always.
    goto gotosfxcheckflags when ~zero

def loadsq1sfxcontflags:

    //Load A with SQ1 continue flags, (6th SFX cycle).
    a = [sq1contsfx]
    //Lower address byte in ChooseNextSFXRoutineTbl.
    x = 0x98
    //Branch always.
    goto gotosfxcheckflags when ~zero

def gotosfxcheckflags:

    //($B4BD)Checks to see if SFX flags set.
    call checksfxflag
    //if no flag found, Jump to next SFX cycle,-->
    goto [0xe2]
                    //else jump to specific SFX handling routine.
def loadstrianglesfxinitflags:

    //Load A with Triangle init flags, (7th SFX cycle).
    a = [trianglesfxflag]
    //Lower address byte in ChooseNextSFXRoutineTbl.
    x = 0x9d
    //Brach always.
    goto gotosfxcheckflags when ~zero

def loadtrianglesfxcontflags:

    //Load A with Triangle continue flags, (8th SFX cycle).
    a = [trianglecontsfx]
    //Lower address byte in ChooseNextSFXRoutineTbl.
    x = 0xa2
    //Branch always.
    goto gotosfxcheckflags when ~zero

def loadmultisfxinitflags:

    //Load A with Multi init flags, (3rd SFX cycle).
    a = [multisfxflag]
    //Lower address byte in ChooseNextSFXRoutineTbl.
    x = 0xa7
    //($B4BD)Checks to see if SFX or music flags set.
    call checksfxflag
    //($BC53)Find bit containing music init flag.
    call findmusicinitindex
    //($BC64)Add 8 to MusicInitIndex.
    call add8
    //If no flag found, Jump to next SFX cycle,-->
    goto [0xe2]
                    //else jump to specific SFX handling subroutine.
def loadmultisfxcontflags:

    //Load A with $68C flags (4th SFX cycle).
    a = [multicontsfx]
    //Lower address byte in ChooseNextSFXRoutineTbl.
    x = 0xac
    //($B337)Checks to see if SFX or music flags set.
    goto gotosfxcheckflags

def loadsq1flags:

    //($B329)Check for SQ1 init flags.
    call loadsq1sfxinitflags
    return

def loadsq1channelsfx:
            //Used to determine which sound registers to change-->
    //($4000 - $4003) - SQ1.
    a = 0x0
    //Branch always.
    goto _000E when zero

def loadtrianglechannelsfx:
            //Used to determine which sound registers to change-->
    //($4008 - $400B) - Triangle.
    a = 0x8
    //Branch always.
    goto _000E when ~zero

def loadnoisechannelsfx:
            //Used to determine which sound registers to change-->
    //($400C - $400F) - Noise.
    a = 0xc
    //Branch always.
    goto _000E when ~zero

def loadsq2channelsfx:
            //Used to determine which sound registers to change-->
    //($4004 - $4007) - SQ2.
    a = 0x4

def loadsfxdata:

def _000E:
    //Lower address byte of desired APU control register.
    [0xe0] = a
    a = 0x40
    //Upper address byte of desired APU control register.
    [0xe1] = a
    //Lower address byte of data to load into sound channel.
    [0xe2] = y
    a = 0xb2
    //Upper address byte of data to load into sound channel.
    [0xe3] = a
    //Starting index for loading four byte sound data.
    y = 0x0

def loadsfxregisters:

def _000F:
    //Load A with SFX data byte.
    a = [[0xe2]:y]
    //Store A in SFX register.
    [[0xe0]:y] = a
    y++
    //The four registers associated with each sound-->
    a = y
    //channel are loaded one after the other (the loop-->
    compare a to 0x4
    //repeats four times).
    goto _000F when ~zero
    return

def pausesfx:

def _0010:
    //SFXPaused=#$01
    [sfxpaused]++
    //($B43E)Clear sound registers of data.
    call clearsounds
    //PauseSFXStatus=#$00
    [pausesfxstatus] = a
    return

def _0011:
    //Has SFXPaused been set? if not, branch
    a = [sfxpaused]
    goto _0010 when zero
    //For the first #$12 frames after the game has been-->
    a = [pausesfxstatus]
    //paused, play GamePaused SFX.  If paused for #$12-->
    compare a to 0x12
    //frames or more, branch to exit.
    goto _0013 when zero
    a = a & 0x3
    //Every fourth frame, repeat GamePaused SFX
    compare a to 0x3
    goto _0012 when ~zero
    //Lower address byte of GamePaused SFX data(Base=$B200)
    y = 0xd
    //($B368) Load GamePaused SFX data.
    call loadsq1channelsfx
def _0012:
    [pausesfxstatus]++
def _0013:
    return

//----------------------------------[ Sound Engine Entry Point ]-----------------------------------
//NOTES:  
//SFX take priority over music.
//
//There are 10 SFX cycles run every time the sound engine subroutine is called.  The cycles
//search for set sound flags in the following registers in order:
//$680, $688, $684, $68C, $681, $689, $683, $68B, $65D, $685 
//
//The sound channels are assigned SFX numbers.  Those SFX numbers are:
//Noise=0, sq1=1, sq2=2, triangle=3, Multi=4
//The sound channels are assigned music numbers.  Those music numbers are:
//SQ1=0, SQ2=1, Triangle=2, Noise=3

def soundengine:
 
    //Set APU to 5 frame cycle, disable frame interrupt.
    a = 0xc0
    [apucommoncntrl1] = a
    //is bit zero is set in NoiseSFXFlag(Silence-->
    a = [noisesfxflag]
    //music)?  If yes, branch.
    a = a >> 1
    goto _0015 when carry
    a = [mainroutine]
    //Is game paused?  If yes, branch.
    compare a to 0x5
    goto _0011 when zero
    //Clear SFXPaused when game is running.
    a = 0x0
    [sfxpaused] = a
    //($B31B)Check noise SFX flags.
    call loadnoisesfxinitflags
    //($B34B)Check multichannel SFX flags.
    call loadmultisfxinitflags
    //($B33D)Check triangle SFX flags.
    call loadstrianglesfxinitflags
    //($BC36)Check music flags.
    call loadmusictempflags

def clearsfxflags:

def _0014:
    a = 0x0
    [noisesfxflag] = a
    [sq1sfxflag] = a
    //Clear all SFX flags.
    [sq2sfxflag] = a
    [trianglesfxflag] = a
    [multisfxflag] = a
    [musicinitflag] = a
    return

def _0015:
    //($B404)Prepare to start playing music.
    call initializesoundaddresses
    //Branch always.
    goto _0014 when zero

def checkrepeatmusic:

    a = [musicrepeat]
    //If music is supposed to repeat, reset music,-->
    goto _0016 when zero
    //flags else branch to exit.
    a = [currentmusic]
    [currentmusicrepeat] = a
    return

def checkmusicflags:

    //Loads A with current music flags and compares it-->
    a = [currentmusic]
    //with current SFX flags.  If both are equal,-->
    compare a to [currentsfxflags]
    //just clear music counters, else clear everything.
    goto _0017 when zero

def initializesoundaddresses:
        //
def _0016:
    //($B41D)Jumps to all subroutines needed to reset-->
    call clearmusicandsfxaddresses
    //($B43E)all sound addresses in order to start-->
    call clearsounds
def _0017:
    //($B40E)playing music.
    call clearspecialaddresses
    return

def clearspecialaddresses:

    a = 0x0
    //Clears addresses used for repeating music,-->
    [trianglecountercntrl] = a
    //pausing music and controlling triangle length.
    [sfxpaused] = a
    [currentmusicrepeat] = a
    [musicrepeat] = a
    return

def clearmusicandsfxaddresses:
        //
    a = 0x0
    [sq1inuse] = a
    [sq2inuse] = a
    [triangleinuse] = a
    [writemultichanneldata] = a
    //Clears any SFX or music-->
    [noisecontsfx] = a
    //currently being played.
    [sq1contsfx] = a
    [sq2contsfx] = a
    [trianglecontsfx] = a
    [multicontsfx] = a
    [currentmusic] = a
    return

def clearsounds:
                //
    a = 0x10
    [sq1cntrl0] = a
    [sq2cntrl0] = a
    //Clears all sounds that might be in-->
    [noisecntrl0] = a
    //The sound channel registers.
    a = 0x0
    [trianglecntrl0] = a
    [dmccntrl1] = a
    return

def selectsfxroutine:

    x = [channeltype]
    //Stores frame length of SFX in corresponding address.
    [noisesfxlength:x] = a
    a = x
    //Branch if SFX uses noise channel.
    goto _0019 when zero
    compare a to 0x1
    //Branch if SFX uses SQ1 channel.
    goto _0018 when zero
    compare a to 0x2
    //Branch if SFX uses SQ2 channel.
    goto musicbranch00 when zero
    compare a to 0x3
    //Branch if SFX uses triangle wave.
    goto musicbranch01 when zero
    //Exit if SFX routine uses no channels.
    return

def _0018:
    //($B368)Prepare to load SQ1 channel with data.
    call loadsq1channelsfx
    //Branch always.
    goto _001A when zero
def musicbranch00:
                //
    //($B374)Prepare to load SQ2 channel with data.
    call loadsq2channelsfx
    //Branch always.
    goto _001A when zero
def musicbranch01:
                //
    //($B36C)Prepare to load triangle channel with data.
    call loadtrianglechannelsfx
    //Branch always.
    goto _001A when zero
def _0019:
    //($B370)Prepare to load noise channel with data.
    call loadnoisechannelsfx
def _001A:
    //($B493)Set continuation flags for this SFX.
    call updatecontflags
    a = x
    //Indicate sound channel is in use.
    [noiseinuse:x] = a
    a = 0x0
    [thisnoiseframe:x] = a
    //Clears all the following addresses before going-->
    [noisesfxdata:x] = a
    //to the proper SFX handling routine.
    [multisfxdata:x] = a
    [screwattacksfxdata:x] = a
    [writemultichanneldata] = a
    return

def updatecontflags:

def _001B:
    //Loads X register with sound channel just changed.
    x = [channeltype]
    //Clear existing continuation SFX-->
    a = [noisecontsfx:x]
    //flags for that channel.
    a = a & 0x0
    //Load new continuation flags.
    a = a | [currentsfxflags]
    //Save results.
    [noisecontsfx:x] = a
    return

def clearcurrentsfxflags:

    //Once SFX has completed, this block clears the-->
    a = 0x0
    //SFX flag from the current flag register.
    [currentsfxflags] = a
    goto _001B when zero

def incrementsfxframe:

    //Load SFX channel number.
    x = [channeltype]
    //increment current frame to play on given channel.
    [thisnoiseframe:x]++
    //Load current frame to play on given channel.
    a = [thisnoiseframe:x]
    //Check to see if current frame is last frame to play.
    compare a to [noisesfxlength:x]
    goto _001C when ~zero
    //If current frame is last frame,-->
    a = 0x0
    //reset current frame to 0.
    [thisnoiseframe:x] = a
def _001C:
    return

//The CheckSFXFlag routine loads E0 thru E3 with the below values:
//1st  SFX cycle $E0=#$BB, $E1=#$B2, $E2=#$22, $E3=#$B3.  Base address=$B289
//2nd  SFX cycle $E0=#$CB, $E1=#$B2, $E2=#$EE, $E3=#$B4.  Base address=$B28E
//3rd  SFX cycle $E0=#$06, $E1=#$BC, $E2=#$5C, $E3=#$B3.  Base address=$B2A7
//4th  SFX cycle $E0=#$16, $E1=#$BC, $E2=#$64, $E3=#$B3.  Base address=$B2AC
//5th  SFX cycle $E0=#$DB, $E1=#$B2, $E2=#$30, $E3=#$B3.  Base address=$B293
//6th  SFX cycle $E0=#$EB, $E1=#$B2, $E2=#$EE, $E3=#$B4.  Base address=$B298
//7th  SFX cycle $E0=#$FB, $E1=#$B2, $E2=#$44, $E3=#$B3.  Base address=$B29D
//8th  SFX cycle $E0=#$0B, $E1=#$B3, $E2=#$EE, $E3=#$B4.  Base address=$B2A2
//9th  SFX cycle $E0=#$26, $E1=#$BC, $E2=#$3D, $E3=#$BC.  Base address=$B2B6
//10th SFX cycle $E0=#$26, $E1=#$BC, $E2=#$4B, $E3=#$BC.  Base address=$B2B1

def checksfxflag:

    //Store any set flags in $064D.
    [currentsfxflags] = a
    [0xe4] = x
    y = 0xb2
    [0xe5] = y
    //Y=0 for counting loop ahead.
    y = 0x0
def _001D:
    a = [[0xe4]:y]
    //See table above for values loaded into $E0-->
    [0xe0:y] = a
    //thru $E3 during this loop.
    y++
    a = y
    //Loop repeats four times to load the values.
    compare a to 0x4
    goto _001D when ~zero
    a = [[0xe4]:y]
    //#$00=SQ1,#$01=SQ2,#$02=Triangle,#$03=Noise
    [channeltype] = a
    //Set y to 0 for counting loop ahead.
    y = 0x0
    a = [currentsfxflags]
    //Push current SFX flags on stack.
    push a
def _001E:
    [currentsfxflags] = [currentsfxflags] << 1
    //This portion of the routine loops a maximum of-->
    goto _001F when carry
    //eight times looking for any SFX flags that have-->
    y++
    //been set in the current SFX cycle.  If a flag-->
    y++
    //is found, Branch to SFXFlagFound for further-->
    a = y
    //processing, if no flags are set, continue to-->
    compare a to 0x10
    //next SFX cycle.
    goto _001E when ~zero

def restoresfxflags:

    a = pop
    //Restore original data in CurrentSFXFlags.
    [currentsfxflags] = a
def ridley_page_B4EE:
    return

def sfxflagfound:
                //
def _001F:
    //This routine stores the starting address of the-->
    a = [[0xe0]:y]
    //specific SFX handling routine for the SFX flag-->
    [0xe2] = a
    //found.  The address is stored in registers-->
    y++
    //$E2 and $E3.
    a = [[0xe0]:y]
    [0xe3] = a
    //($B4EA)Restore original data in CurrentSFXFlags.
    goto restoresfxflags

//-----------------------------------[ SFX Handling Routines ]---------------------------------------

//The following table is used by the SpitFlamesSFXContinue routine to change the volume-->
//on the SFX.  It starts out quiet, then becomes louder then goes quiet again.
def spitflamestbl:

def ridley_page_B4FB:
    byte: 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1b, 0x1a, 0x19, 0x17
    byte: 0x16, 0x15, 0x14, 0x12

def spitflamesfxstart:

def ridley_page_B50F:
    //Number of frames to play sound before a change.
    a = 0x14
    //Lower byte of sound data start address(base=$B200).
    y = 0x21
    //($B452)Setup registers for SFX.
    goto selectsfxroutine

def spitflamesfxcontinue:

def ridley_page_B516:
    //($B4A9)Get next databyte to process in SFX.
    call incrementsfxframe
    //If more frames to process, branch.
    goto _0020 when ~zero
    //($B58F)End SFX.
    goto endnoisesfx
def _0020:
    y = [noisesfxdata]
    //Load data from table above and store in NoiseCntrl0.
    a = [ridley_page_B4FB:y]
    [noisecntrl0] = a
    //Increment to next entry in data table.
    [noisesfxdata]++
    return

def screwattacksfxstart:

def ridley_page_B52B:
    //Number of frames to play sound before a change.
    a = 0x5
    //Lower byte of sound data start address(base=$B200).
    y = 0x11
    //($B452)Setup registers for SFX.
    call selectsfxroutine
    //#$00.
    a = [0xb213]
    //Clear NoiseSFXData.
    [noisesfxdata] = a
def _0021:
    return

def screwattacksfxcontinue:

def ridley_page_B539:
    //Prevents period index from being incremented until-->
    a = [screwattacksfxdata]
    //after the tenth frame of the SFX.
    compare a to 0x2
    //Branch if not ready to increment.
    goto _0022 when zero
    //($B4A9)Get next databyte to process in SFX.
    call incrementsfxframe
    goto _0021 when ~zero
    //Increment every fifth frame.
    [screwattacksfxdata]++
    return

def _0022:
    //($B4A9)Get next databyte to process in SFX.
    call incrementsfxframe
    //Start increasing period index after first ten frames.
    goto incrementperiodindex when ~zero
    [noisesfxdata]--
    //Decrement NoiseSFXData by three every fifth frame.
    [noisesfxdata]--
    [noisesfxdata]--
    //Increment MultiSFXData.  When it is equal to #$0F-->
    [multisfxdata]++
    //end screw attack SFX.  MultiSFXData does not-->
    a = [multisfxdata]
    //appear to be linked to multi SFX channels in-->
    compare a to 0xf
    //this routine.
    goto _0021 when ~zero
    //($B58F)End SFX.
    goto endnoisesfx

def incrementperiodindex:

    //Incrementing the period index has the effect of-->
    [noisesfxdata]++
    //lowering the frequency of the noise SFX.
    a = [noisesfxdata]
    [noisecntrl2] = a
    return

def missilelaunchsfxstart:

def ridley_page_B56E:
    //Number of frames to play sound before a change.
    a = 0x18
    //Lower byte of sound data start address(base=$B200).
    y = 0x15
    //($B587)Prepare to setup registers for SFX.
    call gotoselectsfxroutine
    a = 0xa
    //Start increment index for noise channel at #$0A.
    [noisesfxdata] = a
    return

def missilelaunchsfxcontine:

def ridley_page_B57B:
    //($B4A9)Get next databyte to process in SFX.
    call incrementsfxframe
    goto incrementperiodindex when ~zero
    //($B58F)End SFX.
    goto endnoisesfx

def bombexplodesfxstart:

def ridley_page_B583:
    //Number of frames to play sound before a change.
    a = 0x30
    //Lower byte of sound data start address(base=$B200).
    y = 0x19

def gotoselectsfxroutine:

def _0023:
    //($B452)Setup registers for SFX.
    goto selectsfxroutine

//The following routine is used to continue BombExplode and SamusWalk SFX.

def noisesfxcontinue:

def ridley_page_B58A:
    //($B4A9)Get next databyte to process in SFX.
    call incrementsfxframe
    //If more frames to process, branch to exit.
    goto musicbranch02 when ~zero

def endnoisesfx:

    //($B4A2)Clear all SFX flags.
    call clearcurrentsfxflags
    a = 0x10
    //disable envelope generator(sound off).
    [noisecntrl0] = a

def musicbranch02:

    //Exit for multiple routines.
    return
 
def samuswalksfxstart:

def ridley_page_B598:
    //If MissileLaunch, SamusWalk or SpitFire SFX are-->
    a = [noisecontsfx]
    //already being played, branch to exit.
    a = a & 0x34
    goto musicbranch02 when ~zero
    //Number of frames to play sound before a change.
    a = 0x3
    //Lower byte of sound data start address(base=$B200).
    y = 0x1d
    //Branch always.
    goto _0023 when ~zero

def multisfxinit:

    [multisfxlength] = a
    //($B374)Set SQ2 SFX data.
    call loadsq2channelsfx
    //($B493)Set continue SFX flag.
    call updatecontflags
    a = 0x1
    //Disable music from using SQ1 and SQ2 while-->
    [sq1inuse] = a
    //SFX are playing.
    a = 0x2
    [sq2inuse] = a
    a = 0x0
    [sq1contsfx] = a
    [sq1sfxdata] = a
    //Clear all listed memory addresses.
    [sq1sq2sfxdata] = a
    [sq1sfxperiodlow] = a
    [thismultiframe] = a
    [writemultichanneldata] = a
    return

def endmultisfx:

    a = 0x10
    //Disable SQ1 envelope generator(sound off).
    [sq1cntrl0] = a
    //Disable SQ2 envelope generator(sound off).
    [sq2cntrl0] = a
    a = 0x7f
    //Disable SQ1 sweep.
    [sq1cntrl1] = a
    //Disable SQ2 sweep.
    [sq2cntrl1] = a
    //($B4A2)Clear all SFX flags.
    call clearcurrentsfxflags
    a = 0x0
    [sq1inuse] = a
    //Allows music player to use SQ1 and SQ2 channels.
    [sq2inuse] = a
    [writemultichanneldata]++
    return

def bosshitsfxstart:

def ridley_page_B5EC:
    //Low byte of SQ1 sound data start address(base=$B200).
    y = 0x2d
    //($B368)Set SQ1 SFX data.
    call loadsq1channelsfx
    //Low byte of SQ2 sound data start address(base=$B200).
    y = 0x29
    //($B5A5)Initiate multi channel SFX.
    goto multisfxinit

def bosshitsfxcontinue:

def ridley_page_B5F6:
    //Increment index to data in table below.
    [sq1sfxdata]++
    y = [sq1sfxdata]
    a = [ridley_page_B63C:y]
    //Load SQ1Cntrl0 and SQ2Cntrl0 from table below.
    [sq1cntrl0] = a
    [sq2cntrl0] = a
    a = [sq1sfxdata]
    //After #$14 frames, end SFX.
    compare a to 0x14
    goto _0025 when zero
    //After six or more frames of SFX, branch.
    compare a to 0x6
    goto _0024 when ~carry
    a = [randomnumber1]
    //Set bit 5.
    a = a | 0x10
    //Randomly set bits 7, 3, 2, 1 and 0.
    a = a & 0x7f
    //Store in SQ1 period low.
    [sq1sfxperiodlow] = a
    a = a <<< 1
    [sq1sq2sfxdata] = a
    //($B62C)Write period low data to SQ1 and SQ2.
    goto writesq1sq2periodlow
def _0024:
    [sq1sq2sfxdata]++
    //Increment SQ1 and SQ2 period low by two.
    [sq1sq2sfxdata]++
    [sq1sfxperiodlow]++
    [sq1sfxperiodlow]++

def writesq1sq2periodlow:

    a = [sq1sq2sfxdata]
    //Write new SQ1 and SQ2 period lows to SQ1 and SQ2-->
    [sq2cntrl2] = a
    //channels.
    a = [sq1sfxperiodlow]
    [sq1cntrl2] = a
    return

def _0025:
    //($B5CD)End SFX.
    goto endmultisfx

def bosshitsfxdatatbl:

def ridley_page_B63C:
    byte: 0x38, 0x3d, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3d, 0x3b, 0x39, 0x3b, 0x3d, 0x3f, 0x3d, 0x3b, 0x39
    byte: 0x3b, 0x3d, 0x3f, 0x39

def samushitsfxcontinue:

def ridley_page_B650:
    //($B4A9)Get next databyte to process in SFX.
    call incrementsfxframe
    //If more SFX frames to process, branch.
    goto _0026 when ~zero
    //($B5CD)End SFX.
    goto endmultisfx
def _0026:
    //Low byte of SQ1 sound data start address(base=$B200).
    y = 0x25
    //($B368)Set SQ1 SFX data.
    call loadsq1channelsfx
    a = [randomnumber1]
    //Randomly set last four bits of SQ1 period low.
    a = a & 0xf
    [sq1cntrl2] = a
    //Low byte of SQ2 sound data start address(base=$B200).
    y = 0x25
    //($B374)Set SQ2 SFX data.
    call loadsq2channelsfx
    a = [randomnumber1]
    //Multiply random number by 4.
    a = a >> 1
    a = a >> 1
    a = a & 0xf
    //Randomly set bits 2 and 3 of SQ2 period low.
    [sq2cntrl2] = a
    return

def samushitsfxstart:

def ridley_page_B673:
    //Low byte of SQ1 sound data start address(base=$B200).
    y = 0x25
    //($B368)Set SQ1 SFX data.
    call loadsq1channelsfx
    a = [randomnumber1]
    //Randomly set last four bits of SQ1 period low.
    a = a & 0xf
    [sq1cntrl2] = a
    carry = 0
    //Randomly set last three bits of SQ2 period low+1.
    a = [randomnumber1]
    a = a & 0x3
    //Number of frames to play sound before a change.
    a = a +# 0x1
    //Low byte of SQ2 sound data start address(base=$B200).
    y = 0x25
    //($B5A5)Initiate multi channel SFX.
    call multisfxinit
    a = [randomnumber1]
    //Multiply random number by 4.
    a = a >> 1
    a = a >> 1
    a = a & 0xf
    //Randomly set bits 2 and 3 of SQ2 period low.
    [sq2cntrl2] = a
def _0027:
    return

def incorrectpasswordsfxstart:

def ridley_page_B695:
    //Low byte of SQ1 sound data start address(base=$B200).
    y = 0x31
    //($B368)Set SQ1 SFX data.
    call loadsq1channelsfx
    //Number of frames to play sound before a change.
    a = 0x20
    //Low byte of SQ2 sound data start address(base=$B200).
    y = 0x35
    //($B5A5)Initiate multi channel SFX.
    goto multisfxinit

def incorrectpasswordsfxcontinue:

def ridley_page_B6A1:
    //($B4A9)Get next databyte to process in SFX.
    call incrementsfxframe
    //If more frames to process, branch to exit.
    goto _0027 when ~zero
    //($B5CD)End SFX.
    goto endmultisfx

//The following table is used by the below routine to load SQ1Cntrl2 data in the-->
//MissilePickupSFXContinue routine.

def missilepickupsfxtbl:

    byte: 0xbd, 0x8d, 0x7e, 0x5e, 0x46, 0x3e, 0x0

def missilepickupsfxcontinue:

def ridley_page_B6B0:
    //($B4A9)Get next databyte to process in SFX.
    call incrementsfxframe
    //If more frames to process, branch to exit.
    goto musicbranch03 when ~zero
    y = [sq1sfxdata]
    //Load SFX data from table above.
    a = [missilepickupsfxtbl:y]
    goto _0028 when ~zero
    //($B6F2)SFX completed.
    goto endsq1sfx
def _0028:
    [sq1cntrl2] = a
    //#$28.
    a = [0xb244]
    //load SQ1Cntrl3 with #$28.
    [sq1cntrl3] = a
    //Increment index to data table above every 5 frames.
    [sq1sfxdata]++

def musicbranch03:

    //Exit from multiple routines.
    return

def missilepickupsfxstart:

def ridley_page_B6CD:
    //Number of frames to play sound before a change.
    a = 0x5
    //Lower byte of sound data start address(base=$B200).
    y = 0x41
    //Branch always.
    goto _002B when ~zero

def energypickupsfxcontinue:

def ridley_page_B6D3:
    //($B4A9)Get next databyte to process in SFX.
    call incrementsfxframe
    //If more frames to process, branch to exit.
    goto musicbranch03 when ~zero
    [sq1sfxdata]++
    //Every six frames, reload SFX info.  Does it-->
    a = [sq1sfxdata]
    //three times for a total of 18 frames.
    compare a to 0x3
    goto _0029 when zero
    y = 0x3d
    //($B368)Set SQ1 SFX data.
    goto loadsq1channelsfx

def energypickupsfxstart:

def ridley_page_B6E7:
    //Number of frames to play sound before a change.
    a = 0x6
    //Lower byte of sound data start address(base=$B200).
    y = 0x3d
    //Branch always.
    goto _002B when ~zero

//The following continue routine is used by the metal, bird out of hole,
//enemy hit and the Samus jump SFXs.

def sq1sfxcontinue:

def ridley_page_B6ED:
    //($B4A9)Get next databyte to process in SFX.
    call incrementsfxframe
    goto musicbranch03 when ~zero

def endsq1sfx:

def _0029:
    a = 0x10
    //Disable envelope generator(sound off).
    [sq1cntrl0] = a
    a = 0x0
    //Allows music to use SQ1 channel.
    [sq1inuse] = a
    //($B4A2)Clear all SFX flags.
    call clearcurrentsfxflags
    //Allows music routines to load SQ1 and SQ2 music.
    [writemultichanneldata]++
    return

def samusjumpsfxstart:

def ridley_page_B703:
    //If escape music is playing, exit without playing-->
    a = [currentmusic]
    //Samus jump SFX.
    compare a to 0x4
    goto musicbranch03 when zero
    //Number of frames to play sound before a change.
    a = 0xc
    //Lower byte of sound data start address(base=$B200).
    y = 0x51
    //Branch always.
    goto selectsfx1 when ~zero

def enemyhitsfxstart:

def ridley_page_B710:
    //Number of frames to play sound before a change.
    a = 0x8
    //Lower byte of sound data start address(base=$B200).
    y = 0x55
    //Branch always.
    goto selectsfx1 when ~zero

def bulletfiresfxstart:

def ridley_page_B716:
    a = [hasbeamsfx]
    //If Samus has ice beam, branch.
    a = a >> 1
    goto _002E when carry
    //If MissilePickup, EnergyPickup, BirdOutOfHole-->
    a = [sq1contsfx]
    //or EnemyHit SFX already playing, branch to exit.
    a = a & 0xcc
    goto musicbranch03 when ~zero
    a = [hasbeamsfx]
    //If Samus has long beam, branch.
    a = a << 1
    goto _002A when carry
    //Number of frames to play sound before a change.
    a = 0x3
    //Lower byte of sound data start address(base=$B200).
    y = 0x4d
    //Branch always (Plays ShortBeamSFX).
    goto selectsfx1 when ~zero

def haslongbeamsfxstart:

def _002A:
    //Number of frames to play sound before a change.
    a = 0x7
    //Lower byte of sound data start address(base=$B200).
    y = 0x49
    //Branch always.
    goto selectsfx1 when ~zero

def metalsfxstart:

def ridley_page_B735:
    //Number of frames to play sound before a change.
    a = 0xb
    //Lower byte of sound data start address(base=$B200).
    y = 0x45

def selectsfx1:

def _002B:
    //($B452)Setup registers for SFX.
    goto selectsfxroutine

def birdoutofholesfxstart:

def ridley_page_B73C:
    //If escape music is playing, use this SFX to make-->
    a = [currentmusic]
    //the bomb ticking sound, else play regular SFX.
    compare a to 0x4
    goto _002C when zero
    //Number of frames to play sound before a change.
    a = 0x16
    //Lower byte of sound data start address(base=$B200).
    y = 0x59
    //Branch always.
    goto selectsfx1 when ~zero
def _002C:
    //Number of frames to play sound before a change.
    a = 0x7
    //Lower byte of sound data start address(base=$B200).
    y = 0x39
    //Branch always.
    goto selectsfx1 when ~zero

def bulletfiresfxcontinue:

def ridley_page_B74F:
    a = [hasbeamsfx]
    //If Samus has ice beam, branch.
    a = a >> 1
    goto _002F when carry
    //($B4A9)Get next databyte to process in SFX.
    call incrementsfxframe
    //If more frames to process, branch to exit.
    goto _002D when ~zero
    //($B6F2)If SFX finished, jump.
    goto endsq1sfx
def _002D:
    return

def hasicebeamsfxstart:

def _002E:
    //Number of frames to play sound before a change.
    a = 0x7
    //Lower byte of sound data start address(base=$B200).
    y = 0x61
    //($B452)Setup registers for SFX.
    goto selectsfxroutine

def hasicebeamsfxcontinue:

def _002F:
    //($B4A9)Get next databyte to process in SFX.
    call incrementsfxframe
    //If more frames to process, branch.
    goto _0030 when ~zero
    //($B6F2)If SFX finished, jump.
    goto endsq1sfx
def _0030:
    a = [sq1sfxdata]
    //Determine index for IceBeamSFXDataTbl below.
    a = a & 0x1
    y = a
    //Loads A with value from IceBeamSFXDataTbl below.
    a = [icebeamsfxdatatbl:y]
    goto _0032 when ~zero

def icebeamsfxdatatbl:

    //Ice beam SFX period low data.
    byte: 0x93
    byte: 0x81

def wavebeamsfxstart:

def ridley_page_B77A:
    //Number of frames to play sound before a change.
    a = 0x8
    //Lower byte of sound data start address(base=$B200).
    y = 0x5d
    //($B452)Setup registers for SFX.
    goto selectsfxroutine

def wavebeamsfxcontinue:

def ridley_page_B781:
    //($B4A9)Get next databyte to process in SFX.
    call incrementsfxframe
    //If more frames to process, branch.
    goto _0031 when ~zero
    y = [sq1sq2sfxdata]
    //Load wave beam SFXDisable/enable envelope length-->
    [sq1sq2sfxdata]++
    //data from WaveBeamSFXDisableLengthTbl.
    a = [wavebeamsfxdislngthtbl:y]
    [sq1cntrl0] = a
    //If at end of WaveBeamSFXDisableLengthTbl, end SFX.
    goto musicbranch10 when ~zero
    //($B6F2)If SFX finished, jump.
    goto endsq1sfx
def _0031:
    a = [sq1sfxdata]
    a = a & 0x1
    //Load wave beam SFX period low data from-->
    y = a
    //WaveBeamSFXPeriodLowTbl.
    a = [wavebeamsfxperiodlowtbl:y]

def loadsq1periodlow:

def _0032:
    //Change the period low data for SQ1 channel.
    [sq1cntrl2] = a
    [sq1sfxdata]++

def musicbranch10:

    //Exit for multiple routines.
    return
 
def wavebeamsfxperiodlowtbl:

    //Wave beam SFX period low data.
    byte: 0x58
    byte: 0x6f

def wavebeamsfxdislngthtbl:

    byte: 0x93
    //Wave beam SFX Disable/enable envelope length data.
    byte: 0x91
    byte: 0x0

def dooropenclosesfxstart:

def ridley_page_B7AC:
    //#$30.
    a = [0xb287]
    //Set triangle period low data byte.
    [triangleperiodlow] = a
    //#$B2.
    a = [0xb288]
    //Set triangle period high data byte.
    a = a & 0x7
    //#$B7.
    [triangleperiodhigh] = a
    a = 0xf
    //Change triangle channel period low every frame by #$0F.
    [trianglechangelow] = a
    a = 0x0
    //No change in triangle channel period high.
    [trianglechangehigh] = a
    //Number of frames to play sound before a change.
    a = 0x1f
    //Lower byte of sound data start address(base=$B200).
    y = 0x85
    //($B452)Setup registers for SFX.
    goto selectsfxroutine

def dooropenclosesfxcontinue:

def ridley_page_B7CB:
    //($B4A9)Get next databyte to process in SFX.
    call incrementsfxframe
    goto _0033 when ~zero
    //($B896)End SFX.
    goto endtrianglesfx
def _0033:
    //($B98C)Decrease periods.
    call decreasetriangleperiods
    //($B869)Save new periods.
    goto writetriangleperiods

def beepsfxstart:

def ridley_page_B7D9:
    //If BombLaunchSFX is already playing, branch-->
    a = [trianglecontsfx]
    //without playing BeepSFX.
    a = a & 0x80
    goto musicbranch10 when ~zero
    //Number of frames to play sound before a change.
    a = 0x3
    //Lower byte of sound data start address(base=$B200).
    y = 0x79
    //($B452)Setup registers for SFX.
    goto selectsfxroutine

def beepsfxcontinue:

def ridley_page_B7E7:
    //($B4A9)Get next databyte to process in SFX.
    call incrementsfxframe
    //If more frames to process, branch to exit.
    goto musicbranch10 when ~zero
    //($B896)End SFX.
    goto endtrianglesfx

def bigenemyhitsfxstart:

def ridley_page_B7EF:
    //Increase triangle low period by #$12 every frame.
    a = 0x12
    [trianglechangelow] = a
    a = 0x0
    //Does not change triangle period high.
    [trianglechangehigh] = a
    //#$42.
    a = [0xb27f]
    //Save new triangle period low data.
    [triangleperiodlow] = a
    //#$18.
    a = [0xb280]
    //#$1F.
    a = a & 0x7
    //Save new triangle period high data.
    [triangleperiodhigh] = a
    //Number of frames to play sound before a change.
    a = 0xa
    //Lower byte of sound data start address(base=$B200).
    y = 0x7d
    //($B452)Setup registers for SFX.
    goto selectsfxroutine

def bigenemyhitsfxcontinue:

def ridley_page_B80E:
    //($B4A9)Get next databyte to process in SFX.
    call incrementsfxframe
    //If more frames to process, branch
    goto _0034 when ~zero
    //($B896)End SFX
    goto endtrianglesfx
def _0034:
    //($B978)Increase periods.
    call increasetriangleperiods
    a = [randomnumber1]
    a = a & 0x3c
    [trianglesfxdata] = a
    //Randomly set or clear bits 2, 3, 4 and 5 in-->
    a = [triangleperiodlow]
    //triangle channel period low.
    a = a & 0xc3
    a = a | [trianglesfxdata]
    [trianglecntrl2] = a
    a = [triangleperiodhigh]
    //Set 4th bit in triangle channel period high.
    a = a | 0x40
    [trianglecntrl3] = a
    return

def samustoballsfxstart:

def ridley_page_B834:
    //Number of frames to play sound before a change.
    a = 0x8
    //Lower byte of sound data start address(base=$B200).
    y = 0x6d
    //($B452)Setup registers for SFX.
    call selectsfxroutine
    a = 0x5
    //Stores percent difference. In this case 5 = 1/5 = 20%.
    [percentdifference] = a
    //#$DD.
    a = [0xb26f]
    //Save new triangle period low data.
    [triangleperiodlow] = a
    //#$3B.
    a = [0xb270]
    //#$02.
    a = a & 0x7
    //Save new triangle period high data.
    [triangleperiodhigh] = a
    return

def samustoballsfxcontinue:

def ridley_page_B84F:
    //($B4A9)Get next databyte to process in SFX.
    call incrementsfxframe
    //If more frames to process, branch.
    goto _0035 when ~zero
    //($B896)End SFX.
    goto endtrianglesfx
def _0035:
    //($B9A0)reduces triangle period low by 20% each frame.
    call dividetriangleperiods
    a = [trianglelowpercentage]
    //Store new values to change triangle periods.
    [trianglechangelow] = a
    a = [trianglehighpercentage]
    [trianglechangehigh] = a
    //($B98C)Decrease periods.
    call decreasetriangleperiods

def writetriangleperiods:

    //Write TrianglePeriodLow to triangle channel.
    a = [triangleperiodlow]
    [trianglecntrl2] = a
    a = [triangleperiodhigh]
    //Write TrianglePeriodHigh to triangle channel.
    a = a | 0x8
    [trianglecntrl3] = a
    return

def bomblaunchsfxstart:

def ridley_page_B878:
    //Number of frames to play sound before a change.
    a = 0x4
    //Lower byte of sound data start address(base=$B200).
    y = 0x65
    //($B452)Setup registers for SFX.
    goto selectsfxroutine

def bomblaunchsfxcontinue:

def ridley_page_B87F:
    //($B4A9)Get next databyte to process in SFX.
    call incrementsfxframe
    //If more frames to process, branch to exit.
    goto musicbranch04 when ~zero
    [trianglesfxdata]++
    //After four frames, load second part of SFX.
    a = [trianglesfxdata]
    compare a to 0x2
    goto _0036 when ~zero
    //($B896)End SFX.
    goto endtrianglesfx
def _0036:
    //Lower byte of sound data start address(base=$B200).
    y = 0x69
    //($B36C)Prepare to load triangle channel with data.
    goto loadtrianglechannelsfx

def endtrianglesfx:

    a = 0x0
    //clear TriangleCntr0(sound off).
    [trianglecntrl0] = a
    //Allows music to use triangle channel.
    [triangleinuse] = a
    a = 0x18
    //Set length index to #$03.
    [trianglecntrl3] = a
    //($B4A2)Clear all SFX flags.
    call clearcurrentsfxflags

def musicbranch04:

    //Exit from for multiple routines.
    return

def metroidhitsfxstart:

def ridley_page_B8A7:
    //Number of frames to play sound before a change.
    a = 0x3
    //Lower byte of sound data start address(base=$B200).
    y = 0x71
    //($B452)Setup registers for SFX.
    call selectsfxroutine
    //($B8C3)MetroidHit SFX has several different sounds.
    goto rndtriangleperiods

def metroihitsfxcontinue:

def ridley_page_B8B1:
    //($B4A9)Get next databyte to process in SFX.
    call incrementsfxframe
    goto _0037 when zero
    [trianglesfxdata]++
    //Randomize triangle periods nine times throughout-->
    a = [trianglesfxdata]
    //the course of the SFX.
    compare a to 0x9
    //If SFX not done, branch.
    goto musicbranch04 when ~zero
    //($B896)End SFX.
    goto endtrianglesfx

def rndtriangleperiods:

def _0037:
    //Randomly set or reset bits 7, 4, 2 and 1 of-->
    a = [randomnumber1]
    //triangle channel period low.
    a = a | 0x6c
    [trianglecntrl2] = a
    a = a & 0x1
    //Randomly set or reset last bit of triangle-->
    a = a | 0xf8
    //channel period high.
    [trianglecntrl3] = a
    return

def samusdiesfxstart:

def ridley_page_B8D2:
    //($B404)Clear all sound addresses.
    call initializesoundaddresses
    //Number of frames to play sound before a change.
    a = 0xe
    //Lower byte of sound data start address(base=$B200).
    y = 0x75
    //($B452)Setup registers for SFX.
    call selectsfxroutine
    //Decrease triangle SFX periods by 4.8% every frame.
    a = 0x15
    [percentdifference] = a
    //#$40.
    a = [0xb277]
    [triangleperiodlow] = a
    //Initial values of triangle periods.
    a = 0x0
    [triangleperiodhigh] = a
def _0038:
    return

def samusdiesfxcontinue:

def ridley_page_B8ED:
    //($B4A9)Get next databyte to process in SFX.
    call incrementsfxframe
    goto _0039 when ~zero
    //Store change in triangle period low.
    a = 0x20
    [trianglechangelow] = a
    a = 0x0
    //No change in triangle period high.
    [trianglechangehigh] = a
    //($B98C)Decrease periods.
    call decreasetriangleperiods
    [trianglesfxdata]++
    a = [trianglesfxdata]
    compare a to 0x6
    //If more frames to process, branch to exit.
    goto _0038 when ~zero
    //($B896)End SFX.
    goto endtrianglesfx
def _0039:
    //($B9A0)reduces triangle period low.
    call dividetriangleperiods
    a = [trianglelowpercentage]
    //Update triangle periods.
    [trianglechangelow] = a
    a = [trianglehighpercentage]
    [trianglechangehigh] = a
    //($B978)Increase periods.
    call increasetriangleperiods
    //($B869)Save new periods.
    goto writetriangleperiods

def statueraisesfxstart:

def ridley_page_B921:
    //#$11.
    a = [0xb283]
    //Save period low data.
    [triangleperiodlow] = a
    //#$09.
    a = [0xb284]
    a = a & 0x7
    //Store last three bits in $B284.
    [triangleperiodhigh] = a
    a = 0x0
    //No change in Triangle period high.
    [trianglechangehigh] = a
    a = 0xb
    [trianglechangelow] = a
    //Number of frames to play sound before a change.
    a = 0x6
    //Lower byte of sound data start address(base=$B200).
    y = 0x81
    //($B452)Setup registers for SFX.
    goto selectsfxroutine

def statueraisesfxcontinue:

def ridley_page_B940:
    //($B4A9)Get next databyte to process in SFX.
    call incrementsfxframe
    goto _003B when ~zero
    //Increment TriangleSFXData every 6 frames.
    [trianglesfxdata]++
    a = [trianglesfxdata]
    //When TriangleSFXData = #$09, end SFX.
    compare a to 0x9
    goto _003A when ~zero
    //($B896)End SFX.
    goto endtrianglesfx
def _003A:
    a = [trianglechangelow]
    //Save triangle periods.
    push a
    a = [trianglechangehigh]
    push a
    a = 0x25
    [trianglechangelow] = a
    //No change in triangle period high.
    a = 0x0
    [trianglechangehigh] = a
    //($B978)Increase periods.
    call increasetriangleperiods
    a = pop
    //Restore triangle periods.
    [trianglechangehigh] = a
    a = pop
    [trianglechangelow] = a
    //($B869)Save new periods.
    goto writetriangleperiods
def _003B:
    //($B98C)Decrease periods.
    call decreasetriangleperiods
    //($B869)Save new periods.
    goto writetriangleperiods

def increasetriangleperiods:

    carry = 0
    a = [triangleperiodlow]
    //Calculate new TrianglePeriodLow.
    a = a +# [trianglechangelow]
    [triangleperiodlow] = a
    a = [triangleperiodhigh]
    //Calculate new TrianglePeriodHigh.
    a = a +# [trianglechangehigh]
    [triangleperiodhigh] = a
    return

def decreasetriangleperiods:

    carry = 1
    a = [triangleperiodlow]
    //Calculate new TrianglePeriodLow.
    a = a -# [trianglechangelow]
    [triangleperiodlow] = a
    a = [triangleperiodhigh]
    //Calculate new TrianglePeriodHigh.
    a = a -# [trianglechangehigh]
    [triangleperiodhigh] = a
    return

def dividetriangleperiods:

    a = [triangleperiodlow]
    //Store TrianglePeriodLow and TrianglePeriodHigh.
    push a
    a = [triangleperiodhigh]
    push a
    a = 0x0
    [dividedata] = a
    x = 0x10
    [triangleperiodlow] = [triangleperiodlow] <<< 1
    [triangleperiodhigh] = [triangleperiodhigh] <<< 1
def _003C:
    //The following routine takes the triangle period-->
    [dividedata] = [dividedata] <<< 1
    //high and triangle period low values and reduces-->
    a = [dividedata]
    //them by a certain percent.  The percent is-->
    compare a to [percentdifference]
    //determined by the value stored in-->
    goto _003D when ~carry
    //PercentDifference.  If PercentDifference=#$05,-->
    a = a -# [percentdifference]
    //then the values will be reduced by 20%(1/5).-->
    [dividedata] = a
def _003D:
    //If PercentDifference=#$0A,Then the value will-->
    [triangleperiodlow] = [triangleperiodlow] <<< 1
    //be reduced by 10%(1/10), etc. This function is-->
    [triangleperiodhigh] = [triangleperiodhigh] <<< 1
    //basically a software emulation of a sweep function.
    x--
    goto _003C when ~zero
    a = [triangleperiodlow]
    [trianglelowpercentage] = a
    a = [triangleperiodhigh]
    [trianglehighpercentage] = a
    a = pop
    //Restore TrianglePerodLow and TrianglePeriodHigh.
    [triangleperiodhigh] = a
    a = pop
    [triangleperiodlow] = a
    return

//--------------------------------------[ End SFX routines ]-------------------------------------
 
def setvolumeanddisablesweep:

    a = 0x7f
    //Disable sweep generator on SQ1 and SQ2.
    [musicsq1sweep] = a
    [musicsq2sweep] = a
    //Store duty cycle and volume data for SQ1 and SQ2.
    [sq1dutyenvelope] = x
    [sq2dutyenvelope] = y
    return

def resetvolumeindex:

    //If at the beginning of a new SQ1 note, set-->
    a = [sq1musicframecount]
    //SQ1VolumeIndex = #$01.
    compare a to 0x1
    goto _003E when ~zero
    [sq1volumeindex] = a
def _003E:
    a = [sq2musicframecount]
    //If at the beginning of a new SQ2 note, set-->
    compare a to 0x1
    //SQ2VolumeIndex = #$01.
    goto _003F when ~zero
    [sq2volumeindex] = a
def _003F:
    return

def loadsq1sq2periods:

    //If a Multi channel data does not need to be-->
    a = [writemultichanneldata]
    //loaded, branch to exit.
    goto _0040 when zero
    a = 0x0
    //Clear multi channel data write flag.
    [writemultichanneldata] = a
    a = [musicsq1sweep]
    [sq1cntrl1] = a
    a = [musicsq1periodlow]
    //Loads SQ1 channel addresses $4001, $4002, $4003.
    [sq1cntrl2] = a
    a = [musicsq1periodhigh]
    [sq1cntrl3] = a
    a = [musicsq2sweep]
    [sq2cntrl1] = a
    a = [musicsq2periodlow]
    //Loads SQ2 channel addresses $4005, $4006, $4007.
    [sq2cntrl2] = a
    a = [musicsq2periodhigh]
    [sq2cntrl3] = a
def _0040:
    return

def loadsq1sq2channels:

    //Load SQ1 channel data.
    x = 0x0
    //($BA41)Write Cntrl0 data.
    call writesqcntrl0
    //Load SQ2 channel data.
    x++
    //($BA41)Write Cntrl0 data.
    call writesqcntrl0
    return

def writesqcntrl0:

    //Load SQ channel volume data. If zero, branch to exit.
    a = [sq1volumecntrl:x]
    goto _0045 when zero
    [volumecntrladdress] = a
    //($BA08)Load SQ1 and SQ2 control information.
    call loadsq1sq2periods
    a = [sq1volumedata:x]
    //If sound channel is not currently-->
    compare a to 0x10
    //playing sound, branch.
    goto _0047 when zero
    y = 0x0
def _0041:
    //Desired entry in VolumeCntrlAdressTbl.
    [volumecntrladdress]--
    goto _0042 when zero
    //*2(2 byte address to find voulume control data).
    y++
    y++
    //Keep decrementing until desired address is found.
    goto _0041 when ~zero
def _0042:
    //Base is $BCB0.
    a = [volumecntrladdresstbl:y]
    //Volume data address low byte.
    [0xec] = a
    //Base is $BCB1.
    a = [volumecntrladdresstbl+1:y]
    //Volume data address high byte.
    [0xed] = a
    //Index to desired volume data.
    y = [sq1volumeindex:x]
    //Load desired volume for current channel into-->
    a = [[0xec]:y]
    //Cntrl0Data.
    [cntrl0data] = a
    //If last entry in volume table is #$FF, restore-->
    compare a to 0xff
    //volume to its original level after done reading-->
    goto musicbranch05 when zero
    //Volume data.  If #$F0 is last entry, turn sound-->
    compare a to 0xf0
    //off on current channel until next note.
    goto musicbranch06 when zero
    //Remove duty cycle data For current channel and-->
    a = [sq1dutyenvelope:x]
    //add this frame of volume data and store results-->
    a = a & 0xf0
    //in Cntrl0Data.
    a = a | [cntrl0data]
    y = a
def _0043:
    //Increment Index to volume data.
    [sq1volumeindex:x]++
def _0044:
    //If SQ1 or SQ2(depends on loop iteration) in use,-->
    a = [sq1inuse:x]
    //branch to exit, else write SQ(1 or 2)Cntrl0.
    goto _0045 when ~zero
    a = x
    //If currently on SQ1, branch to write SQ1 data.
    goto _0046 when zero

def writesq2cntrl0:
                //
    //Write SQ2Cntrl0 data.
    [sq2cntrl0] = y
def _0045:
    return

def writesq1cntrl0:
                //
def _0046:
    //Write SQ1Cntrl0 data.
    [sq1cntrl0] = y
    return

def musicbranch05:

    //Restore original volume of sound channel.
    y = [sq1dutyenvelope:x]
    //Branch always.
    goto _0044 when ~zero

def musicbranch06:

    //Disable envelope generator and set volume to 0.
    y = 0x10
    //Branch always.
    goto _0044 when ~zero
def _0047:
    //Disable envelope generator and set volume to 0.
    y = 0x10
    //Branch always.
    goto _0043 when ~zero

def gotocheckrepeatmusic:

def _0048:
    //($B3F0)Resets music flags if music repeats.
    call checkrepeatmusic
    return

def gotoloadsq1sq2channels:

def _0049:
    //($BA37)Load SQ1 and SQ2 channel data.
    call loadsq1sq2channels
    return

def loadcurrentmusicframedata:

    //($B9F3)Reset index if at the beginning of a new note.
    call resetvolumeindex
    a = 0x0
    //X = #$00.
    x = a
    //(#$00, #$04, #$08 or #$0C).
    [thissoundchannel] = a
    goto _004B when zero
def _004A:
    a = x
    a = a >> 1
    //Increment to next sound channel(1,2 or 3).
    x = a
                    //
def incrementtonextchannel:
            //
    x++
    a = x
    //If done with four sound channels, branch to load-->
    compare a to 0x4
    //sound channel SQ1 SQ2 data.
    goto _0049 when zero
    //Add 4 to the least significant byte of the current-->
    a = [thissoundchannel]
    //sound channel start address.  This moves to next-->
    carry = 0
    //sound channel address ranges to process.
    a = a +# 0x4
    [thissoundchannel] = a
def _004B:
    a = x
    //*2(two bytes for sound channel info base address).
    a = a << 1
    x = a
    a = [sq1lowbasebyte:x]
    //Load sound channel info base address into $E6-->
    [0xe6] = a
    //and $E7. ($E6=low byte, $E7=high byte).
    a = [sq1highbasebyte:x]
    [0xe7] = a
    //If no data for this sound channel, branch-->
    a = [sq1highbasebyte:x]
    //to find data for next sound channel.
    goto _004A when zero
    a = x
    ///2. Determine current sound channel (0,1,2 or3).
    a = a >> 1
    x = a
    //Decrement the current sound channel frame count-->
    [sq1musicframecount:x]--
    //If not zero, branch to check next channel, else-->
    goto incrementtonextchannel when ~zero
                    //load the next set of sound channel data.
def loadnextchannelindexdata:

    //Load current channel index to music data index.
    y = [sq1musicindexindex:x]
    //Increment current channel index to music data index.
    [sq1musicindexindex:x]++
    a = [[0xe6]:y]
    //Branch if music has reached the end.
    goto _0048 when zero
    //Transfer music data index to Y (base=$BE77) .
    y = a
    compare a to 0xff
    //At end of loop? If yes, branch.
    goto _004C when zero
    a = a & 0xc0
    //At beginnig of new loop? if yes, branch.
    compare a to 0xc0
    goto _004D when zero
    //($BB1C)Load music data into channel.
    goto loadmusicchannel

def repeatmusicloop:

def _004C:
    //If loop counter has reached zero, branch to exit.
    a = [sq1repeatcounter:x]
    goto _004E when zero
    //Decrement loop counter.
    [sq1repeatcounter:x]--
    //Load loop index for proper channel and store it in-->
    a = [sq1loopindex:x]
    //music index index address.
    [sq1musicindexindex:x] = a
    //Branch unless music has reached the end.
    goto _004E when ~zero

def startnewmusicloop:

def _004D:
    a = y
    //Remove last six bits of loop controller and save-->
    a = a & 0x3f
    //in repeat counter addresses.  # of times to loop.
    [sq1repeatcounter:x] = a
    //Decrement loop counter.
    [sq1repeatcounter:x]--
    //Store location of loop start in loop index address.
    a = [sq1musicindexindex:x]
    [sq1loopindex:x] = a
def _004E:
    //($BADC)Load next channel index data.
    goto loadnextchannelindexdata

def _004F:
    //($BBDE)Load data for noise channel music.
    goto loadnoisechannelmusic

def _0050:
    //($BBB7)Load Cntrl0 byte of triangle channel.
    goto loadtrianglecntrl0

def loadmusicchannel:

    a = y
    a = a & 0xb0
    //Is data byte music note length data?  If not, branch.
    compare a to 0xb0
    goto _0051 when ~zero
    a = y
    //Separate note length data.
    a = a & 0xf
    carry = 0
    //Find proper note lengths table for current music.
    a = a +# [notelengthtbloffset]
    y = a
    //(Base is $BEF7)Load note length and store in-->
    a = [notelengths0tbl:y]
    //frame count init address.
    [sq1framecountinit:x] = a
    //Y now contains note length.
    y = a
    a = x
    //If loading Triangle channel data, branch.
    compare a to 0x2
    goto _0050 when zero

def loadsounddataindexindex:

    //Load current index to sound data index.
    y = [sq1musicindexindex:x]
    //Increment music index index address.
    [sq1musicindexindex:x]++
    //Load index to sound channel music data.
    a = [[0xe6]:y]
    y = a
def _0051:
    a = x
    //If loading Noise channel data, branch.
    compare a to 0x3
    goto _004F when zero
    //Push music channel number on stack(0, 1 or 2).
    push a
    x = [thissoundchannel]
    //(Base=$BE78)Load A with music channel period low data.
    a = [musicnotestbl+1:y]
    //If data is #$00, skip period high and low loading.
    goto _0052 when zero
    //Store period low data in proper period low address.
    [musicsq1periodlow:x] = a
    //(Base=$BE77)Load A with music channel period high data.
    a = [musicnotestbl:y]
    //Ensure minimum index length of 1.
    a = a | 0x8
    //Store period high data in proper period high address.
    [musicsq1periodhigh:x] = a
def _0052:
    y = a
    //Pull stack and restore channel number to X.
    a = pop
    x = a
    a = y
    //If period information was present, branch.
    goto _0053 when ~zero
                
def noperiodinformation:

    //Turn off channel volume since no period data present.
    a = 0x0
    [cntrl0data] = a
    a = x
    //If loading triangle channel data, branch.
    compare a to 0x2
    goto _0054 when zero
    //Turn off volume and disable env. generator(SQ1,SQ2).
    a = 0x10
    [cntrl0data] = a
    //Branch always.
    goto _0054 when ~zero

def periodinformationfound:

def _0053:
    //Store channel duty cycle and volume info in $EA.
    a = [sq1dutyenvelope:x]
    [cntrl0data] = a
def _0054:
    a = x
    [sq1inuse:x]--
    //If SQ1 or SQ2 are being used by SFX routines, branch.
    compare a to [sq1inuse:x]
    goto _0057 when zero
    //Restore not in use status of SQ1 or SQ2.
    [sq1inuse:x]++
    y = [thissoundchannel]
    a = x
    //If loading triangle channel data, branch.
    compare a to 0x2
    goto _0055 when zero
    //If $062E or $062F has volume data, skip writing-->
    a = [sq1volumecntrl:x]
    //Cntrl0Data to SQ1 or SQ2.
    goto _0056 when ~zero
def _0055:
    a = [cntrl0data]
    //Write Cntrl0Data.
    [sq1cntrl0:y] = a
def _0056:
    a = [cntrl0data]
    //Store volume data index to volume data.
    [sq1volumedata:x] = a
    a = [musicsq1periodlow:y]
    [sq1cntrl2:y] = a
    //Write data to three sound channel addresses.
    a = [musicsq1periodhigh:y]
    [sq1cntrl3:y] = a
    a = [musicsq1sweep:x]
    [sq1cntrl1:y] = a

def loadnewmusicframecount:

    //Load new music frame count and store it in music-->
    a = [sq1framecountinit:x]
    //frame count address.
    [sq1musicframecount:x] = a
    //($BAB3)Move to next sound channel.
    goto incrementtonextchannel

def sq1sq2inuse:

def _0057:
    //Restore in use status of SQ1 or SQ1.
    [sq1inuse:x]++
    //($BBA8)Load new music frame count.
    goto loadnewmusicframecount

def loadtrianglecntrl0:

    a = [trianglecountercntrl]
    //If lower bits set, branch to play shorter note.
    a = a & 0xf
    goto _0059 when ~zero
    a = [trianglecountercntrl]
    //If upper bits are set, branch to play longer note.
    a = a & 0xf0
    goto _0058 when ~zero
    a = y
    //($BBCD)Calculate length to play note.
    goto addtrianglelength
def _0058:
    //Disable length cntr(play until triangle data changes).
    a = 0xff
    //Branch always.
    goto _0059 when ~zero

def addtrianglelength:

    carry = 0
    //Add #$FF(Effectively subtracts 1 from A).
    a = a +# 0xff
    //*2.
    a = a << 1
    //*2.
    a = a << 1
    compare a to 0x3c
    //If result is greater than #$3C, store #$3C(highest-->
    goto _0059 when ~carry
    //triangle linear count allowed).
    a = 0x3c
def _0059:
    [trilinearcount] = a
def _005A:
    //($BB37)Load index to sound data index.
    goto loadsounddataindexindex

def loadnoisechannelmusic:

    a = [noisecontsfx]
    //If playing any Noise SFX, branch to exit.
    a = a & 0xfc
    goto _005B when ~zero
    a = [ridley_page_B200:y]
    //Load noise channel with drum beat SFX starting-->
    [noisecntrl0] = a
    //at address B201.  The possible values of Y are-->
    a = [ridley_page_B201:y]
    //#$01, #$04, #$07 or #$0A.
    [noisecntrl2] = a
    a = [0xb202:y]
    [noisecntrl3] = a
def _005B:
    //($BBA8)Load new music frame count.
    goto loadnewmusicframecount

//The following table is used by the InitializeMusic routine to find the index for loading
//addresses $062B thru $0637.  Base is $BD31.

def initmusicindextbl:

    //Ridley area music.
    byte: 0x41
    //Tourian music.
    byte: 0x8f
    //Item room music.
    byte: 0x34
    //Kraid area music.
    byte: 0x27
    //Norfair music.
    byte: 0x1a
    //Escape music.
    byte: 0xd
    //Mother brain music.
    byte: 0x0
    //Brinstar music.
    byte: 0x82
    //Fade in music.
    byte: 0x68
    //Power up music.
    byte: 0x75
    //End music.
    byte: 0x4e
    //Intro music.
    byte: 0x5b

//The tables below contain addresses for SFX and music handling routines.
//Multi channel Init SFX and music handling routine addresses:

def ridley_page_BC06:
    //Fade in music.
    word: ridley_page_BC80
    //Power up music.
    word: ridley_page_BC7A
    //End game music.
    word: ridley_page_BC86
    //Intro music.
    word: ridley_page_BC7A
    //No sound.
    word: ridley_page_B4EE
    //Samus hit init SFX.
    word: ridley_page_B673
    //Boss hit init SFX.
    word: ridley_page_B5EC
    //Incorrect password init SFX.
    word: ridley_page_B695

//Multi channel continue SFX handling routine addresses:

def ridley_page_BC16:
    //No sound.
    word: ridley_page_B4EE
    //No sound.
    word: ridley_page_B4EE
    //No sound.
    word: ridley_page_B4EE
    //No sound.
    word: ridley_page_B4EE
    //No sound.
    word: ridley_page_B4EE
    //Samus hit continue SFX.
    word: ridley_page_B650
    //Boss hit continue SFX.
    word: ridley_page_B5F6
    //Incorrect password continue SFX.
    word: ridley_page_B6A1

//Music handling routine addresses:

def ridley_page_BC26:
    //Ridley area music.
    word: ridley_page_BC83
    //Tourian music.
    word: ridley_page_BC77
    //Item room music.
    word: ridley_page_BC77
    //Kraid area music.
    word: ridley_page_BC77
    //Norfair music.
    word: ridley_page_BC80
    //Escape music.
    word: ridley_page_BC7D
    //Mother brain music.
    word: ridley_page_BC77
    //Brinstar music.
    word: ridley_page_BC80

//-----------------------------------[ Entry point for music routines ]--------------------------------

def loadmusictempflags:

    //Load A with temp music flags, (9th SFX cycle).
    a = [currentmusicrepeat]
    //Lower address byte in ChooseNextSFXRoutineTbl.
    x = 0xb6
    //Branch always.
    goto _005C when ~zero

def loadmusicinitflags:

    //Load A with Music flags, (10th SFX cycle).
    a = [musicinitflag]
    //Lower address byte in ChooseNextSFXRoutineTbl.
    x = 0xb1
def _005C:
    //($B4BD)Checks to see if SFX or music flags set.
    call checksfxflag
    //($BC53)Find bit containing music init flag.
    call findmusicinitindex
    //If no flag found, Jump to next SFX cycle,-->
    goto [0xe2]
                    //else jump to specific SFX handling subroutine.

def continuemusic:
                //11th and last SFX cycle.
    a = [currentmusic]
    //Branch to exit of no music playing.
    goto _005F when zero
    //($BAA5)Load info for current frame of music data.
    goto loadcurrentmusicframedata

//MusicInitIndex values correspond to the following music:
//#$00=Ridley area music, #$01=Tourian music, #$02=Item room music, #$03=Kraid area music,
//#$04=Norfair music, #$05=Escape music, #$06=Mother brain music, #$07=Brinstar music,
//#$08=Fade in music, #$09=Power up music, #$0A=End game music, #$0B=Intro music.

def findmusicinitindex:

    //Load MusicInitIndex with #$FF.
    a = 0xff
    [musicinitindex] = a
    a = [currentsfxflags]
    //Branch to exit if no SFX flags set for Multi SFX.
    goto _005E when zero
def _005D:
    [musicinitindex]++
    //Shift left until bit flag is in carry bit.
    a = a << 1
    //Loop until SFX flag found.  Store bit-->
    goto _005D when ~carry
def _005E:
    //number of music in MusicInitIndex.
    return

//The following routine is used to add eight to the music index when looking for music flags
//in the MultiSFX address.  
def add8:

    a = [musicinitindex]
    carry = 0
    //Add #$08 to MusicInitIndex.
    a = a +# 0x8
    [musicinitindex] = a
    return

    a = [currentmusic]
    //This code does not appear to be used in this page.
    a = a | 0xf0
    [currentmusic] = a
def _005F:
    return

def music00start:

def ridley_page_BC77:
    //($BCAA)Initialize music 00.
    goto music00init

def music01start:

def ridley_page_BC7A:
    //($BCA4)Initialize music 01.
    goto music01init

def music02start:

def ridley_page_BC7D:
    //($BC9A)Initialize music 02.
    goto music02init

def msic03start:

def ridley_page_BC80:
    //($BC96)Initialize music 03.
    goto music03init

def music04start:

def ridley_page_BC83:
    //($BC89)Initialize music 04.
    goto music04init

def music05start:

def ridley_page_BC86:
    //($BC9E)Initialize music 05.
    goto music05init

def music04init:

    //Duty cycle and volume data for SQ1 and SQ2.
    a = 0xb3

def xymusicinit:

def _0060:
    //Duty cycle and volume data for SQ1.
    x = a
    //Duty cycle and volume data for SQ2.
    y = a

def _0061:
    //($B9E4)Set duty cycle and volume data for SQ1 and SQ2.
    call setvolumeanddisablesweep
    //($BF19)Setup music registers.
    call initializemusic
    //($BAA5)Load info for current frame of music data.
    goto loadcurrentmusicframedata

def music03init:

    //Duty cycle and volume data for SQ1 and SQ2.
    a = 0x34
    //Branch always
    goto _0060 when ~zero

def music02init:

    //Duty cycle and volume data for SQ1 and SQ2.
    a = 0xf4
    //Branch always
    goto _0060 when ~zero

def music05init:

    //Duty cycle and volume data for SQ1.
    x = 0xf5
    //Duty cycle and volume data for SQ2.
    y = 0xf6
    //Branch always
    goto _0061 when ~zero

def music01init:

    //Duty cycle and volume data for SQ1.
    x = 0xb6
    //Duty cycle and volume data for SQ2.
    y = 0xf6
    //Branch always
    goto _0061 when ~zero

def music00init:

    //Duty cycle and volume data for SQ1.
    x = 0x92
    //Duty cycle and volume data for SQ2.
    y = 0x96
    //Branch always
    goto _0061 when ~zero

//The following address table provides starting addresses of the volume data tables below:
def volumecntrladdresstbl:

    word: ridley_page_BCBA, 0xbcc5, 0xbccf, 0xbcda, 0xbd03

def volumedatatbl1:

def ridley_page_BCBA:
    byte: 0x1, 0x2, 0x2, 0x3, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0xff

def volumedatatbl2:

    byte: 0x2, 0x4, 0x5, 0x6, 0x7, 0x8, 0x7, 0x6, 0x5, 0xff

def volumedatatbl3:

    byte: 0x0, 0xd, 0x9, 0x7, 0x6, 0x5, 0x5, 0x5, 0x4, 0x4, 0xff

def volumedatatbl4:

    byte: 0x2, 0x6, 0x7, 0x7, 0x7, 0x6, 0x6, 0x6, 0x6, 0x5, 0x5, 0x5, 0x4, 0x4, 0x4, 0x3
    byte: 0x3, 0x3, 0x3, 0x2, 0x3, 0x3, 0x3, 0x3, 0x3, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2
    byte: 0x2, 0x2, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0xf0

def volumedatatbl5:

    byte: 0xa, 0xa, 0x9, 0x8, 0x7, 0x6, 0x5, 0x4, 0x3, 0x2, 0x7, 0x7, 0x6, 0x5, 0x4, 0x4
    byte: 0x3, 0x2, 0x2, 0x2, 0x5, 0x5, 0x5, 0x4, 0x3, 0x2, 0x2, 0x2, 0x1, 0x1, 0x4, 0x4
    byte: 0x3, 0x2, 0x1, 0x2, 0x2, 0x1, 0x1, 0x1, 0x2, 0x2, 0x2, 0x1, 0x1, 0xf0

//The init music table loads addresses $062B thru $0637 with the initial data needed to play the
//selected music.  The data for each entry in the table have the following format:
//.byte $xx, $xx, $xx, $xx, $xx : .word $xxxx, $xxxx, $xxxx, $xxxx.
//The first five bytes have the following functions:
//Byte 0=index to proper note length table.  Will be either #$00, #$0B or #$17.
//Byte 1=Repeat music byte. #$00=no repeat, any other value and the music repeats.
//Byte 2=Controls length counter for triangle channel.
//Byte 3=Volume control byte for SQ1.
//Byte 4=Volume control byte for SQ2.
//Address 0=Base address of SQ1 music data.
//Address 1=Base address of SQ2 music data.
//Address 2=Base address of triangle music data.
//Address 3=Base address of noise music data.

def initmusictbl:


//Mother brain music(not used this memory page).
    byte: 0xb, 0xff, 0xf5, 0x0, 0x0
    word: 0x100, 0x300, 0x500, 0x0

//Escape music(not used this memory page).
    byte: 0xb, 0xff, 0x0, 0x2, 0x2
    word: 0x100, 0x300, 0x500, 0x700

//Norfair music(not used this memory page).
    byte: 0xb, 0xff, 0xf0, 0x4, 0x4
    word: 0x100, 0x300, 0x500, 0x700

//Kraid area music.
    byte: 0x0, 0xff, 0xf0, 0x0, 0x0
    word: ridley_page_B03F, 0xb041, 0xb0aa, 0x0

//Item room music.
    byte: 0xb, 0xff, 0x3, 0x0, 0x0
    word: ridley_page_BDDA, 0xbddc, 0xbdcd, 0x0

//Ridley area music.
    byte: 0xb, 0xff, 0xf0, 0x1, 0x1
    word: ridley_page_B022, 0xb031, 0xb000, 0x0

//End game music(not used this memory page).
    byte: 0x17, 0x0, 0x0, 0x2, 0x1
    word: 0x100, 0x300, 0x500, 0x700

//Intro music(not used this memory page).
    byte: 0x17, 0x0, 0xf0, 0x2, 0x5
    word: 0x100, 0x300, 0x500, 0x700

//Fade in music
    byte: 0xb, 0x0, 0xf0, 0x2, 0x0
    word: ridley_page_BE3E, 0xbe1d, 0xbe36, 0x0

//Power up music
    byte: 0x0, 0x0, 0xf0, 0x1, 0x0
    word: ridley_page_BDF7, 0xbe0d, 0xbe08, 0x0

//Brinstar music(not used this memory page).
    byte: 0xb, 0xff, 0x0, 0x2, 0x3
    word: 0x100, 0x300, 0x500, 0x700

//Tourian music
    byte: 0xb, 0xff, 0x3, 0x0, 0x0
    word: ridley_page_BE59, 0xbe47, 0xbe62, 0x0

def itemroomtriangleindexdata:

    byte: 0xc8
    //3/32 seconds    +
    byte: 0xb0
    //E3        |
    byte: 0x38
    //F3        |
    byte: 0x3a
    //F#3        |
    byte: 0x3c
    //G3        |
    byte: 0x3e
    //Ab3        | Repeat 8 times
    byte: 0x40
    //G3        |
    byte: 0x3e
    //F#3        |
    byte: 0x3c
    //F3        |
    byte: 0x3a
    //1 3/16 seconds    |
    byte: 0xb6
    //no sound    +
    byte: 0x2
    byte: 0xff

def itemroomsq1indexdata:

def ridley_page_BDDA:
    //1/4 seconds
    byte: 0xb8
    //No sound
    byte: 0x2

def itemroomsq2indexdata:

    //3/4 seconds
    byte: 0xb3
    //No sound
    byte: 0x2
    //3/8 seconds
    byte: 0xb2
    //A#6
    byte: 0x74
    //No sound
    byte: 0x2
    //F5
    byte: 0x6a
    //No sound
    byte: 0x2
    //A6
    byte: 0x72
    //No sound
    byte: 0x2
    //C#5
    byte: 0x62
    //1 1/2 seconds
    byte: 0xb4
    //No sound
    byte: 0x2
    //3/8 seconds
    byte: 0xb2
    //C5
    byte: 0x60
    //No sound
    byte: 0x2
    //F#5
    byte: 0x6c
    //No sound
    byte: 0x2
    //B6
    byte: 0x76
    //3/4 seconds
    byte: 0xb3
    //No sound
    byte: 0x2
    //3/8 seconds
    byte: 0xb2
    //F6
    byte: 0x7e
    //No sound
    byte: 0x2
    //D6
    byte: 0x7c
    //3/4 seconds
    byte: 0xb3
    //No sound
    byte: 0x2
    //End item room music.
    byte: 0x0

def powerupsq1indexdata:

def ridley_page_BDF7:
    //1/2 seconds
    byte: 0xb3
    //C4
    byte: 0x48
    //A4
    byte: 0x42
    //1/4 seconds
    byte: 0xb2
    //G3
    byte: 0x3e
    //E3
    byte: 0x38
    //C3
    byte: 0x30
    //E3
    byte: 0x38
    //D4
    byte: 0x4c
    //A#4
    byte: 0x44
    //G3
    byte: 0x3e
    //D#3
    byte: 0x36
    byte: 0xc8
    //1/16 seconds    +
    byte: 0xb0
    //E3        | Repeat 8 times
    byte: 0x38
    //F#3        +
    byte: 0x3c
    byte: 0xff

def poweruptriangleindexdata:

    //1 second
    byte: 0xb4
    //A#3
    byte: 0x2c
    //A3
    byte: 0x2a
    //D#2
    byte: 0x1e
    //D2
    byte: 0x1c

def powerupsq2indexdata:

    //1/4 seconds
    byte: 0xb2
    //F2
    byte: 0x22
    //A#3
    byte: 0x2c
    //C3
    byte: 0x30
    //D3
    byte: 0x34
    //E3
    byte: 0x38
    //C3
    byte: 0x30
    //G2
    byte: 0x26
    //C3
    byte: 0x30
    //F3
    byte: 0x3a
    //D3
    byte: 0x34
    //A#3
    byte: 0x2c
    //G2
    byte: 0x26
    //1 second
    byte: 0xb4
    //A3
    byte: 0x2a
    //End power up music.
    byte: 0x0

def fadeinsq2indexdata:

    byte: 0xc4
    //3/32 seconds    +
    byte: 0xb0
    //G3        | Repeat 4 times
    byte: 0x3e
    //C3        +
    byte: 0x30
    byte: 0xff
    byte: 0xc4
    //A4        + Repeat 4 times
    byte: 0x42
    //C3        +
    byte: 0x30
    byte: 0xff
    byte: 0xc4
    //F3        + Repeat 4 times
    byte: 0x3a
    //A#3        +
    byte: 0x2c
    byte: 0xff
    byte: 0xc4
    //E3        + Repeat 4 times
    byte: 0x38
    //G2        +
    byte: 0x26
    byte: 0xff
    byte: 0xc4
    //D3        + Repeat 4 times
    byte: 0x34
    //E2        +
    byte: 0x20
    byte: 0xff
    byte: 0xe0
    //D3        + Repeat 32 times
    byte: 0x34
    //F#2        +
    byte: 0x24
    byte: 0xff

def fadeintriangleindexdata:

    //3/4 seconds
    byte: 0xb3
    //D#3
    byte: 0x36
    //D3
    byte: 0x34
    //C3
    byte: 0x30
    //A3
    byte: 0x2a
    //1 1/2 seconds
    byte: 0xb4
    //D2
    byte: 0x1c
    //D2
    byte: 0x1c

def fadeinsq1indexdata:

def ridley_page_BE3E:
    //3/4 seconds
    byte: 0xb3
    //D3
    byte: 0x34
    //F3
    byte: 0x3a
    //D3
    byte: 0x34
    //C3
    byte: 0x30
    //1 1/2 seconds
    byte: 0xb4
    //A3
    byte: 0x2a
    //A3
    byte: 0x2a
    //End fade in music.
    byte: 0x0

def touriansq2indexdata:

    //1 1/2 seconds
    byte: 0xb4
    //A2
    byte: 0x12
    //3/4 seconds
    byte: 0xb3
    //Ab1
    byte: 0x10
    //C2
    byte: 0x18
    //B2
    byte: 0x16
    //F1
    byte: 0xa
    //1 1/2 seconds
    byte: 0xb4
    //A#2
    byte: 0x14
    //A2
    byte: 0x12
    //3/4 seconds
    byte: 0xb3
    //Ab1
    byte: 0x10
    //D1
    byte: 0x6
    //G1
    byte: 0xe
    //C#1
    byte: 0x4
    //1 1/2 seconds
    byte: 0xb4
    //F#1
    byte: 0xc
    //End Tourian music.
    byte: 0x0

def touriansq1indexdata:

def ridley_page_BE59:
    byte: 0xe0
    //3/32 seconds    +
    byte: 0xb0
    //F#4        |
    byte: 0x54
    //D#4        |
    byte: 0x4e
    //C4        | Repeat 32 times
    byte: 0x48
    //A4        |
    byte: 0x42
    //C4        |
    byte: 0x48
    //D#4        +
    byte: 0x4e
    byte: 0xff

def touriantriangleindexdata:

    byte: 0xe0
    //3/4 seconds    +
    byte: 0xb3
    //No sound    |
    byte: 0x2
    //3/32 seconds    |
    byte: 0xb0
    //F#3        |
    byte: 0x3c
    //Ab3        |
    byte: 0x40
    //A#4        |
    byte: 0x44
    //C#4        |
    byte: 0x4a
    //D#4        |
    byte: 0x4e
    //F#4        |
    byte: 0x54
    //Ab4        | Repeat 32 times
    byte: 0x58
    //A#5        |
    byte: 0x5c
    //C#5        |
    byte: 0x62
    //D#5        |
    byte: 0x66
    //F#5        |
    byte: 0x6c
    //Ab5        |
    byte: 0x70
    //A#6        |
    byte: 0x74
    //C#6        |
    byte: 0x7a
    //3/4 seconds    |
    byte: 0xb3
    //No sound    +
    byte: 0x2
    byte: 0xff

//The following table contains the musical notes used by the music player.  The first byte is
//the period high information(3 bits) and the second byte is the period low information(8 bits).
//The formula for figuring out the frequency is as follows: 1790000/16/(hhhllllllll + 1)

def musicnotestbl:

    //55.0Hz (A1)    Index #$00 (Not used)
    byte: 0x7
    byte: 0xf0

    //No sound    Index #$02
    byte: 0x0
    byte: 0x0

    //69.3Hz (C#2)    Index #$04
    byte: 0x6
    byte: 0x4e

    //73.4Hz (D2)    Index #$06
    byte: 0x5
    byte: 0xf3

    //82.4Hz (E2)    Index #$08
    byte: 0x5
    byte: 0x4d

    //87.3Hz (F2)    Index #$0A
    byte: 0x5
    byte: 0x1

    //92.5Hz (F#2)    Index #$0C
    byte: 0x4
    byte: 0xb9

    //98.0Hz (G2)    Index #$0E
    byte: 0x4
    byte: 0x75

    //103.8Hz (Ab2)    Index #$10
    byte: 0x4
    byte: 0x35

    //110.0Hz (A2)    Index #$12
    byte: 0x3
    byte: 0xf8

    //116.5Hz (A#2)    Index #$14
    byte: 0x3
    byte: 0xbf

    //123.5Hz (B2)    Index #$16
    byte: 0x3
    byte: 0x89

    //130.7Hz (C3)    Index #$18
    byte: 0x3
    byte: 0x57

    //138.5Hz (C#3)    Index #$1A
    byte: 0x3
    byte: 0x27

    //146.8Hz (D3)    Index #$1C
    byte: 0x2
    byte: 0xf9

    //155.4Hz (D#3)    Index #$1E
    byte: 0x2
    byte: 0xcf

    //164.8Hz (E3)    Index #$20
    byte: 0x2
    byte: 0xa6

    //174.5Hz (F3)    Index #$22
    byte: 0x2
    byte: 0x80

    //184.9Hz (F#3)    Index #$24
    byte: 0x2
    byte: 0x5c

    //196.0Hz (G3)    Index #$26
    byte: 0x2
    byte: 0x3a
    
    //207.6Hz (Ab3)    Index #$28
    byte: 0x2
    byte: 0x1a

    //219.8Hz (A3)    Index #$2A
    byte: 0x1
    byte: 0xfc

    //233.1Hz (A#3)    Index #$2C
    byte: 0x1
    byte: 0xdf

    //247.0Hz (B3)    Index #$2E
    byte: 0x1
    byte: 0xc4

    //261.4Hz (C4)    Index #$30
    byte: 0x1
    byte: 0xab

    //276.9Hz (C#4)    Index #$32
    byte: 0x1
    byte: 0x93

    //293.6Hz (D4)    Index #$34
    byte: 0x1
    byte: 0x7c

    //310.8Hz (D#4)    Index #$36
    byte: 0x1
    byte: 0x67

    //330.0Hz (E4)    Index #$38
    byte: 0x1
    byte: 0x52

    //349.6Hz (F4)    Index #$3A
    byte: 0x1
    byte: 0x3f

    //370.4Hz (F#4)    Index #$3C
    byte: 0x1
    byte: 0x2d

    //392.5Hz (G4)    Index #$3E
    byte: 0x1
    byte: 0x1c

    //415.9Hz (Ab4)    Index #$40
    byte: 0x1
    byte: 0xc

    //440.4Hz (A4)    Index #$42
    byte: 0x0
    byte: 0xfd

    //468.1Hz (A#4)    Index #$44
    byte: 0x0
    byte: 0xee

    //495.0Hz (B4)    Index #$46
    byte: 0x0
    byte: 0xe1

    //525.2Hz (C5)    Index #$48
    byte: 0x0
    byte: 0xd4

    //556.6Hz (C#5)    Index #$4A
    byte: 0x0
    byte: 0xc8

    //588.8Hz (D5)    Index #$4C
    byte: 0x0
    byte: 0xbd

    //625.0Hz (D#5)    Index #$4E
    byte: 0x0
    byte: 0xb2

    //662.0Hz (E5)    Index #$50
    byte: 0x0
    byte: 0xa8

    //699.2Hz (F5)    Index #$52
    byte: 0x0
    byte: 0x9f

    //740.9Hz (F#5)    Index #$54
    byte: 0x0
    byte: 0x96

    //787.9Hz (G5)    Index #$56
    byte: 0x0
    byte: 0x8d

    //834.9Hz (Ab5)    Index #$58
    byte: 0x0
    byte: 0x85

    //880.9HZ (A5)    Index #$5A
    byte: 0x0
    byte: 0x7e

    //940.1Hz (A#5)    Index #$5C
    byte: 0x0
    byte: 0x76

    //990.0Hz (B5)    Index #$5E
    byte: 0x0
    byte: 0x70

    //1055Hz (C6)    Index #$60
    byte: 0x0
    byte: 0x69

    //1118Hz (C#6)    Index #$62
    byte: 0x0
    byte: 0x63

    //1178Hz (D6)    Index #$64
    byte: 0x0
    byte: 0x5e

    //1257Hz (D#6)    Index #$66
    byte: 0x0
    byte: 0x58

    //1332Hz (E6)    Index #$68
    byte: 0x0
    byte: 0x53

    //1398Hz (F6)    Index #$6A
    byte: 0x0
    byte: 0x4f

    //1492Hz (F#6)    Index #$6C
    byte: 0x0
    byte: 0x4a

    //1576Hz (G6)    Index #$6E
    byte: 0x0
    byte: 0x46

    //1670Hz (Ab6)    Index #$70
    byte: 0x0
    byte: 0x42

    //1776Hz (A6)    Index #$72
    byte: 0x0
    byte: 0x3e

    //1896Hz (A#6)    Index #$74
    byte: 0x0
    byte: 0x3a

    //1998Hz (B6)    Index #$76
    byte: 0x0
    byte: 0x37

    //2111Hz (C7)    Index #$78
    byte: 0x0
    byte: 0x34

    //2238Hz (C#7)    Index #$7A
    byte: 0x0
    byte: 0x31

    //2380Hz (D7)    Index #$7C
    byte: 0x0
    byte: 0x2e

    //2796Hz (F7)    Index #$7E
    byte: 0x0
    byte: 0x27

//The following tables are used to load the music frame count addresses ($0640 thru $0643). The
//larger the number, the longer the music will play a solid note.  The number represents how
//many frames the note will play.  There is a small discrepancy in time length because the
//Nintendo runs at 60 frames pers second and I am using 64 frames per second to make the
//numbers below divide more evenly.

//Used by power up music and Kraid area music.

def notelengths0tbl:

    //About    1/16 seconds ($B0)
    byte: 0x4
    //About    1/8  seconds ($B1)
    byte: 0x8
    //About    1/4  seconds ($B2)
    byte: 0x10
    //About    1/2  seconds ($B3)
    byte: 0x20
    //About 1       seconds ($B4)
    byte: 0x40
    //About    3/8  seconds ($B5)
    byte: 0x18
    //About    3/4  seconds ($B6)
    byte: 0x30
    //About    3/16 seconds ($B7)
    byte: 0xc
    //About   11/64 seconds ($B8)
    byte: 0xb
    //About    5/64 seconds ($B9)
    byte: 0x5
    //About    1/32 seconds ($BA)
    byte: 0x2

//Used by item room, fade in, Brinstar music, Ridley area music, Mother brain music,
//escape music, Norfair music and Tourian music.

def notelengths1tbl:

    //About    3/32 seconds ($B0)
    byte: 0x6
    //About    3/16 seconds ($B1)
    byte: 0xc
    //About    3/8  seconds ($B2)
    byte: 0x18
    //About    3/4  seconds ($B3)
    byte: 0x30
    //About 1  1/2  seconds ($B4)
    byte: 0x60
    //About    9/16 seconds ($B5)
    byte: 0x24
    //About 1  3/16 seconds ($B6)
    byte: 0x48
    //About    9/32 seconds ($B7)
    byte: 0x12
    //About    1/4  seconds ($B8)
    byte: 0x10
    //About    1/8  seconds ($B9)
    byte: 0x8
    //About    3/64 seconds ($BA)
    byte: 0x3

//Used by intro and end game music.

def notelengths2tbl:

    //About    1/4  seconds ($B0)
    byte: 0x10
    //About    7/64 seconds ($B1)
    byte: 0x7
    //About    7/32 seconds ($B2)
    byte: 0xe
    //About    7/16 seconds ($B3)
    byte: 0x1c
    //About    7/8  seconds ($B4)
    byte: 0x38
    //About 1 13/16 seconds ($B5)
    byte: 0x70
    //About   21/32 seconds ($B6)
    byte: 0x2a
    //About 1  5/16 seconds ($B7)
    byte: 0x54
    //About   21/64 seconds ($B8)
    byte: 0x15
    //About    9/32 seconds ($B9)
    byte: 0x12
    //About    1/32 seconds ($BA)
    byte: 0x2
    //About    3/64 seconds ($BB)
    byte: 0x3

def initializemusic:
                    
    //($B3FC)Check to see if restarting current music.
    call checkmusicflags
    //Load current SFX flags and store CurrentMusic address.
    a = [currentsfxflags]
    [currentmusic] = a
    a = [musicinitindex]
    y = a
    //($BBFA)Find index for music in InitMusicInitIndexTbl.
    a = [initmusicindextbl:y]
    y = a
    x = 0x0

def _0062:
    //Base is $BD31.
    a = [initmusictbl:y]
    [notelengthtbloffset:x] = a
    //The following loop repeats 13 times to-->
    y++
    //load the initial music addresses -->
    x++
    //(registers $062B thru $0637).
    a = x
    compare a to 0xd
    goto _0062 when ~zero

    //Resets addresses $0640 thru $0643 to #$01.-->
    a = 0x1
    //These addresses are used for counting the-->
    [sq1musicframecount] = a
    //number of frames music channels have been playing.
    [sq2musicframecount] = a
    [trianglemusicframecount] = a
    [noisemusicframecount] = a
    a = 0x0
    [sq1musicindexindex] = a
    //Resets addresses $0638 thru $063B to #$00.-->
    [sq2musicindexindex] = a
    //These are the index to find sound channel data index.
    [trianglemusicindexindex] = a
    [noisemusicindexindex] = a
    return

//Not used.
    byte: 0x10, 0x7, 0xe, 0x1c, 0x38, 0x70, 0x2a, 0x54, 0x15, 0x12, 0x2, 0x3, 0x20, 0x2c, 0xb4, 0xad
    byte: 0x4d, 0x6, 0x8d, 0x8d, 0x6, 0xad, 0x5e, 0x6, 0xa8, 0xb9, 0x2a, 0xbc, 0xa8, 0xa2, 0x0, 0xb9
    byte: 0x61, 0xbd, 0x9d, 0x2b, 0x6, 0xc8, 0xe8, 0x8a, 0xc9, 0xd, 0xd0, 0xf3, 0xa9, 0x1, 0x8d, 0x40
    byte: 0x6, 0x8d, 0x41, 0x6, 0x8d, 0x42, 0x6, 0x8d, 0x43, 0x6, 0xa9, 0x0, 0x8d, 0x38, 0x6, 0x8d
    byte: 0x39, 0x6, 0x8d, 0x3a, 0x6, 0x8d, 0x3b, 0x6, 0x60, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0

//----------------------------------------------[ RESET ]--------------------------------------------

def reset:

    //Disables interrupt.
    interrupt = 1
    //Sets processor to binary mode.
    decimal = 0
    x = 0x0
    //Clear PPU control registers.
    [ppucontrol0] = x
    [ppucontrol1] = x
def _0063:
    a = [ppustatus]
    //Wait for VBlank.
    goto _0063 when ~negative
def _0064:
    a = [ppustatus]
    goto _0064 when ~negative
    a = a | 0xff
    //Reset MMC1 chip.-->
    [mmc1reg0] = a
    //(MSB is set).
    [mmc1reg1] = a
    [mmc1reg2] = a
    [mmc1reg3] = a
    //($C01A)Does preliminry housekeeping.
    goto startup

//Not used.
    byte: 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    byte: 0x0, 0x0, 0x0, 0x0, 0x0

//----------------------------------------[ Interrupt vectors ]--------------------------------------

    //($C0D9)NMI vector.
    word: nmi
    //($FFB0)Reset vector.
    word: reset
    //($FFB0)IRQ vector.
    word: reset
end
